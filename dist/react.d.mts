import * as react_jsx_runtime from 'react/jsx-runtime';
import { ReactNode } from 'react';

type QueryParamsType$b = Record<string | number, any>;
type ResponseFormat$b = keyof Omit<Body, "body" | "bodyUsed">;
interface FullRequestParams$b extends Omit<RequestInit, "body"> {
    /** set parameter to `true` for call `securityWorker` for this request */
    secure?: boolean;
    /** request path */
    path: string;
    /** content type of request body */
    type?: ContentType$b;
    /** query params */
    query?: QueryParamsType$b;
    /** format of response (i.e. response.json() -> format: "json") */
    format?: ResponseFormat$b;
    /** request body */
    body?: unknown;
    /** base url */
    baseUrl?: string;
    /** request cancellation token */
    cancelToken?: CancelToken$b;
}
type RequestParams$c = Omit<FullRequestParams$b, "body" | "method" | "query" | "path">;
interface ApiConfig$b<SecurityDataType = unknown> {
    baseUrl?: string;
    baseApiParams?: Omit<RequestParams$c, "baseUrl" | "cancelToken" | "signal">;
    securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams$c | void> | RequestParams$c | void;
    customFetch?: typeof fetch;
}
type CancelToken$b = Symbol | string | number;
declare enum ContentType$b {
    Json = "application/json",
    FormData = "multipart/form-data",
    UrlEncoded = "application/x-www-form-urlencoded",
    Text = "text/plain"
}
declare class HttpClient$b<SecurityDataType = unknown> {
    baseUrl: string;
    private securityData;
    private securityWorker?;
    private abortControllers;
    private customFetch;
    private baseApiParams;
    constructor(apiConfig?: ApiConfig$b<SecurityDataType>);
    setSecurityData: (data: SecurityDataType | null) => void;
    protected encodeQueryParam(key: string, value: any): string;
    protected addQueryParam(query: QueryParamsType$b, key: string): string;
    protected addArrayQueryParam(query: QueryParamsType$b, key: string): any;
    protected toQueryString(rawQuery?: QueryParamsType$b): string;
    protected addQueryParams(rawQuery?: QueryParamsType$b): string;
    private contentFormatters;
    protected mergeRequestParams(params1: RequestParams$c, params2?: RequestParams$c): RequestParams$c;
    protected createAbortSignal: (cancelToken: CancelToken$b) => AbortSignal | undefined;
    abortRequest: (cancelToken: CancelToken$b) => void;
    request: <T = any>({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }: FullRequestParams$b) => Promise<T>;
}

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Account {
    reference: string;
    /** @maxLength 200 */
    name?: string;
    definition: string | null;
    /** @maxLength 200 */
    label?: string | null;
    primary: boolean;
    recon: boolean;
    currencies: ReducedAccountAccountAsset[];
    metadata: Record<string, any>;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AccountAccountAsset {
    id: string;
    balance: number;
    available_balance: number;
    currency: ReducedAsset$1;
    limits: AccountAssetLimit$1[];
    fees: AdminAccountAssetFee$1[];
    metadata: Record<string, any>;
    active: boolean;
    settings: AccountAssetSettings$1;
    subtypes: TransactionSubtype$1[];
    created: number;
    updated: number;
}
interface AccountAccountAssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AccountAccountAsset;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AccountAsset$1 {
    id: string;
    balance: number;
    available_balance: number;
    account: ReducedAccount$1;
    currency: ReducedAsset$1;
    metadata: Record<string, any>;
    active: boolean;
    created: number;
    updated: number;
}
interface AccountAssetFee {
    id: number;
    name: string | null;
    description: string | null;
    /** Convert the Fee value from Decimal to int based on asset divisibility */
    value: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    created: number;
    updated: number;
    account: string;
    asset: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AccountAssetLimit$1 {
    id: number;
    /** Convert the Limit value from Decimal to int based on asset divisibility */
    value: number;
    /**
     * * `max` - Maximum
     * * `day_max` - Maximum per day
     * * `month_max` - Maximum per month
     * * `min` - Minimum
     * * `overdraft` - Overdraft
     */
    type: "max" | "day_max" | "month_max" | "min" | "overdraft";
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string;
    created: number;
    updated: number;
}
interface AccountAssetLimitResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AccountAssetLimit$1;
}
interface AccountAssetResponse$1 {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AccountAsset$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AccountAssetSettings$1 {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: ReducedTransactionSubtype$1[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AccountDefinition {
    /** @maxLength 200 */
    name: string;
    /** @maxLength 200 */
    label?: string | null;
    recon?: boolean;
    groups: AccountDefinitionGroup[];
    updated: number;
    created: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AccountDefinitionGroup {
    group: ReducedGroup$1;
    default: boolean;
    primary: boolean;
    currencies: AccountDefinitionGroupAsset[];
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AccountDefinitionGroupAsset {
    currency: ReducedAsset$1;
    created: number;
    updated: number;
}
interface AccountDefinitionResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AccountDefinition;
}
interface AccountResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: Account;
}
/** This serializer can be used if only a `status` is required in the response. */
interface ActionResponse$a {
    status: string;
}
interface AdminAccountAssetFee$1 {
    id: number;
    name: string | null;
    description: string | null;
    /** Convert the Fee value from Decimal to int based on asset divisibility */
    value: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    created: number;
    updated: number;
    account: string;
    asset: string;
    debit_account: string | null;
    credit_account: string | null;
    debit_subtype: string | null;
    credit_subtype: string | null;
    inferred: boolean | null;
    archived: boolean | null;
}
interface AdminAccountAssetFeeResponse$1 {
    status: string;
    data: AdminAccountAssetFee$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompanyAddress$1 {
    /** @maxLength 200 */
    line_1?: string | null;
    /** @maxLength 200 */
    line_2?: string | null;
    /** @maxLength 100 */
    city?: string | null;
    /** @maxLength 100 */
    state_province?: string | null;
    country?: string | null;
    /** @maxLength 10 */
    postal_code?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Asset$2 {
    /** @maxLength 30 */
    code?: string | null;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
    /** @format uri */
    icon?: string | null;
    metadata: Record<string, any>;
    created: number;
    updated: number;
}
interface AssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: Asset$2;
}
/**
 * Extended user information shown based on the default user info serializer.
 * Contain additional information about user permissions and settings.
 */
interface Auth {
    id: string;
    /**
     * @maxLength 150
     * @pattern ^[\w.@+-]+$
     */
    username: string | null;
    /** @format email */
    email: string | null;
    mobile: string | null;
    /** @maxLength 50 */
    first_name?: string | null;
    /** @maxLength 50 */
    middle_name?: string | null;
    /** @maxLength 50 */
    last_name?: string | null;
    /** @format uri */
    profile?: string | null;
    groups: ReducedGroup$1[];
    /** @default false */
    temporary: boolean | null;
    /** @maxLength 24 */
    id_number?: string | null;
    /** @format date */
    birth_date?: string | null;
    currency: ReducedAsset$1;
    account: string;
    /** @default 0 */
    balance: number;
    /** @default 0 */
    available_balance: number;
    company: string;
    owner: boolean;
    /** @maxLength 24 */
    language?: string;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    nationality?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    residency?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `male` - Male
     * * `female` - Female
     * * `other` - Other
     * * `not_specified` - Not Specified
     */
    gender?: "male" | "female" | "other" | "not_specified" | null;
    /**
     * * `mr` - Mr
     * * `mrs` - Mrs
     * * `ms` - Ms
     * * `mx` - Mx
     */
    title?: "mr" | "mrs" | "ms" | "mx" | null;
    /**
     * * `single` - Single
     * * `married` - Married
     * * `divorced` - Divorced
     * * `widowed` - Widowed
     */
    marital_status?: "single" | "married" | "divorced" | "widowed" | null;
    /** @maxLength 100 */
    fathers_name?: string | null;
    /** @maxLength 100 */
    mothers_name?: string | null;
    /** @maxLength 100 */
    grandfathers_name?: string | null;
    /** @maxLength 100 */
    grandmothers_name?: string | null;
    /** @maxLength 100 */
    central_bank_number?: string | null;
    metadata: Record<string, any>;
    /** @maxLength 100 */
    timezone?: string | null;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    business_name?: string | null;
    /** @deprecated */
    verified: boolean;
    verification: UserVerification$1;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    created: number;
    updated: number;
    settings: UserSettings$2;
}
interface AuthResponse {
    status: string;
    /**
     * Extended user information shown based on the default user info serializer.
     * Contain additional information about user permissions and settings.
     */
    data: Auth;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AuthToken {
    /** @maxLength 8 */
    token_key: string;
    expires: number;
    created: number;
}
type AuthTokenList = AuthToken[];
interface AuthTokenListResponse {
    status: string;
    data: AuthTokenList;
}
interface AuthTokenResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AuthToken;
}
interface Authenticated$1 {
    /**
     * Fetch a token to use for authentication. The token is excluded if this
     * is a cookied based authenication response.
     */
    token: string;
    /**
     * Fetch a refresh token to use for refreshing authentication. The refresh
     * token is excluded if this is a cookied based authenication response.
     */
    refresh_token: string;
    /**
     * A reduced user serializer showing only the necessary information for post
     * login serialization.
     */
    user: ProtectedUserInfo$1;
    challenges: AuthenticatorChallenge$1[];
    expires: number;
    created: number;
}
interface AuthenticatedResponse$1 {
    status: string;
    data: Authenticated$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AuthenticatorChallenge$1 {
    id: string;
    /**
     * * `authentication` - Authentication
     * * `authorization` - Authorization
     * * `setup` - Setup
     */
    type: "authentication" | "authorization" | "setup";
    /**
     * * `ephemeral` - Ephemeral
     * * `durable` - Durable
     * * `permanent` - Permanent
     */
    durability: "ephemeral" | "durable" | "permanent";
    authenticator_types: ("totp" | "sms" | "static")[];
    created: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface BankOwner$1 {
    /** @maxLength 50 */
    first_name?: string | null;
    /** @maxLength 50 */
    middle_name?: string | null;
    /** @maxLength 50 */
    last_name?: string | null;
    /** @maxLength 150 */
    full_name?: string | null;
    /** @maxLength 24 */
    phone_number?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    email_address?: string | null;
    /** @maxLength 100 */
    company_name?: string | null;
    /** @maxLength 15 */
    ein_tin?: string | null;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    address?: BankOwnerAddress$1;
    /** @maxLength 255 */
    address_text?: string | null;
    /** @maxLength 16 */
    cpf_cpnj?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface BankOwnerAddress$1 {
    /** @maxLength 200 */
    line_1?: string | null;
    /** @maxLength 200 */
    line_2?: string | null;
    /** @maxLength 100 */
    city?: string | null;
    /** @maxLength 100 */
    state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    postal_code?: string | null;
    /** @maxLength 10 */
    state_code?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Company$4 {
    id: string;
    /** @maxLength 100 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    website?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    support_website?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    documentation_website?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    support_email?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @format uri */
    logo: string | null;
    /** @format uri */
    icon: string | null;
    address: AdminCompanyAddress$1;
    settings: CompanySettings$1;
    services: ReducedService$1[];
    public?: boolean;
    metadata?: Record<string, any>;
    /**
     * * `test` - Test
     * * `production` - Production
     */
    mode: "test" | "production";
    /**
     * * `pending` - Pending
     * * `active` - Active
     * * `restricted` - Restricted
     * * `suspended` - Suspended
     */
    status: "pending" | "active" | "restricted" | "suspended";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CompanyBankAccount {
    id: number;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 200 */
    number?: string | null;
    /** @maxLength 200 */
    type?: string | null;
    /** @maxLength 200 */
    bank_name?: string | null;
    /** @maxLength 50 */
    bank_code?: string | null;
    /** @maxLength 3 */
    bank_currency?: string | null;
    /** @maxLength 50 */
    branch_code?: string | null;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    branch_address?: CompanyBankBranchAddress$1;
    /** @maxLength 50 */
    routing_number?: string | null;
    /** @maxLength 16 */
    swift?: string | null;
    /** @maxLength 50 */
    iban?: string | null;
    /** @maxLength 16 */
    bic?: string | null;
    metadata?: Record<string, any>;
    currencies: ReducedAsset$1[];
    /** * `withdraw` - Withdraw */
    action: "withdraw";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CompanyBankBranchAddress$1 {
    /** @maxLength 200 */
    line_1?: string | null;
    /** @maxLength 200 */
    line_2?: string | null;
    /** @maxLength 100 */
    city?: string | null;
    /** @maxLength 100 */
    state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    postal_code?: string | null;
    /** @maxLength 10 */
    state_code?: string | null;
}
interface CompanyDisallowedTransactionSubtype$1 {
    subtype: ReducedTransactionSubtype$1;
    currency: ReducedAsset$1;
}
interface CompanyResponse$2 {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: Company$4;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CompanySettings$1 {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: CompanyDisallowedTransactionSubtype$1[];
    require_transaction_subtypes?: boolean;
    require_verification?: boolean;
    allow_registrations?: boolean;
    allow_overdrafts?: boolean;
    allow_session_durations?: boolean;
    require_registration?: boolean;
    /**
     * @min 300
     * @max 2678400
     */
    default_session_duration?: number;
    /**
     * @min 300
     * @max 2678400
     */
    default_transaction_lifespan?: number;
    require_terms_and_conditions?: boolean;
    require_privacy_policy?: boolean;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    account_reference_length?: number;
    /** @format uri */
    password_reset_url?: string | null;
    /** @format uri */
    password_set_url?: string | null;
    /** @format uri */
    email_verification_url?: string | null;
    /** @format uri */
    deactivate_verification_url?: string | null;
    /** @format uri */
    request_delete_verification_url?: string | null;
    /** @format uri */
    terms_and_conditions_url?: string | null;
    /** @format uri */
    privacy_policy_url?: string | null;
    /** @maxItems 249 */
    nationalities: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
    /** @maxItems 249 */
    residencies: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CompanyWalletAccount {
    id: number;
    /** @maxLength 200 */
    username?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    email?: string | null;
    /** @maxLength 24 */
    mobile?: string | null;
    /** @maxLength 50 */
    name?: string | null;
    /**
     * * `paypal` - Paypal
     * * `venmo` - Venmo
     * * `other` - Other
     */
    type?: "paypal" | "venmo" | "other";
    metadata?: Record<string, any>;
    currencies: ReducedAsset$1[];
    /** * `withdraw` - Withdraw */
    action: "withdraw";
    created: number;
    updated: number;
}
interface CreateAccountAccountAsset {
    currency: string;
    active?: boolean;
}
interface CreateAuthToken {
    /** @maxLength 128 */
    password: string;
    /** @min 0 */
    duration?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateCompany {
    id: string;
    /** @maxLength 100 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    website?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    support_website?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    documentation_website?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    support_email?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @format uri */
    logo?: string | null;
    /** @format uri */
    icon?: string | null;
    address: AdminCompanyAddress$1;
    settings: CompanySettings$1;
    services: ReducedService$1[];
    public?: boolean;
    metadata?: Record<string, any>;
    /**
     * * `test` - Test
     * * `production` - Production
     * @default "test"
     */
    mode?: "test" | "production";
    /**
     * * `pending` - Pending
     * * `active` - Active
     * * `restricted` - Restricted
     * * `suspended` - Suspended
     */
    status: "pending" | "active" | "restricted" | "suspended";
    created: number;
    updated: number;
    /** @format email */
    system_email?: string;
    owner: ReducedUserInfo$1;
    /**
     * @maxItems 1
     * @minItems 0
     */
    links?: string[];
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface CreateCreditTransaction {
    /** @maxLength 64 */
    id?: string;
    amount: number;
    currency: string;
    account?: string | null;
    subtype?: string | null;
    /** @maxLength 100 */
    reference?: string | null;
    /**
     * @maxLength 100
     * @default ""
     */
    note?: string;
    metadata?: Record<string, any>;
    /** @default false */
    inclusive?: boolean;
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * @default "Pending"
     */
    status?: "Initiating" | "Quoted" | "Pending";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateCryptoAccount {
    id: number;
    /** @maxLength 250 */
    address: string;
    /** @maxLength 50 */
    name?: string | null;
    code: string | null;
    /**
     * * `bitcoin` - Bitcoin
     * * `ethereum` - Ethereum
     * * `stellar` - Stellar
     * * `other` - Other
     */
    crypto_type?: "bitcoin" | "ethereum" | "stellar" | "other";
    /**
     * * `testnet` - Testnet
     * * `mainnet` - Mainnet
     * @default "testnet"
     */
    network?: "testnet" | "mainnet";
    metadata?: Record<string, any>;
    currencies: ReducedAsset$1[];
    account_currencies: ReducedAccountAsset$1[];
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    /**
     * * `withdraw` - Withdraw
     * @default "withdraw"
     */
    action?: "withdraw";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateCryptoAccountAccountAsset {
    account_currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateCryptoAccountAsset {
    currency: string;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface CreateDebitTransaction {
    /** @maxLength 64 */
    id?: string;
    amount: number;
    currency: string;
    account?: string | null;
    subtype?: string | null;
    /** @maxLength 100 */
    reference?: string | null;
    /**
     * @maxLength 100
     * @default ""
     */
    note?: string;
    metadata?: Record<string, any>;
    /** @default false */
    inclusive?: boolean;
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * @default "Pending"
     */
    status?: "Initiating" | "Quoted" | "Pending";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateDevice {
    id: number;
    /** @maxLength 64 */
    imei: string;
    /** @maxLength 30 */
    name?: string | null;
    apps: DeviceApp$1[];
    metadata?: Record<string, any>;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateDeviceApp {
    id: number;
    /** @maxLength 30 */
    name?: string | null;
    /** * `expo` - Expo */
    type: "expo";
    /** @maxLength 100 */
    token?: string | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateEmail {
    id: number;
    /**
     * @format email
     * @maxLength 254
     */
    email: string;
    primary?: boolean;
    verified: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateExport {
    /**
     * * `account` - Account
     * * `account_currency` - Account_Currency
     * * `transaction` - Transaction
     * * `user` - User
     */
    resource: "account" | "account_currency" | "transaction" | "user";
    page_size?: number | null;
    query?: Record<string, any>;
    /**
     * * `json` - JSON
     * * `csv` - CSV
     */
    file_format?: "json" | "csv";
}
interface CreateJWT {
    nonce?: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateMFAAuthenticator {
    id: string;
    /**
     * * `totp` - Totp
     * * `sms` - Sms
     * * `static` - Static
     */
    type: "totp" | "sms" | "static";
    verified: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateMetric {
    /** @maxLength 50 */
    name?: string | null;
    /** @maxLength 50 */
    slug?: string | null;
    /**
     * * `account_count` - Account Count
     * * `transaction_count` - Transaction Count
     * * `transaction_complete_count` - Transaction Complete Count
     * * `transaction_failed_count` - Transaction Failed Count
     * * `transaction_pending_count` - Transaction Pending Count
     * * `transaction_complete_sum` - Transaction Complete Sum
     * * `transaction_failed_sum` - Transaction Failed Sum
     * * `transaction_pending_sum` - Transaction Pending Sum
     * * `transaction_balance_sum` - Transaction Balance Sum
     * * `transaction_available_balance_sum` - Transaction Available Balance Sum
     * * `user_count` - User Count
     * * `user_active_count` - User Active Count
     * * `user_transacted_in_30days_count` - User Transacted In 30Days Count
     */
    type: "account_count" | "transaction_count" | "transaction_complete_count" | "transaction_failed_count" | "transaction_pending_count" | "transaction_complete_sum" | "transaction_failed_sum" | "transaction_pending_sum" | "transaction_balance_sum" | "transaction_available_balance_sum" | "user_count" | "user_active_count" | "user_transacted_in_30days_count";
    /**
     * * `accumulate` - Accumulate
     * * `set` - Set
     */
    method?: "accumulate" | "set";
    currency?: string;
    timezone: string;
    query?: Record<string, any>;
    metadata?: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateMobile {
    id: number;
    /** @maxLength 24 */
    number: string;
    primary: boolean;
    verified: boolean;
    created: number;
    updated: number;
}
interface CreateMultiTransaction {
    transactions: ExplicitCreateTransaction[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateStatement {
    account: string;
    timezone: string;
    /** @min 0 */
    start_date?: number | null;
    /** @min 0 */
    end_date?: number | null;
    metadata?: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateTransactionCollection {
    /** @maxLength 64 */
    id?: string;
    transactions: CreateTransactionCollectionTransaction[];
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     */
    status?: "Initiating" | "Quoted" | "Pending";
    created: number;
    updated: number;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface CreateTransactionCollectionTransaction {
    /** @maxLength 64 */
    id?: string;
    /** @maxLength 64 */
    parent?: string;
    /** @maxLength 64 */
    partner?: string;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    amount: number;
    currency: string;
    account?: string | null;
    subtype?: string | null;
    /** @maxLength 100 */
    reference?: string | null;
    /**
     * @maxLength 100
     * @default ""
     */
    note?: string;
    metadata?: Record<string, any>;
    user?: string | null;
    /** @default false */
    inclusive?: boolean;
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status?: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateTransferTransaction {
    id: string;
    debit_account?: string | null;
    debit_subtype?: string | null;
    debit_metadata?: Record<string, any>;
    /**
     * @maxLength 100
     * @default ""
     */
    debit_note?: string;
    /** @maxLength 100 */
    debit_reference?: string | null;
    credit_account?: string | null;
    credit_subtype?: string | null;
    credit_metadata?: Record<string, any>;
    /**
     * @maxLength 100
     * @default ""
     */
    credit_note?: string;
    /** @maxLength 100 */
    credit_reference?: string | null;
    /** @maxLength 100 */
    recipient?: string | null;
    amount: number;
    currency: string;
    /** @default false */
    inclusive?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateUserBankAccountAccountAsset {
    account_currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateUserBankAccountAsset {
    currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateUserWalletAccountAccountAsset {
    account_currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateUserWalletAccountAsset {
    currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CryptoAccount {
    id: number;
    /** @maxLength 250 */
    address: string;
    /** @maxLength 50 */
    name?: string | null;
    code: string | null;
    /**
     * * `bitcoin` - Bitcoin
     * * `ethereum` - Ethereum
     * * `stellar` - Stellar
     * * `other` - Other
     */
    crypto_type?: "bitcoin" | "ethereum" | "stellar" | "other";
    /**
     * * `testnet` - Testnet
     * * `mainnet` - Mainnet
     * @default "testnet"
     */
    network?: "testnet" | "mainnet";
    metadata?: Record<string, any>;
    currencies: ReducedAsset$1[];
    account_currencies: ReducedAccountAsset$1[];
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    /**
     * * `withdraw` - Withdraw
     * * `deposit` - Deposit
     */
    action: "withdraw" | "deposit";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CryptoAccountAsset {
    /** @maxLength 30 */
    code?: string | null;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
    created: number;
    updated: number;
}
type CryptoAccountAssetList = CryptoAccountAsset[];
interface CryptoAccountAssetListResponse {
    status: string;
    data: CryptoAccountAssetList;
}
interface CryptoAccountAssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: CryptoAccountAsset;
}
type CryptoAccountList = CryptoAccount[];
interface CryptoAccountListResponse {
    status: string;
    data: CryptoAccountList;
}
interface CryptoAccountResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: CryptoAccount;
}
interface Deactivate$b {
    user: string;
    company: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Device {
    id: number;
    imei: string;
    /** @maxLength 30 */
    name?: string | null;
    apps: ReducedDeviceApp$1[];
    metadata?: Record<string, any>;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface DeviceApp$1 {
    id: number;
    /** @maxLength 30 */
    name?: string | null;
    /** * `expo` - Expo */
    type: "expo";
    token: string | null;
    created: number;
    updated: number;
}
interface DeviceAppResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: DeviceApp$1;
}
type DeviceList = Device[];
interface DeviceListResponse {
    status: string;
    data: DeviceList;
}
interface DeviceResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: Device;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface DocumentType {
    id: number;
    /** @maxLength 50 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    related_resources: ("user" | "useraddress" | "userbankaccount" | "userwalletaccount" | "usercryptoaccount")[];
    metadata: Record<string, any>;
    created: number;
    updated: number;
}
interface DocumentTypeResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: DocumentType;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Email {
    id: number;
    /** @format email */
    email: string;
    primary?: boolean;
    verified: boolean;
    created: number;
    updated: number;
}
type EmailList = Email[];
interface EmailListResponse {
    status: string;
    data: EmailList;
}
interface EmailResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: Email;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface ExplicitCreateTransaction {
    /** @maxLength 64 */
    id?: string;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    amount: number;
    currency: string;
    account?: string | null;
    subtype?: string | null;
    /** @maxLength 100 */
    reference?: string | null;
    /**
     * @maxLength 100
     * @default ""
     */
    note?: string;
    metadata?: Record<string, any>;
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * @default "Pending"
     */
    status?: "Initiating" | "Quoted" | "Pending";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Export {
    id: string;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
    /**
     * * `account` - Account
     * * `account_currency` - Account_Currency
     * * `transaction` - Transaction
     * * `user` - User
     */
    resource: "account" | "account_currency" | "transaction" | "user";
    query?: Record<string, any>;
    /**
     * * `queued` - Queued
     * * `processing` - Processing
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "queued" | "processing" | "complete" | "failed";
    progress: number;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    count?: number | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    page_size?: number;
    /**
     * * `json` - JSON
     * * `csv` - CSV
     */
    file_format: "json" | "csv";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ExportPage {
    /**
     * @min -2147483648
     * @max 2147483647
     */
    count?: number;
    /** Get the page number. Index plus 1. */
    page: number;
    /** @format uri */
    file?: string | null;
    status: string;
}
interface ExportResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: Export;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ExtendedAccount {
    reference: string;
    /** @maxLength 200 */
    name?: string;
    definition: string | null;
    /** @maxLength 200 */
    label?: string | null;
    primary: boolean;
    recon: boolean;
    currencies: AccountAccountAsset[];
    metadata: Record<string, any>;
    created: number;
    updated: number;
}
interface ExtendedAccountResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: ExtendedAccount;
}
interface ExtendedAuthenticated$1 {
    /**
     * Fetch a token to use for authentication. The token is excluded if this
     * is a cookied based authenication response.
     */
    token: string;
    /**
     * Fetch a refresh token to use for refreshing authentication. The refresh
     * token is excluded if this is a cookied based authenication response.
     */
    refresh_token: string;
    /**
     * Extended user information shown based on the default user info serializer.
     * Contain additional information about user permissions and settings.
     */
    user: ExtendedUserInfo$1;
    challenges: AuthenticatorChallenge$1[];
    expires: number;
    created: number;
}
interface ExtendedAuthenticatedResponse$1 {
    status: string;
    data: ExtendedAuthenticated$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ExtendedExport {
    id: string;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
    /**
     * * `account` - Account
     * * `account_currency` - Account_Currency
     * * `transaction` - Transaction
     * * `user` - User
     */
    resource: "account" | "account_currency" | "transaction" | "user";
    query: Record<string, any>;
    /**
     * * `queued` - Queued
     * * `processing` - Processing
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "queued" | "processing" | "complete" | "failed";
    progress: number;
    count: number | null;
    page_size: number;
    pages: ExportPage[];
    /**
     * * `json` - JSON
     * * `csv` - CSV
     */
    file_format: "json" | "csv";
    created: number;
    updated: number;
}
interface ExtendedExportResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: ExtendedExport;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ExtendedGroupTier {
    id: number;
    level: number;
    name: string | null;
    description: string | null;
    active: boolean;
    settings: GroupTierSettings$1;
    created: number;
    updated: number;
}
interface ExtendedGroupTierResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: ExtendedGroupTier;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface ExtendedTransaction {
    id: string;
    collection: string;
    parent: string | null;
    partner: PartnerTransaction | null;
    index: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    note: string;
    metadata: Record<string, any>;
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    reference: string | null;
    amount: number;
    fee: number;
    total_amount: number;
    balance: number;
    label: string;
    account: string;
    currency: ReducedAsset$1;
    account_currency: TransactionAccountAsset$1;
    fees: TransactionFee$1[];
    inclusive: boolean;
    executed: number | null;
    expires: number;
    created: number;
    updated: number;
}
interface ExtendedTransactionResponse {
    status: string;
    /**
     * A mixin that handles the application of permissions to properties on a
     * serializer using the built-in permissions system.
     *
     * NOTE : This only works if the following conditions are met:
     *     - The request context must contain a user.
     *     - The class this mixin is attached must be a serializer.
     *     - The class this mixin is attached to must have a Meta.model defined.
     *     - The Meta.model class must have a PERMISSION_TYPE defined.
     */
    data: ExtendedTransaction;
}
/**
 * Extended user information shown based on the default user info serializer.
 * Contain additional information about user permissions and settings.
 */
interface ExtendedUserInfo$1 {
    id: string;
    /**
     * @maxLength 150
     * @pattern ^[\w.@+-]+$
     */
    username: string | null;
    /** @format email */
    email: string | null;
    mobile: string | null;
    /** @maxLength 50 */
    first_name?: string | null;
    /** @maxLength 50 */
    middle_name?: string | null;
    /** @maxLength 50 */
    last_name?: string | null;
    /** @format uri */
    profile?: string | null;
    groups: ReducedGroup$1[];
    /** @default false */
    temporary: boolean | null;
    /** @maxLength 24 */
    id_number?: string | null;
    /** @format date */
    birth_date?: string | null;
    currency: ReducedAsset$1;
    account: string;
    /** @default 0 */
    balance: number;
    /** @default 0 */
    available_balance: number;
    company: string;
    owner: boolean;
    /** @maxLength 24 */
    language?: string;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    nationality?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    residency?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `male` - Male
     * * `female` - Female
     * * `other` - Other
     * * `not_specified` - Not Specified
     */
    gender?: "male" | "female" | "other" | "not_specified" | null;
    /**
     * * `mr` - Mr
     * * `mrs` - Mrs
     * * `ms` - Ms
     * * `mx` - Mx
     */
    title?: "mr" | "mrs" | "ms" | "mx" | null;
    /**
     * * `single` - Single
     * * `married` - Married
     * * `divorced` - Divorced
     * * `widowed` - Widowed
     */
    marital_status?: "single" | "married" | "divorced" | "widowed" | null;
    /** @maxLength 100 */
    fathers_name?: string | null;
    /** @maxLength 100 */
    mothers_name?: string | null;
    /** @maxLength 100 */
    grandfathers_name?: string | null;
    /** @maxLength 100 */
    grandmothers_name?: string | null;
    /** @maxLength 100 */
    central_bank_number?: string | null;
    metadata: Record<string, any>;
    /** @maxLength 100 */
    timezone?: string | null;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    business_name?: string | null;
    /** @deprecated */
    verified: boolean;
    verification: UserVerification$1;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    created: number;
    updated: number;
    settings: UserSettings$2;
}
interface ExtendedUserInfoResponse {
    status: string;
    /**
     * Extended user information shown based on the default user info serializer.
     * Contain additional information about user permissions and settings.
     */
    data: ExtendedUserInfo$1;
}
interface GroupDisallowedTransactionSubtype$1 {
    subtype: ReducedTransactionSubtype$1;
    currency: ReducedAsset$1;
    account_definition: ReducedAccountDefinition$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface GroupFee {
    id: number;
    name: string | null;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    account_definition: string | null;
    currency: string;
    /** Convert the Fee value from Decimal to int based on asset divisibility */
    value: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    description: string | null;
}
interface GroupFeeResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: GroupFee;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface GroupPermission$1 {
    id: number;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
    /**
     * * `accesscontrolrule` - Access Control Rule
     * * `account` - Account
     * * `accountdefinition` - Account Definition
     * * `address` - Address
     * * `currency` - Currency
     * * `bankaccount` - Bank Account
     * * `company` - Company
     * * `cryptoaccount` - Crypto Account
     * * `device` - Device
     * * `document` - Document
     * * `email` - Email
     * * `group` - Group
     * * `jwt` - Jwt
     * * `legalterm` - Legal Term
     * * `mfa` - Mfa
     * * `mfarule` - Mfa Rule
     * * `mobile` - Mobile
     * * `notification` - Notification
     * * `oauthclient` - Oauth Client
     * * `permission` - Permission
     * * `request` - Request
     * * `service` - Service
     * * `token` - Token
     * * `transaction` - Transaction
     * * `transactionsubtypes` - Transaction Subtypes
     * * `user` - User
     * * `webhook` - Webhook
     */
    type: "accesscontrolrule" | "account" | "accountdefinition" | "address" | "currency" | "bankaccount" | "company" | "cryptoaccount" | "device" | "document" | "email" | "group" | "jwt" | "legalterm" | "mfa" | "mfarule" | "mobile" | "notification" | "oauthclient" | "permission" | "request" | "service" | "token" | "transaction" | "transactionsubtypes" | "user" | "webhook";
    /**
     * * `view` - View
     * * `add` - Add
     * * `change` - Change
     * * `delete` - Delete
     */
    level: "view" | "add" | "change" | "delete";
    properties: Record<string, any>;
}
interface GroupPermissionResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: GroupPermission$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface GroupSettings {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: GroupDisallowedTransactionSubtype$1[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface GroupTier {
    id: number;
    level: number;
    name: string | null;
    description: string | null;
    active: boolean;
    /** @deprecated */
    limits: GroupTierLimit$1[];
    /** @deprecated */
    fees: GroupTierFee$1[];
    settings: GroupTierSettings$1;
    created: number;
    updated: number;
}
interface GroupTierDisallowedTransactionSubtype$1 {
    subtype: ReducedTransactionSubtype$1;
    currency: ReducedAsset$1;
    account_definition: ReducedAccountDefinition$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface GroupTierFee$1 {
    id: number;
    name: string | null;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    account_definition: string | null;
    currency: string;
    /** Convert the Fee value from Decimal to int based on asset divisibility */
    value: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    description: string | null;
}
interface GroupTierFeeResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: GroupTierFee$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface GroupTierLimit$1 {
    id: number;
    /** Convert the Limit value from Decimal to int based on asset divisibility */
    value: number;
    /**
     * * `max` - Maximum
     * * `day_max` - Maximum per day
     * * `month_max` - Maximum per month
     * * `min` - Minimum
     * * `overdraft` - Overdraft
     */
    type: "max" | "day_max" | "month_max" | "min" | "overdraft";
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string;
    account_definition: string | null;
    currency: string;
}
interface GroupTierLimitResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: GroupTierLimit$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface GroupTierRequirementSet$1 {
    id: number;
    parent?: number | null;
    /** @maxLength 50 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * * `all` - All
     * * `any` - Any
     */
    condition: "all" | "any";
    /**
     * @min 1
     * @max 24
     */
    min_condition_matches?: number | null;
    items: GroupTierRequirementSetItem$1[];
    /**
     * @min 0
     * @max 2147483647
     */
    weight?: number | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface GroupTierRequirementSetItem$1 {
    id: number;
    /** * `resource` - Resource */
    type: "resource";
    rule: GroupTierRequirementSetItemRule$1;
    /** @maxLength 50 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * @min 0
     * @max 2147483647
     */
    weight?: number | null;
    created: number;
    updated: number;
}
interface GroupTierRequirementSetItemResponse$1 {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: GroupTierRequirementSetItem$1;
}
type GroupTierRequirementSetItemRule$1 = ResourceRequirementRule$1;
interface GroupTierRequirementSetResponse$1 {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: GroupTierRequirementSet$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface GroupTierSettings$1 {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: GroupTierDisallowedTransactionSubtype$1[];
}
interface JWT {
    token: string;
}
interface JWTResponse {
    status: string;
    data: JWT;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface LegalTerm {
    id: number;
    /**
     * * `system` - System
     * * `company` - Company
     */
    type: "system" | "company";
    name: string;
    description: string | null;
    versions: ReducedLegalTermVersion[];
    created: number;
    updated: number;
}
interface LegalTermResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: LegalTerm;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface LegalTermVersion {
    id: number;
    version: number;
    accepted: boolean;
    accepted_date: number;
    note: string | null;
    content: string | null;
    /** @format uri */
    url: string | null;
    created: number;
    updated: number;
}
interface LegalTermVersionResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: LegalTermVersion;
}
interface Login {
    user: string;
    company: string;
    /** @maxLength 128 */
    password: string;
    /** @min 0 */
    session_duration?: number | null;
    /**
     * * `cookie` - Cookie
     * * `token` - Token
     * @default "token"
     */
    auth_method?: "cookie" | "token";
}
interface Logout {
    /**
     * * `all` - All
     * * `temporary` - Temporary
     * * `none` - None
     * @default "temporary"
     */
    clear_session_option?: "all" | "temporary" | "none";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface MFAAuthenticator {
    id: string;
    /**
     * * `totp` - Totp
     * * `sms` - Sms
     * * `static` - Static
     */
    type: "totp" | "sms" | "static";
    details: MFADeviceDetail;
    verified: boolean;
    created: number;
    updated: number;
}
interface MFAAuthenticatorResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: MFAAuthenticator;
}
interface MFADeliver {
    challenge?: string;
    authenticator?: string;
}
type MFADeviceDetail = MFATOTPDeviceDetail | MFATwilioDeviceDetail | MFAStaticDeviceDetail;
interface MFAStaticDeviceDetail {
    /** @default "Default Static" */
    name?: string;
    tokens: MFAStaticDeviceToken[];
}
interface MFAStaticDeviceToken {
    token: string;
    available: boolean;
}
interface MFATOTPDeviceDetail {
    /** @default "Default TOTP" */
    name?: string;
    /**
     * * `SHA1` - SHA1
     * * `SHA256` - SHA256
     * * `SHA512` - SHA512
     */
    algorithm: "SHA1" | "SHA256" | "SHA512";
    otpauth_url: string;
    issuer: string;
    account: string;
    key: string;
}
interface MFATwilioDeviceDetail {
    /** @default "Default SMS" */
    name?: string;
    mobile: string;
}
interface MFAVerify {
    token: string;
    challenge?: string;
    authenticator?: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface MaskedMFAAuthenticator {
    id: string;
    /**
     * * `totp` - Totp
     * * `sms` - Sms
     * * `static` - Static
     */
    type: "totp" | "sms" | "static";
    details: MaskedMFADeviceDetail;
    verified: boolean;
    created: number;
    updated: number;
}
interface MaskedMFAAuthenticatorResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: MaskedMFAAuthenticator;
}
type MaskedMFADeviceDetail = MaskedMFATOTPDeviceDetail | MaskedMFATwilioDeviceDetail | MaskedMFAStaticDeviceDetail;
interface MaskedMFAStaticDeviceDetail {
    /** @default "Default Static" */
    name?: string;
    tokens: MaskedMFAStaticDeviceToken[];
}
interface MaskedMFAStaticDeviceToken {
    token: string;
    available: boolean;
}
interface MaskedMFATOTPDeviceDetail {
    /** @default "Default TOTP" */
    name?: string;
    /**
     * * `SHA1` - SHA1
     * * `SHA256` - SHA256
     * * `SHA512` - SHA512
     */
    algorithm: "SHA1" | "SHA256" | "SHA512";
    otpauth_url: string;
    issuer: string;
    account: string;
    key: string;
}
interface MaskedMFATwilioDeviceDetail {
    /** @default "Default SMS" */
    name?: string;
    mobile: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Metric {
    id: string;
    name: string | null;
    slug: string | null;
    metadata?: Record<string, any>;
    /**
     * * `account_count` - Account Count
     * * `transaction_count` - Transaction Count
     * * `transaction_complete_count` - Transaction Complete Count
     * * `transaction_failed_count` - Transaction Failed Count
     * * `transaction_pending_count` - Transaction Pending Count
     * * `transaction_complete_sum` - Transaction Complete Sum
     * * `transaction_failed_sum` - Transaction Failed Sum
     * * `transaction_pending_sum` - Transaction Pending Sum
     * * `transaction_balance_sum` - Transaction Balance Sum
     * * `transaction_available_balance_sum` - Transaction Available Balance Sum
     * * `user_count` - User Count
     * * `user_active_count` - User Active Count
     * * `user_transacted_in_30days_count` - User Transacted In 30Days Count
     */
    type: "account_count" | "transaction_count" | "transaction_complete_count" | "transaction_failed_count" | "transaction_pending_count" | "transaction_complete_sum" | "transaction_failed_sum" | "transaction_pending_sum" | "transaction_balance_sum" | "transaction_available_balance_sum" | "user_count" | "user_active_count" | "user_transacted_in_30days_count";
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    currency: ReducedAsset$1;
    timezone: string;
    query: Record<string, any>;
    /**
     * * `accumulate` - Accumulate
     * * `set` - Set
     */
    method: "accumulate" | "set";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface MetricPoint {
    id: number;
    value: number;
    date: number;
}
interface MetricResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: Metric;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Mobile {
    id: number;
    number: string;
    primary?: boolean;
    verified: boolean;
    created: number;
    updated: number;
}
type MobileList = Mobile[];
interface MobileListResponse {
    status: string;
    data: MobileList;
}
interface MobileResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: Mobile;
}
interface MultiTransaction {
    transactions: Transaction$2[];
}
interface MultiTransactionResponse {
    status: string;
    data: MultiTransaction;
}
interface OauthAuthorize {
    session: string;
    /** @format uri */
    url: string;
}
interface OauthAuthorizeResponse {
    status: string;
    data: OauthAuthorize;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface OauthClient {
    id: string;
    /**
     * * `apple` - Apple
     * * `google` - Google
     */
    provider: "apple" | "google";
    application: string;
    client_id: string;
    created: number;
    updated: number;
}
interface OauthClientResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: OauthClient;
}
interface OauthLogin {
    session: string;
    /** @min 0 */
    session_duration?: number | null;
    /**
     * * `cookie` - Cookie
     * * `token` - Token
     * @default "token"
     */
    auth_method?: "cookie" | "token";
}
interface OauthRegister {
    session: string;
    terms_and_conditions?: boolean;
    privacy_policy?: boolean;
    /** @min 0 */
    session_duration?: number | null;
    /**
     * @maxItems 1
     * @minItems 0
     */
    groups?: (string | null)[];
    /** @minItems 0 */
    legal_term_versions?: number[];
    /**
     * * `cookie` - Cookie
     * * `token` - Token
     * @default "token"
     */
    auth_method?: "cookie" | "token";
}
interface OauthSession {
    client: string;
    session: string;
}
interface OauthSessionResponse {
    status: string;
    data: OauthSession;
}
interface OauthVerify {
    /** @format uri */
    uri?: string;
    code?: string;
    session?: string;
    user_exists: boolean;
}
interface OauthVerifyResponse {
    status: string;
    data: OauthVerify;
}
interface PaginatedAccountAccountAssetList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AccountAccountAsset[];
}
interface PaginatedAccountAccountAssetListResponse {
    status: string;
    data: PaginatedAccountAccountAssetList;
}
interface PaginatedAccountAssetFeeList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AccountAssetFee[];
}
interface PaginatedAccountAssetFeeListResponse {
    status: string;
    data: PaginatedAccountAssetFeeList;
}
interface PaginatedAccountAssetLimitList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AccountAssetLimit$1[];
}
interface PaginatedAccountAssetLimitListResponse {
    status: string;
    data: PaginatedAccountAssetLimitList;
}
interface PaginatedAccountAssetList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AccountAsset$1[];
}
interface PaginatedAccountAssetListResponse {
    status: string;
    data: PaginatedAccountAssetList;
}
interface PaginatedAccountDefinitionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AccountDefinition[];
}
interface PaginatedAccountDefinitionListResponse {
    status: string;
    data: PaginatedAccountDefinitionList;
}
interface PaginatedAccountList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Account[];
}
interface PaginatedAccountListResponse {
    status: string;
    data: PaginatedAccountList;
}
interface PaginatedAssetList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Asset$2[];
}
interface PaginatedAssetListResponse {
    status: string;
    data: PaginatedAssetList;
}
interface PaginatedCompanyBankAccountList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: CompanyBankAccount[];
}
interface PaginatedCompanyBankAccountListResponse {
    status: string;
    data: PaginatedCompanyBankAccountList;
}
interface PaginatedCompanyWalletAccountList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: CompanyWalletAccount[];
}
interface PaginatedCompanyWalletAccountListResponse {
    status: string;
    data: PaginatedCompanyWalletAccountList;
}
interface PaginatedDeviceAppList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: DeviceApp$1[];
}
interface PaginatedDeviceAppListResponse {
    status: string;
    data: PaginatedDeviceAppList;
}
interface PaginatedDocumentTypeList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: DocumentType[];
}
interface PaginatedDocumentTypeListResponse {
    status: string;
    data: PaginatedDocumentTypeList;
}
interface PaginatedExportList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Export[];
}
interface PaginatedExportListResponse {
    status: string;
    data: PaginatedExportList;
}
interface PaginatedGroupFeeList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: GroupFee[];
}
interface PaginatedGroupFeeListResponse {
    status: string;
    data: PaginatedGroupFeeList;
}
interface PaginatedGroupPermissionList$1 {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: GroupPermission$1[];
}
interface PaginatedGroupPermissionListResponse$1 {
    status: string;
    data: PaginatedGroupPermissionList$1;
}
interface PaginatedGroupTierFeeList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: GroupTierFee$1[];
}
interface PaginatedGroupTierFeeListResponse {
    status: string;
    data: PaginatedGroupTierFeeList;
}
interface PaginatedGroupTierLimitList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: GroupTierLimit$1[];
}
interface PaginatedGroupTierLimitListResponse {
    status: string;
    data: PaginatedGroupTierLimitList;
}
interface PaginatedGroupTierList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: GroupTier[];
}
interface PaginatedGroupTierListResponse {
    status: string;
    data: PaginatedGroupTierList;
}
interface PaginatedGroupTierRequirementSetItemList$1 {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: GroupTierRequirementSetItem$1[];
}
interface PaginatedGroupTierRequirementSetItemListResponse$1 {
    status: string;
    data: PaginatedGroupTierRequirementSetItemList$1;
}
interface PaginatedGroupTierRequirementSetList$1 {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: GroupTierRequirementSet$1[];
}
interface PaginatedGroupTierRequirementSetListResponse$1 {
    status: string;
    data: PaginatedGroupTierRequirementSetList$1;
}
interface PaginatedLegalTermList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: LegalTerm[];
}
interface PaginatedLegalTermListResponse {
    status: string;
    data: PaginatedLegalTermList;
}
interface PaginatedLegalTermVersionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: LegalTermVersion[];
}
interface PaginatedLegalTermVersionListResponse {
    status: string;
    data: PaginatedLegalTermVersionList;
}
interface PaginatedMaskedMFAAuthenticatorList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: MaskedMFAAuthenticator[];
}
interface PaginatedMaskedMFAAuthenticatorListResponse {
    status: string;
    data: PaginatedMaskedMFAAuthenticatorList;
}
interface PaginatedMetricList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Metric[];
}
interface PaginatedMetricListResponse {
    status: string;
    data: PaginatedMetricList;
}
interface PaginatedMetricPointList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: MetricPoint[];
}
interface PaginatedMetricPointListResponse {
    status: string;
    data: PaginatedMetricPointList;
}
interface PaginatedOauthClientList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: OauthClient[];
}
interface PaginatedOauthClientListResponse {
    status: string;
    data: PaginatedOauthClientList;
}
interface PaginatedPublicCompanyLegalTermList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: PublicCompanyLegalTerm[];
}
interface PaginatedPublicCompanyLegalTermListResponse {
    status: string;
    data: PaginatedPublicCompanyLegalTermList;
}
interface PaginatedPublicCompanyLegalTermVersionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: PublicCompanyLegalTermVersion[];
}
interface PaginatedPublicCompanyLegalTermVersionListResponse {
    status: string;
    data: PaginatedPublicCompanyLegalTermVersionList;
}
interface PaginatedPublicCompanyList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: PublicCompany[];
}
interface PaginatedPublicCompanyListResponse {
    status: string;
    data: PaginatedPublicCompanyList;
}
interface PaginatedPublicGroupList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: PublicGroup[];
}
interface PaginatedPublicGroupListResponse {
    status: string;
    data: PaginatedPublicGroupList;
}
interface PaginatedPublicLegalTermList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: PublicLegalTerm[];
}
interface PaginatedPublicLegalTermListResponse {
    status: string;
    data: PaginatedPublicLegalTermList;
}
interface PaginatedPublicLegalTermVersionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: PublicLegalTermVersion[];
}
interface PaginatedPublicLegalTermVersionListResponse {
    status: string;
    data: PaginatedPublicLegalTermVersionList;
}
interface PaginatedStatementList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Statement[];
}
interface PaginatedStatementListResponse {
    status: string;
    data: PaginatedStatementList;
}
interface PaginatedTransactionCollectionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: TransactionCollection[];
}
interface PaginatedTransactionCollectionListResponse {
    status: string;
    data: PaginatedTransactionCollectionList;
}
interface PaginatedTransactionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Transaction$2[];
}
interface PaginatedTransactionListResponse {
    status: string;
    data: PaginatedTransactionList;
}
interface PaginatedTransactionMessageList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: TransactionMessage[];
}
interface PaginatedTransactionMessageListResponse {
    status: string;
    data: PaginatedTransactionMessageList;
}
interface PaginatedUserDocumentList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: UserDocument[];
}
interface PaginatedUserDocumentListResponse {
    status: string;
    data: PaginatedUserDocumentList;
}
interface PaginatedUserGroupList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: UserGroup[];
}
interface PaginatedUserGroupListResponse {
    status: string;
    data: PaginatedUserGroupList;
}
interface PaginatedUserMessageList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: UserMessage[];
}
interface PaginatedUserMessageListResponse {
    status: string;
    data: PaginatedUserMessageList;
}
interface PaginatedUserPermissionList$1 {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: UserPermission$1[];
}
interface PaginatedUserPermissionListResponse$1 {
    status: string;
    data: PaginatedUserPermissionList$1;
}
interface PaginatedUserWalletAccountAssetList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: UserWalletAccountAsset[];
}
interface PaginatedUserWalletAccountAssetListResponse {
    status: string;
    data: PaginatedUserWalletAccountAssetList;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PartnerTransaction {
    id: string;
    user: PartnerUserInfo;
}
/**
 * A condensed user serializer showing only the necessary user information to
 * identify a partner user (without exposing any extra).
 *
 * This only works when a transaction instance is sent to it.
 */
interface PartnerUserInfo {
    id: string;
    identifier: string;
    username: string;
    first_name: string;
    middle_name: string;
    last_name: string;
    /** @format uri */
    profile: string | null;
    temporary: boolean;
}
interface PasswordChange {
    /** @maxLength 128 */
    old_password: string;
    /** @maxLength 128 */
    new_password?: string;
    /**
     * @deprecated
     * @maxLength 128
     */
    new_password1?: string;
    /**
     * @deprecated
     * @maxLength 128
     */
    new_password2?: string;
    /**
     * * `all` - All
     * * `temporary` - Temporary
     * * `none` - None
     * @default "temporary"
     */
    clear_session_option?: "all" | "temporary" | "none";
}
/** Serializer for requesting a password reset e-mail. */
interface PasswordReset {
    /** @default false */
    force?: boolean;
    user: string;
    company: string;
}
/** Serializer for confirming a password reset attempt. */
interface PasswordResetConfirm$1 {
    /** @maxLength 128 */
    new_password?: string;
    /**
     * @deprecated
     * @maxLength 128
     */
    new_password1?: string;
    /**
     * @deprecated
     * @maxLength 128
     */
    new_password2?: string;
    uid: string;
    token: string;
    /**
     * * `all` - All
     * * `temporary` - Temporary
     * * `none` - None
     * @default "temporary"
     */
    clear_session_option?: "all" | "temporary" | "none";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAccountAccountAsset {
    id?: string;
    balance?: number;
    available_balance?: number;
    currency?: ReducedAsset$1;
    limits?: AccountAssetLimit$1[];
    fees?: AdminAccountAssetFee$1[];
    metadata?: Record<string, any>;
    active?: boolean;
    settings?: AccountAssetSettings$1;
    subtypes?: TransactionSubtype$1[];
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedCryptoAccount {
    id?: number;
    /** @maxLength 250 */
    address?: string;
    /** @maxLength 50 */
    name?: string | null;
    code?: string | null;
    /**
     * * `bitcoin` - Bitcoin
     * * `ethereum` - Ethereum
     * * `stellar` - Stellar
     * * `other` - Other
     */
    crypto_type?: "bitcoin" | "ethereum" | "stellar" | "other";
    /**
     * * `testnet` - Testnet
     * * `mainnet` - Mainnet
     * @default "testnet"
     */
    network?: "testnet" | "mainnet";
    metadata?: Record<string, any>;
    currencies?: ReducedAsset$1[];
    account_currencies?: ReducedAccountAsset$1[];
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    /**
     * * `withdraw` - Withdraw
     * * `deposit` - Deposit
     */
    action?: "withdraw" | "deposit";
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedDevice {
    id?: number;
    imei?: string;
    /** @maxLength 30 */
    name?: string | null;
    apps?: ReducedDeviceApp$1[];
    metadata?: Record<string, any>;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedDeviceApp {
    id?: number;
    /** @maxLength 30 */
    name?: string | null;
    /** * `expo` - Expo */
    type?: "expo";
    token?: string | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedEmail {
    id?: number;
    /** @format email */
    email?: string;
    primary?: boolean;
    verified?: boolean;
    created?: number;
    updated?: number;
}
/**
 * Extended user information shown based on the default user info serializer.
 * Contain additional information about user permissions and settings.
 */
interface PatchedExtendedUserInfo {
    id?: string;
    /**
     * @maxLength 150
     * @pattern ^[\w.@+-]+$
     */
    username?: string | null;
    /** @format email */
    email?: string | null;
    mobile?: string | null;
    /** @maxLength 50 */
    first_name?: string | null;
    /** @maxLength 50 */
    middle_name?: string | null;
    /** @maxLength 50 */
    last_name?: string | null;
    /** @format uri */
    profile?: string | null;
    groups?: ReducedGroup$1[];
    /** @default false */
    temporary?: boolean | null;
    /** @maxLength 24 */
    id_number?: string | null;
    /** @format date */
    birth_date?: string | null;
    currency?: ReducedAsset$1;
    account?: string;
    /** @default 0 */
    balance?: number;
    /** @default 0 */
    available_balance?: number;
    company?: string;
    owner?: boolean;
    /** @maxLength 24 */
    language?: string;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    nationality?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    residency?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `male` - Male
     * * `female` - Female
     * * `other` - Other
     * * `not_specified` - Not Specified
     */
    gender?: "male" | "female" | "other" | "not_specified" | null;
    /**
     * * `mr` - Mr
     * * `mrs` - Mrs
     * * `ms` - Ms
     * * `mx` - Mx
     */
    title?: "mr" | "mrs" | "ms" | "mx" | null;
    /**
     * * `single` - Single
     * * `married` - Married
     * * `divorced` - Divorced
     * * `widowed` - Widowed
     */
    marital_status?: "single" | "married" | "divorced" | "widowed" | null;
    /** @maxLength 100 */
    fathers_name?: string | null;
    /** @maxLength 100 */
    mothers_name?: string | null;
    /** @maxLength 100 */
    grandfathers_name?: string | null;
    /** @maxLength 100 */
    grandmothers_name?: string | null;
    /** @maxLength 100 */
    central_bank_number?: string | null;
    metadata?: Record<string, any>;
    /** @maxLength 100 */
    timezone?: string | null;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    business_name?: string | null;
    /** @deprecated */
    verified?: boolean;
    verification?: UserVerification$1;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    created?: number;
    updated?: number;
    settings?: UserSettings$2;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedMobile {
    id?: number;
    number?: string;
    primary?: boolean;
    verified?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface PatchedUpdateExtendedTransaction {
    id?: string;
    collection?: string;
    parent?: string | null;
    partner?: PartnerTransaction | null;
    index?: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type?: "credit" | "debit";
    subtype?: string | null;
    note?: string;
    metadata?: Record<string, any>;
    /**
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     */
    status?: "Quoted" | "Pending";
    reference?: string | null;
    amount?: number;
    fee?: number;
    total_amount?: number;
    balance?: number;
    label?: string;
    account?: string;
    currency?: ReducedAsset$1;
    account_currency?: TransactionAccountAsset$1;
    fees?: TransactionFee$1[];
    inclusive?: boolean;
    executed?: number | null;
    expires?: number;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedUpdateLegalTermVersion {
    id?: number;
    version?: number;
    accepted?: boolean;
    note?: string | null;
    content?: string | null;
    /** @format uri */
    url?: string | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedUserAddress {
    id?: number;
    /**
     * * `permanent` - Permanent
     * * `contact` - Contact
     * * `shipping` - Shipping
     * * `billing` - Billing
     * * `business` - Business
     */
    type?: "permanent" | "contact" | "shipping" | "billing" | "business";
    /** @maxLength 200 */
    line_1?: string | null;
    /** @maxLength 200 */
    line_2?: string | null;
    /** @maxLength 100 */
    city?: string | null;
    /** @maxLength 100 */
    state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    postal_code?: string | null;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedUserBankAccount {
    id?: number;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 200 */
    number?: string | null;
    /** @maxLength 200 */
    type?: string | null;
    /**
     * * `individual` - Individual
     * * `business` - Business
     */
    beneficiary_type?: "individual" | "business" | null;
    /** @maxLength 20 */
    clabe?: string | null;
    owner?: BankOwner$1 | null;
    /** @maxLength 200 */
    bank_name?: string | null;
    /** @maxLength 50 */
    bank_code?: string | null;
    /** @maxLength 3 */
    bank_currency?: string | null;
    /** @maxLength 50 */
    branch_code?: string | null;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    branch_address?: UserBankBranchAddress;
    /** @maxLength 255 */
    branch_address_text?: string | null;
    /** @maxLength 50 */
    routing_number?: string | null;
    /** @maxLength 16 */
    swift?: string | null;
    /** @maxLength 50 */
    iban?: string | null;
    /** @maxLength 16 */
    bic?: string | null;
    code?: string | null;
    metadata?: Record<string, any>;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    currencies?: ReducedAsset$1[];
    account_currencies?: ReducedAccountAsset$1[];
    /**
     * * `withdraw` - Withdraw
     * * `deposit` - Deposit
     */
    action?: "withdraw" | "deposit";
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedUserWalletAccount {
    id?: number;
    /** @maxLength 200 */
    username?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    email?: string | null;
    /** @maxLength 24 */
    mobile?: string | null;
    /** @maxLength 50 */
    name?: string | null;
    code?: string | null;
    /**
     * * `paypal` - Paypal
     * * `venmo` - Venmo
     * * `other` - Other
     */
    type?: "paypal" | "venmo" | "other";
    metadata?: Record<string, any>;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    currencies?: ReducedAsset$1[];
    account_currencies?: ReducedAccountAsset$1[];
    /**
     * * `withdraw` - Withdraw
     * * `deposit` - Deposit
     */
    action?: "withdraw" | "deposit";
    created?: number;
    updated?: number;
}
/**
 * A reduced user serializer showing only the necessary information for post
 * login serialization.
 */
interface ProtectedUserInfo$1 {
    id: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PublicCompany {
    id: string;
    /** @maxLength 100 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    website?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    support_website?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    documentation_website?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    support_email?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @format uri */
    logo?: string | null;
    /** @format uri */
    icon?: string | null;
    metadata?: Record<string, any>;
    settings: PublicCompanySettings;
    services: ReducedService$1[];
    /**
     * * `test` - Test
     * * `production` - Production
     */
    mode: "test" | "production";
    /**
     * * `pending` - Pending
     * * `active` - Active
     * * `restricted` - Restricted
     * * `suspended` - Suspended
     */
    status: "pending" | "active" | "restricted" | "suspended";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PublicCompanyLegalTerm {
    id: number;
    /**
     * * `system` - System
     * * `company` - Company
     */
    type: "system" | "company";
    /** @maxLength 100 */
    name: string;
    /** @maxLength 255 */
    description?: string | null;
    groups: string[];
    versions: PublicReducedCompanyLegalTermVersion[];
    created: number;
    updated: number;
}
interface PublicCompanyLegalTermResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: PublicCompanyLegalTerm;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PublicCompanyLegalTermVersion {
    id: number;
    version: number;
    note: string | null;
    content: string | null;
    /** @format uri */
    url: string | null;
    created: number;
    updated: number;
}
interface PublicCompanyLegalTermVersionResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: PublicCompanyLegalTermVersion;
}
interface PublicCompanyResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: PublicCompany;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PublicCompanySettings {
    allow_session_durations?: boolean;
    /** @format uri */
    terms_and_conditions_url: string;
    /** @format uri */
    privacy_policy_url: string;
    /** @maxItems 249 */
    nationalities: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
    /** @maxItems 249 */
    residencies: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PublicGroup {
    /** @maxLength 80 */
    name: string;
    /** @maxLength 80 */
    label?: string | null;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
    /** @maxLength 255 */
    description?: string | null;
    /** @format uri */
    icon: string | null;
    default?: boolean;
}
interface PublicGroupResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: PublicGroup;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PublicLegalTerm {
    id: number;
    /**
     * * `system` - System
     * * `company` - Company
     */
    type: "system" | "company";
    /** @maxLength 100 */
    name: string;
    /** @maxLength 255 */
    description?: string | null;
    groups: string[];
    versions: PublicReducedLegalTermVersion[];
    created: number;
    updated: number;
}
interface PublicLegalTermResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: PublicLegalTerm;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PublicLegalTermVersion {
    id: number;
    version: number;
    note: string | null;
    content: string | null;
    /** @format uri */
    url: string | null;
    created: number;
    updated: number;
}
interface PublicLegalTermVersionResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: PublicLegalTermVersion;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PublicReducedCompanyLegalTermVersion {
    id: number;
    version: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PublicReducedLegalTermVersion {
    id: number;
    version: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedAccount$1 {
    reference: string;
    /** @maxLength 200 */
    name?: string;
    /** @maxLength 200 */
    label?: string | null;
    definition: string | null;
    primary: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedAccountAccountAsset {
    id: string;
    balance: number;
    available_balance: number;
    currency: ReducedAsset$1;
    active: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedAccountAsset$1 {
    id: string;
    balance: number;
    available_balance: number;
    account: ReducedAccount$1;
    currency: ReducedAsset$1;
    active: boolean;
}
type ReducedAccountAssetList = ReducedAccountAsset$1[];
interface ReducedAccountAssetListResponse {
    status: string;
    data: ReducedAccountAssetList;
}
interface ReducedAccountAssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: ReducedAccountAsset$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedAccountDefinition$1 {
    /** @maxLength 200 */
    name: string;
    /** @maxLength 200 */
    label?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedAsset$1 {
    /** @maxLength 30 */
    code?: string | null;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
    /** @format uri */
    icon: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedDeviceApp$1 {
    id: number;
    /** @maxLength 30 */
    name?: string | null;
    /** * `expo` - Expo */
    type: "expo";
    token: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedDocumentType$1 {
    id: number;
    name: string | null;
    description: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedGroup$1 {
    /** @maxLength 80 */
    name: string;
    /** @maxLength 80 */
    label?: string | null;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedGroupTier$1 {
    id: number;
    level: number;
    name: string | null;
    description: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedLegalTermVersion {
    id: number;
    version: number;
    accepted: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedService$1 {
    id: number;
    slug: string | null;
    name: string;
    url: string;
    /**
     * * `system` - System
     * * `public` - Public
     * * `private` - Private
     */
    type: "system" | "public" | "private";
}
interface ReducedTransactionSubtype$1 {
    id: number;
    /** @maxLength 50 */
    name: string;
    /** @maxLength 50 */
    label?: string | null;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
}
/**
 * A condensed user serializer showing only the necessary user information
 * in order to identifiy the user.
 */
interface ReducedUserInfo$1 {
    id: string;
    username: string | null;
    /** @format email */
    email: string | null;
    mobile: string | null;
    first_name: string | null;
    middle_name: string | null;
    last_name: string | null;
    /** @format uri */
    profile?: string | null;
    groups: ReducedGroup$1[];
    temporary: boolean | null;
}
interface Refresh {
    /** @min 0 */
    session_duration?: number | null;
}
interface Refreshed {
    /** Fetch a refresh token to use for refreshing authentication. */
    refresh_token: string;
    expires: number;
    created: number;
}
interface RefreshedResponse {
    status: string;
    data: Refreshed;
}
interface Register {
    /** @maxLength 50 */
    first_name?: string;
    /** @maxLength 50 */
    middle_name?: string;
    /** @maxLength 50 */
    last_name?: string;
    /** @maxLength 150 */
    username?: string;
    /** @format email */
    email?: string;
    mobile?: string;
    /** @maxLength 100 */
    company: string;
    /** @maxLength 24 */
    id_number?: string | null;
    /** @format date */
    birth_date?: string | null;
    /** @maxLength 24 */
    language?: string;
    /**
     * * `male` - Male
     * * `female` - Female
     * * `other` - Other
     * * `not_specified` - Not Specified
     */
    gender?: "male" | "female" | "other" | "not_specified" | null;
    /**
     * * `mr` - Mr
     * * `mrs` - Mrs
     * * `ms` - Ms
     * * `mx` - Mx
     */
    title?: "mr" | "mrs" | "ms" | "mx" | null;
    /**
     * * `single` - Single
     * * `married` - Married
     * * `divorced` - Divorced
     * * `widowed` - Widowed
     */
    marital_status?: "single" | "married" | "divorced" | "widowed" | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    nationality?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    residency?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 100 */
    timezone?: string | null;
    /** @maxLength 128 */
    password?: string;
    /**
     * @deprecated
     * @maxLength 128
     */
    password1?: string;
    /**
     * @deprecated
     * @maxLength 128
     */
    password2?: string;
    terms_and_conditions?: boolean;
    privacy_policy?: boolean;
    /** @min 0 */
    session_duration?: number | null;
    /**
     * @maxItems 1
     * @minItems 0
     */
    groups?: (string | null)[];
    /** @minItems 0 */
    legal_term_versions?: number[];
    /**
     * * `cookie` - Cookie
     * * `token` - Token
     * @default "token"
     */
    auth_method?: "cookie" | "token";
}
/** Override company validation on the register serializer. */
interface RegisterCompany {
    /** @maxLength 50 */
    first_name?: string;
    /** @maxLength 50 */
    middle_name?: string;
    /** @maxLength 50 */
    last_name?: string;
    /** @maxLength 150 */
    username?: string;
    /** @format email */
    email?: string;
    mobile?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    company: CreateCompany;
    /** @maxLength 24 */
    id_number?: string | null;
    /** @format date */
    birth_date?: string | null;
    /** @maxLength 24 */
    language?: string;
    /**
     * * `male` - Male
     * * `female` - Female
     * * `other` - Other
     * * `not_specified` - Not Specified
     */
    gender?: "male" | "female" | "other" | "not_specified" | null;
    /**
     * * `mr` - Mr
     * * `mrs` - Mrs
     * * `ms` - Ms
     * * `mx` - Mx
     */
    title?: "mr" | "mrs" | "ms" | "mx" | null;
    /**
     * * `single` - Single
     * * `married` - Married
     * * `divorced` - Divorced
     * * `widowed` - Widowed
     */
    marital_status?: "single" | "married" | "divorced" | "widowed" | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    nationality?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    residency?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 100 */
    timezone?: string | null;
    /** @maxLength 128 */
    password?: string;
    /**
     * @deprecated
     * @maxLength 128
     */
    password1?: string;
    /**
     * @deprecated
     * @maxLength 128
     */
    password2?: string;
    terms_and_conditions?: boolean;
    privacy_policy?: boolean;
    /** @minItems 0 */
    legal_term_versions?: number[];
    /**
     * * `cookie` - Cookie
     * * `token` - Token
     * @default "token"
     */
    auth_method?: "cookie" | "token";
}
interface RequestDelete {
    user: string;
    company: string;
}
interface ResendVerifyEmail {
    /** @format email */
    email: string;
    company: string;
}
interface ResendVerifyMobile {
    mobile: string;
    company: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ResourceRequirementRule$1 {
    /**
     * * `address` - Address
     * * `bank_account` - Bank Account
     * * `document` - Document
     * * `email` - Email
     * * `mobile` - Mobile
     * * `user` - User
     */
    resource: "address" | "bank_account" | "document" | "email" | "mobile" | "user";
    condition: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Statement {
    id: string;
    account: ReducedAccount$1;
    timezone: string;
    start_date: number;
    end_date: number;
    /** @format uri */
    file: string | null;
    /**
     * * `queued` - Queued
     * * `processing` - Processing
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "queued" | "processing" | "complete" | "failed";
    created: number;
    updated: number;
}
interface StatementResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: Statement;
}
interface TotalTransaction$1 {
    total_amount: number;
    amount: number;
    fees: number;
    count: number;
    currency: string;
}
interface TotalTransactionResponse$1 {
    status: string;
    data: TotalTransaction$1;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface Transaction$2 {
    id: string;
    collection: string;
    parent: string | null;
    partner: PartnerTransaction | null;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    note: string;
    metadata: Record<string, any>;
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    reference: string | null;
    amount: number;
    fee: number;
    total_amount: number;
    balance: number;
    label: string;
    account: string;
    currency: ReducedAsset$1;
    account_currency: TransactionAccountAsset$1;
    inclusive: boolean;
    executed: number | null;
    expires: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface TransactionAccountAsset$1 {
    id: string;
    account: ReducedAccount$1;
    currency: ReducedAsset$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface TransactionCollection {
    id: string;
    transactions: TransactionCollectionTransaction[];
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    created: number;
    updated: number;
}
interface TransactionCollectionResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: TransactionCollection;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface TransactionCollectionTransaction {
    id: string;
    parent: string | null;
    partner: PartnerTransaction | null;
    index: number;
    inferred: boolean;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    note: string;
    metadata: Record<string, any>;
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    reference: string | null;
    amount: number;
    fee: number;
    total_amount: number;
    balance: number;
    label: string;
    account: string;
    currency: ReducedAsset$1;
    account_currency: TransactionAccountAsset$1;
    inclusive: boolean;
    executed: number | null;
    created: number;
    updated: number;
    expires: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface TransactionFee$1 {
    description: string;
    amount: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface TransactionMessage {
    id: number;
    /**
     * * `info` - Info
     * * `warning` - Warning
     * * `error` - Error
     */
    level: "info" | "warning" | "error";
    message: string;
    created: number;
    updated: number;
}
interface TransactionMessageResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: TransactionMessage;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface TransactionSubtype$1 {
    id: number;
    name: string;
    label: string | null;
    description: string | null;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    /**
     * * `partner` - Partner
     * * `single` - Single
     * @deprecated
     */
    usage_type: "partner" | "single" | null;
    partner: ReducedTransactionSubtype$1;
    created: number;
    updated: number;
}
type TransactionSubtypeList = TransactionSubtype$1[];
interface TransactionSubtypeListResponse {
    status: string;
    data: TransactionSubtypeList;
}
interface TransactionSubtypeResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: TransactionSubtype$1;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface UpdateExtendedTransaction {
    id: string;
    collection: string;
    parent: string | null;
    partner: PartnerTransaction | null;
    index: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    note: string;
    metadata: Record<string, any>;
    /**
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     */
    status?: "Quoted" | "Pending";
    reference: string | null;
    amount: number;
    fee: number;
    total_amount: number;
    balance: number;
    label: string;
    account: string;
    currency: ReducedAsset$1;
    account_currency: TransactionAccountAsset$1;
    fees: TransactionFee$1[];
    inclusive: boolean;
    executed: number | null;
    expires: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UpdateLegalTermVersion {
    id: number;
    version: number;
    accepted: boolean;
    note: string | null;
    content: string | null;
    /** @format uri */
    url: string | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserAddress {
    id: number;
    /**
     * * `permanent` - Permanent
     * * `contact` - Contact
     * * `shipping` - Shipping
     * * `billing` - Billing
     * * `business` - Business
     */
    type?: "permanent" | "contact" | "shipping" | "billing" | "business";
    /** @maxLength 200 */
    line_1?: string | null;
    /** @maxLength 200 */
    line_2?: string | null;
    /** @maxLength 100 */
    city?: string | null;
    /** @maxLength 100 */
    state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    postal_code?: string | null;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    created: number;
    updated: number;
}
type UserAddressList = UserAddress[];
interface UserAddressListResponse {
    status: string;
    data: UserAddressList;
}
interface UserAddressResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: UserAddress;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserBankAccount {
    id: number;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 200 */
    number?: string | null;
    /** @maxLength 200 */
    type?: string | null;
    /**
     * * `individual` - Individual
     * * `business` - Business
     */
    beneficiary_type?: "individual" | "business" | null;
    /** @maxLength 20 */
    clabe?: string | null;
    owner?: BankOwner$1 | null;
    /** @maxLength 200 */
    bank_name?: string | null;
    /** @maxLength 50 */
    bank_code?: string | null;
    /** @maxLength 3 */
    bank_currency?: string | null;
    /** @maxLength 50 */
    branch_code?: string | null;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    branch_address?: UserBankBranchAddress;
    /** @maxLength 255 */
    branch_address_text?: string | null;
    /** @maxLength 50 */
    routing_number?: string | null;
    /** @maxLength 16 */
    swift?: string | null;
    /** @maxLength 50 */
    iban?: string | null;
    /** @maxLength 16 */
    bic?: string | null;
    code: string | null;
    metadata?: Record<string, any>;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    currencies: ReducedAsset$1[];
    account_currencies: ReducedAccountAsset$1[];
    /**
     * * `withdraw` - Withdraw
     * * `deposit` - Deposit
     */
    action: "withdraw" | "deposit";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserBankAccountAsset {
    /** @maxLength 30 */
    code?: string | null;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
    created: number;
    updated: number;
}
type UserBankAccountAssetList = UserBankAccountAsset[];
interface UserBankAccountAssetListResponse {
    status: string;
    data: UserBankAccountAssetList;
}
interface UserBankAccountAssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: UserBankAccountAsset;
}
type UserBankAccountList = UserBankAccount[];
interface UserBankAccountListResponse {
    status: string;
    data: UserBankAccountList;
}
interface UserBankAccountResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: UserBankAccount;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserBankBranchAddress {
    /** @maxLength 200 */
    line_1?: string | null;
    /** @maxLength 200 */
    line_2?: string | null;
    /** @maxLength 100 */
    city?: string | null;
    /** @maxLength 100 */
    state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    postal_code?: string | null;
    /** @maxLength 10 */
    state_code?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserCreateBankAccount {
    id: number;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 200 */
    number?: string | null;
    /** @maxLength 200 */
    type?: string | null;
    /**
     * * `individual` - Individual
     * * `business` - Business
     */
    beneficiary_type?: "individual" | "business" | null;
    /** @maxLength 20 */
    clabe?: string | null;
    owner?: BankOwner$1 | null;
    /** @maxLength 200 */
    bank_name?: string | null;
    /** @maxLength 50 */
    bank_code?: string | null;
    /** @maxLength 3 */
    bank_currency?: string | null;
    /** @maxLength 50 */
    branch_code?: string | null;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    branch_address?: UserBankBranchAddress;
    /** @maxLength 255 */
    branch_address_text?: string | null;
    /** @maxLength 50 */
    routing_number?: string | null;
    /** @maxLength 16 */
    swift?: string | null;
    /** @maxLength 50 */
    iban?: string | null;
    /** @maxLength 16 */
    bic?: string | null;
    code: string | null;
    metadata?: Record<string, any>;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    currencies: ReducedAsset$1[];
    account_currencies: ReducedAccountAsset$1[];
    /**
     * * `withdraw` - Withdraw
     * @default "withdraw"
     */
    action?: "withdraw";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserCreateDocument {
    id: number;
    /** @format uri */
    file: string;
    type: number;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    metadata?: Record<string, any>;
    note: string | null;
    expires?: number | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserCreateWalletAccount {
    id: number;
    /** @maxLength 200 */
    username?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    email?: string | null;
    /** @maxLength 24 */
    mobile?: string | null;
    /** @maxLength 50 */
    name?: string | null;
    code: string | null;
    /**
     * * `paypal` - Paypal
     * * `venmo` - Venmo
     * * `other` - Other
     */
    type?: "paypal" | "venmo" | "other";
    metadata?: Record<string, any>;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    currencies: ReducedAsset$1[];
    account_currencies: ReducedAccountAsset$1[];
    /**
     * * `withdraw` - Withdraw
     * @default "withdraw"
     */
    action?: "withdraw";
    created: number;
    updated: number;
}
interface UserDisallowedTransactionSubtype$1 {
    subtype: ReducedTransactionSubtype$1;
    currency: ReducedAsset$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserDocument {
    id: number;
    /** @format uri */
    file: string;
    type: ReducedDocumentType$1;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    metadata?: Record<string, any>;
    note: string | null;
    expires?: number | null;
    created: number;
    updated: number;
}
interface UserDocumentResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: UserDocument;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserGroup {
    /** @maxLength 80 */
    name: string;
    /** @maxLength 80 */
    label?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @format uri */
    icon: string | null;
    tier: GroupTier;
    tiers: ReducedGroupTier$1[];
    settings: GroupSettings;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
}
interface UserGroupResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: UserGroup;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserMessage {
    id: number;
    /**
     * * `info` - Info
     * * `warning` - Warning
     * * `error` - Error
     */
    level: "info" | "warning" | "error";
    message: string;
    created: number;
    updated: number;
}
interface UserMessageResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: UserMessage;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserPermission$1 {
    id: number;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
    /**
     * * `accesscontrolrule` - Access Control Rule
     * * `account` - Account
     * * `accountdefinition` - Account Definition
     * * `address` - Address
     * * `currency` - Currency
     * * `bankaccount` - Bank Account
     * * `company` - Company
     * * `cryptoaccount` - Crypto Account
     * * `device` - Device
     * * `document` - Document
     * * `email` - Email
     * * `group` - Group
     * * `jwt` - Jwt
     * * `legalterm` - Legal Term
     * * `mfa` - Mfa
     * * `mfarule` - Mfa Rule
     * * `mobile` - Mobile
     * * `notification` - Notification
     * * `oauthclient` - Oauth Client
     * * `permission` - Permission
     * * `request` - Request
     * * `service` - Service
     * * `token` - Token
     * * `transaction` - Transaction
     * * `transactionsubtypes` - Transaction Subtypes
     * * `user` - User
     * * `webhook` - Webhook
     */
    type: "accesscontrolrule" | "account" | "accountdefinition" | "address" | "currency" | "bankaccount" | "company" | "cryptoaccount" | "device" | "document" | "email" | "group" | "jwt" | "legalterm" | "mfa" | "mfarule" | "mobile" | "notification" | "oauthclient" | "permission" | "request" | "service" | "token" | "transaction" | "transactionsubtypes" | "user" | "webhook";
    /**
     * * `view` - View
     * * `add` - Add
     * * `change` - Change
     * * `delete` - Delete
     */
    level: "view" | "add" | "change" | "delete";
    properties: Record<string, any>;
}
interface UserPermissionResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: UserPermission$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserSettings$2 {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: UserDisallowedTransactionSubtype$1[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserVerification$1 {
    email: boolean;
    mobile: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserWalletAccount {
    id: number;
    /** @maxLength 200 */
    username?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    email?: string | null;
    /** @maxLength 24 */
    mobile?: string | null;
    /** @maxLength 50 */
    name?: string | null;
    code: string | null;
    /**
     * * `paypal` - Paypal
     * * `venmo` - Venmo
     * * `other` - Other
     */
    type?: "paypal" | "venmo" | "other";
    metadata?: Record<string, any>;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    currencies: ReducedAsset$1[];
    account_currencies: ReducedAccountAsset$1[];
    /**
     * * `withdraw` - Withdraw
     * * `deposit` - Deposit
     */
    action: "withdraw" | "deposit";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserWalletAccountAsset {
    /** @maxLength 30 */
    code?: string | null;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
    created: number;
    updated: number;
}
interface UserWalletAccountAssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: UserWalletAccountAsset;
}
type UserWalletAccountList = UserWalletAccount[];
interface UserWalletAccountListResponse {
    status: string;
    data: UserWalletAccountList;
}
interface UserWalletAccountResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: UserWalletAccount;
}
interface VerifyDeactivate$1 {
    key: string;
}
interface VerifyEmail {
    key: string;
}
interface VerifyMobile {
    /** @maxLength 24 */
    otp: string;
}
interface VerifyRequestDelete$1 {
    key: string;
}
interface AccountCurrenciesListParams$1 {
    account?: string;
    account__definition?: string;
    account__name?: string;
    account__name__contains?: string;
    active?: boolean;
    available_balance?: number;
    available_balance__gt?: number;
    available_balance__lt?: number;
    balance?: number;
    balance__gt?: number;
    balance__lt?: number;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    /** @format date-time */
    exclude__transactions__created__gt?: string;
    /** @format date-time */
    exclude__transactions__created__lt?: string;
    historic?: string;
    orderby?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @format date-time */
    transactions__created__gt?: string;
    /** @format date-time */
    transactions__created__lt?: string;
    /** @format date-time */
    updated?: string;
    /** @format date-time */
    updated__gt?: string;
    /** @format date-time */
    updated__gte?: string;
    /** @format date-time */
    updated__lt?: string;
    /** @format date-time */
    updated__lte?: string;
}
interface AccountDefinitionsListParams$1 {
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    group?: string;
    /**
     * Ordering
     *
     * * `created` - Created
     * * `-created` - Created (descending)
     * * `name` - Name
     * * `-name` - Name (descending)
     */
    orderby?: ("-created" | "-name" | "created" | "name")[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AccountsListParams$1 {
    active?: boolean;
    available_balance?: number;
    available_balance__gt?: number;
    available_balance__lt?: number;
    balance?: number;
    balance__gt?: number;
    balance__lt?: number;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    definition?: string;
    name?: string;
    orderby?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    primary?: boolean;
    recon?: boolean;
    reference?: string;
    reference__contains?: string;
    /** @format date-time */
    updated?: string;
    /** @format date-time */
    updated__gt?: string;
    /** @format date-time */
    updated__gte?: string;
    /** @format date-time */
    updated__lt?: string;
    /** @format date-time */
    updated__lte?: string;
}
interface AccountsCurrenciesListParams$1 {
    account?: string;
    account__definition?: string;
    account__name?: string;
    account__name__contains?: string;
    active?: boolean;
    available_balance?: number;
    available_balance__gt?: number;
    available_balance__lt?: number;
    balance?: number;
    balance__gt?: number;
    balance__lt?: number;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    /** @format date-time */
    exclude__transactions__created__gt?: string;
    /** @format date-time */
    exclude__transactions__created__lt?: string;
    historic?: string;
    orderby?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @format date-time */
    transactions__created__gt?: string;
    /** @format date-time */
    transactions__created__lt?: string;
    /** @format date-time */
    updated?: string;
    /** @format date-time */
    updated__gt?: string;
    /** @format date-time */
    updated__gte?: string;
    /** @format date-time */
    updated__lt?: string;
    /** @format date-time */
    updated__lte?: string;
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    reference: string;
}
interface AccountsCurrenciesFeesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    code: string;
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    reference: string;
}
interface AccountsCurrenciesLimitsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    code: string;
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    reference: string;
}
interface AuthMfaAuthenticatorsListParams {
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    type?: string;
    verified?: boolean;
}
interface AuthTokensListParams {
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    expires__isnull?: boolean;
    token_key?: string;
    token_key__exclude?: string;
    token_key__in?: string;
}
interface CompanyBankAccountsListParams {
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    id?: string;
    name?: string;
    name__contains?: string;
    number?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface CompanyCurrenciesListParams {
    code?: string;
    code__in?: string;
    display_code?: string;
    /**
     * Ordering
     *
     * * `created` - Created
     * * `-created` - Created (descending)
     * * `code` - Code
     * * `-code` - Code (descending)
     * * `display_code` - Display code
     * * `-display_code` - Display code (descending)
     */
    orderby?: ("-code" | "-created" | "-display_code" | "code" | "created" | "display_code")[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    unit?: string;
}
interface CompanyWalletAccountsListParams {
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    id?: string;
    name?: string;
    name__contains?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface DocumentTypesListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface ExportsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    resource?: string;
    status?: string;
}
interface GroupsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface GroupsFeesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    groupName: string;
}
interface GroupsPermissionsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    groupName: string;
}
interface GroupsTiersListParams$1 {
    active?: boolean;
    level?: number;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    requirement?: string;
    /** @pattern ^\w+$ */
    groupName: string;
}
interface GroupsTiersFeesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    groupName: string;
    /** @pattern ^\d+$ */
    tierId: string;
}
interface GroupsTiersLimitsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    groupName: string;
    /** @pattern ^\d+$ */
    tierId: string;
}
interface GroupsTiersRequirementSetsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    groupName: string;
    /** @pattern ^\d+$ */
    tierId: string;
}
interface GroupsTiersRequirementSetsItemsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    groupName: string;
    /** @pattern ^\d+$ */
    reqSetId: string;
    /** @pattern ^\d+$ */
    tierId: string;
}
interface MetricsListParams$1 {
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    slug?: string;
    slug__in?: string;
    type?: string;
}
interface MetricsPointsListParams$1 {
    /** @format date-time */
    date?: string;
    /** @format date-time */
    date__gt?: string;
    /** @format date-time */
    date__gte?: string;
    /** @format date-time */
    date__lt?: string;
    /** @format date-time */
    date__lte?: string;
    interval?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    identifier: string;
}
interface PermissionsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface PublicCompaniesListParams {
    id?: string;
    id__contains?: string;
    name?: string;
    name__contains?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface PublicCompaniesGroupsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    id: string;
}
interface PublicCompaniesLegalTermsListParams {
    group?: string;
    name?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    type?: string;
    /** @pattern ^\w+$ */
    id: string;
}
interface PublicCompaniesLegalTermsVersionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    id: string;
    /** @pattern ^\d+$ */
    termId: string;
}
interface PublicCompaniesOauthClientsListParams {
    application?: string;
    client_id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    provider?: string;
    /** @pattern ^\w+$ */
    id: string;
}
interface PublicLegalTermsListParams {
    group?: string;
    name?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    type?: string;
}
interface PublicLegalTermsVersionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\d+$ */
    termId: string;
}
interface StatementsListParams$1 {
    account?: string;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface SubtypesListParams$1 {
    archived?: boolean;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    name?: string;
    partner__isnull?: boolean;
    tx_type?: string;
    usage_type?: string;
}
interface TransactionCollectionsListParams$1 {
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    transactions__account?: string;
    transactions__amount?: string;
    transactions__amount__abs?: string;
    transactions__amount__abs__gt?: string;
    transactions__amount__abs__gte?: string;
    transactions__amount__abs__lt?: string;
    transactions__amount__abs__lte?: string;
    transactions__amount__gt?: string;
    transactions__amount__gte?: string;
    transactions__amount__lt?: string;
    transactions__amount__lte?: string;
    transactions__currency?: string;
    transactions__status?: string;
    transactions__subtype?: string;
    transactions__tx_type?: string;
    /** @format date-time */
    updated?: string;
    /** @format date-time */
    updated__gt?: string;
    /** @format date-time */
    updated__gte?: string;
    /** @format date-time */
    updated__lt?: string;
    /** @format date-time */
    updated__lte?: string;
}
interface TransactionsListParams$3 {
    account?: string;
    account__definition?: string;
    account__exclude?: string;
    account__name?: string;
    account__recon?: boolean;
    amount?: string;
    amount__abs?: string;
    amount__abs__gt?: string;
    amount__abs__gte?: string;
    amount__abs__lt?: string;
    amount__abs__lte?: string;
    amount__gt?: string;
    amount__gte?: string;
    amount__lt?: string;
    amount__lte?: string;
    collection?: string;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    /** @format date-time */
    executed?: string | null;
    /** @format date-time */
    executed__gt?: string | null;
    /** @format date-time */
    executed__gte?: string | null;
    /** @format date-time */
    executed__lt?: string | null;
    /** @format date-time */
    executed__lte?: string | null;
    id?: string;
    id__in?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    parent?: string;
    partner?: string;
    partner__isnull?: boolean;
    reference?: string;
    reference__gt?: string;
    reference__gte?: string;
    reference__lt?: string;
    reference__lte?: string;
    status?: string;
    /** Multiple values may be separated by commas. */
    status__in?: string[];
    subtype?: string;
    subtype__exclude?: string;
    subtype__in?: string;
    tx_type?: string;
    /** @format date-time */
    updated?: string;
    /** @format date-time */
    updated__gt?: string;
    /** @format date-time */
    updated__gte?: string;
    /** @format date-time */
    updated__lt?: string;
    /** @format date-time */
    updated__lte?: string;
}
interface TransactionsMessagesListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    txCode: string;
}
interface UserBankAccountsListParams {
    account_currency?: string;
    action?: string;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    name?: string;
    name__contains?: string;
    number?: string;
    status?: string;
}
interface UserCryptoAccountsListParams {
    account_currency?: string;
    action?: string;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    crypto_type?: string;
    currency?: string;
    name?: string;
    name__contains?: string;
    status?: string;
}
interface UserDevicesListParams {
    imei?: string;
}
interface UserDevicesAppsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\d+$ */
    id: string;
}
interface UserDocumentsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface UserLegalTermsListParams {
    group?: string;
    name?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    type?: string;
}
interface UserLegalTermsVersionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\d+$ */
    id: string;
}
interface UserMessagesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface UserWalletAccountsListParams {
    account_currency?: string;
    action?: string;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    name?: string;
    name__contains?: string;
    status?: string;
}
interface UserWalletAccountsCurrenciesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\d+$ */
    id: string;
}
/**
 * @title Platform API
 * @version 3 (3)
 * @termsOfService https://rehive.com/terms/
 * @baseUrl https://api.rehive.com
 * @externalDocs https://docs.rehive.com
 * @contact Rehive Support <support@rehive.com> (https://rehive.com/support/)
 *
 *
 * The **Platform API** is the core component of the Rehive ecosystem. It provides authentication for platform users as well as access user-scoped resources.
 *
 * The **Platform Admin API** documentation can be found below:
 *
 * - [API specification](https://api.rehive.com/?api=rehive-platform-admin-api)
 * - [Swagger specification](https://api.rehive.com/admin/swagger)
 *
 * For general usage, help, and recommendations please take a look at the [platform docs](https://docs.rehive.com/platform/get-started/introduction/).
 *
 */
declare class Api$c<SecurityDataType extends unknown> extends HttpClient$b<SecurityDataType> {
    v3: {
        /**
         * No description
         *
         * @tags account-currencies
         * @name AccountCurrenciesList
         * @summary List account currencies
         * @request GET:/3/account-currencies/
         * @secure
         */
        accountCurrenciesList: (query: AccountCurrenciesListParams$1, params?: RequestParams) => Promise<PaginatedAccountAssetListResponse>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsList
         * @summary List account definitions
         * @request GET:/3/account-definitions/
         * @secure
         */
        accountDefinitionsList: (query: AccountDefinitionsListParams$1, params?: RequestParams) => Promise<PaginatedAccountDefinitionListResponse>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsRetrieve
         * @summary Retrieve account definition
         * @request GET:/3/account-definitions/{definition_name}/
         * @secure
         */
        accountDefinitionsRetrieve: (definitionName: string, params?: RequestParams) => Promise<AccountDefinitionResponse>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsList
         * @summary List accounts
         * @request GET:/3/accounts/
         * @secure
         */
        accountsList: (query: AccountsListParams$1, params?: RequestParams) => Promise<PaginatedAccountListResponse>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCreate
         * @summary Create account
         * @request POST:/3/accounts/
         * @secure
         */
        accountsCreate: (data: Account, params?: RequestParams) => Promise<AccountResponse>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsRetrieve
         * @summary Retrieve account
         * @request GET:/3/accounts/{reference}/
         * @secure
         */
        accountsRetrieve: (reference: string, params?: RequestParams) => Promise<ExtendedAccountResponse>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesList
         * @summary List account currencies
         * @request GET:/3/accounts/{reference}/currencies/
         * @secure
         */
        accountsCurrenciesList: ({ reference, ...query }: AccountsCurrenciesListParams$1, params?: RequestParams) => Promise<PaginatedAccountAccountAssetListResponse>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesCreate
         * @summary Create account currency
         * @request POST:/3/accounts/{reference}/currencies/
         * @secure
         */
        accountsCurrenciesCreate: (reference: string, data: CreateAccountAccountAsset, params?: RequestParams) => Promise<AccountAccountAssetResponse>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesRetrieve
         * @summary Retrieve account currency
         * @request GET:/3/accounts/{reference}/currencies/{code}/
         * @secure
         */
        accountsCurrenciesRetrieve: (code: string, reference: string, params?: RequestParams) => Promise<AccountAccountAssetResponse>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesUpdate
         * @summary Update account currency
         * @request PUT:/3/accounts/{reference}/currencies/{code}/
         * @secure
         */
        accountsCurrenciesUpdate: (code: string, reference: string, data: AccountAccountAsset, params?: RequestParams) => Promise<AccountAccountAssetResponse>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesPartialUpdate
         * @summary Partially update account currency
         * @request PATCH:/3/accounts/{reference}/currencies/{code}/
         * @secure
         */
        accountsCurrenciesPartialUpdate: (code: string, reference: string, data: PatchedAccountAccountAsset, params?: RequestParams) => Promise<AccountAccountAssetResponse>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesFeesList
         * @summary List account currency fees
         * @request GET:/3/accounts/{reference}/currencies/{code}/fees/
         * @secure
         */
        accountsCurrenciesFeesList: ({ code, reference, ...query }: AccountsCurrenciesFeesListParams, params?: RequestParams) => Promise<PaginatedAccountAssetFeeListResponse>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesFeesRetrieve
         * @summary Retrieve account currency fees
         * @request GET:/3/accounts/{reference}/currencies/{code}/fees/{fee_id}/
         * @secure
         */
        accountsCurrenciesFeesRetrieve: (code: string, feeId: string, reference: string, params?: RequestParams) => Promise<AdminAccountAssetFeeResponse$1>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesLimitsList
         * @summary List account currency limits
         * @request GET:/3/accounts/{reference}/currencies/{code}/limits/
         * @secure
         */
        accountsCurrenciesLimitsList: ({ code, reference, ...query }: AccountsCurrenciesLimitsListParams$1, params?: RequestParams) => Promise<PaginatedAccountAssetLimitListResponse>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesLimitsRetrieve
         * @summary Retrieve account currency limit
         * @request GET:/3/accounts/{reference}/currencies/{code}/limits/{limit_id}/
         * @secure
         */
        accountsCurrenciesLimitsRetrieve: (code: string, limitId: string, reference: string, params?: RequestParams) => Promise<AccountAssetLimitResponse>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthRetrieve
         * @summary Retrieve auth
         * @request GET:/3/auth/
         * @secure
         */
        authRetrieve: (params?: RequestParams) => Promise<AuthResponse>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthRegisterCompany
         * @summary Register company
         * @request POST:/3/auth/company/register/
         * @secure
         */
        authRegisterCompany: (data: RegisterCompany, params?: RequestParams) => Promise<ExtendedAuthenticatedResponse$1>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthDeactivate
         * @summary Deactivate
         * @request POST:/3/auth/deactivate/
         * @secure
         */
        authDeactivate: (data: Deactivate$b, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthDeactivateVerify
         * @summary Verify deactivation
         * @request POST:/3/auth/deactivate/verify/
         * @secure
         */
        authDeactivateVerify: (data: VerifyDeactivate$1, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthEmailVerify
         * @summary Verify email
         * @request POST:/3/auth/email/verify/
         * @secure
         */
        authEmailVerify: (data: VerifyEmail, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthEmailVerifyResend
         * @summary Resend email verify
         * @request POST:/3/auth/email/verify/resend/
         * @secure
         */
        authEmailVerifyResend: (data: ResendVerifyEmail, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthJwtCreate
         * @request POST:/3/auth/jwt/
         * @secure
         */
        authJwtCreate: (data: CreateJWT, params?: RequestParams) => Promise<JWTResponse>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthLogin
         * @summary Login
         * @request POST:/3/auth/login/
         * @secure
         */
        authLogin: (data: Login, params?: RequestParams) => Promise<AuthenticatedResponse$1>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthLogout
         * @summary Logout
         * @request POST:/3/auth/logout/
         * @secure
         */
        authLogout: (data: Logout, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthMfaAuthenticatorsList
         * @summary List MFA authenticators
         * @request GET:/3/auth/mfa/authenticators/
         * @secure
         */
        authMfaAuthenticatorsList: (query: AuthMfaAuthenticatorsListParams, params?: RequestParams) => Promise<PaginatedMaskedMFAAuthenticatorListResponse>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthMfaAuthenticatorsCreate
         * @summary Create MFA authenticator
         * @request POST:/3/auth/mfa/authenticators/
         * @secure
         */
        authMfaAuthenticatorsCreate: (data: CreateMFAAuthenticator, params?: RequestParams) => Promise<MFAAuthenticatorResponse>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthMfaAuthenticatorsRetrieve
         * @summary Retreieve MFA authenticator
         * @request GET:/3/auth/mfa/authenticators/{identifier}/
         * @secure
         */
        authMfaAuthenticatorsRetrieve: (identifier: string, params?: RequestParams) => Promise<MaskedMFAAuthenticatorResponse>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthMfaAuthenticatorsDestroy
         * @summary Delete MFA authenticator
         * @request DELETE:/3/auth/mfa/authenticators/{identifier}/
         * @secure
         */
        authMfaAuthenticatorsDestroy: (identifier: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthMfaDeliver
         * @summary Deliver MFA
         * @request POST:/3/auth/mfa/deliver/
         * @secure
         */
        authMfaDeliver: (data: MFADeliver, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthMfaVerify
         * @summary Verify MFA
         * @request POST:/3/auth/mfa/verify/
         * @secure
         */
        authMfaVerify: (data: MFAVerify, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthMobileVerify
         * @summary Verify mobile
         * @request POST:/3/auth/mobile/verify/
         * @secure
         */
        authMobileVerify: (data: VerifyMobile, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthMobileVerifyResend
         * @summary Resend mobile verify
         * @request POST:/3/auth/mobile/verify/resend/
         * @secure
         */
        authMobileVerifyResend: (data: ResendVerifyMobile, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthOauthAuthorizeCreate
         * @request POST:/3/auth/oauth/authorize/
         * @secure
         */
        authOauthAuthorizeCreate: (data: OauthAuthorize, params?: RequestParams) => Promise<OauthAuthorizeResponse>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthOauthLoginCreate
         * @request POST:/3/auth/oauth/login/
         * @secure
         */
        authOauthLoginCreate: (data: OauthLogin, params?: RequestParams) => Promise<AuthenticatedResponse$1>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthOauthRegisterCreate
         * @request POST:/3/auth/oauth/register/
         * @secure
         */
        authOauthRegisterCreate: (data: OauthRegister, params?: RequestParams) => Promise<ExtendedAuthenticatedResponse$1>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthOauthSessionCreate
         * @request POST:/3/auth/oauth/session/
         * @secure
         */
        authOauthSessionCreate: (data: OauthSession, params?: RequestParams) => Promise<OauthSessionResponse>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthOauthVerifyCreate
         * @request POST:/3/auth/oauth/verify/
         * @secure
         */
        authOauthVerifyCreate: (data: OauthVerify, params?: RequestParams) => Promise<OauthVerifyResponse>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthPasswordChange
         * @summary Change password
         * @request POST:/3/auth/password/change/
         * @secure
         */
        authPasswordChange: (data: PasswordChange, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthPasswordReset
         * @summary Reset password
         * @request POST:/3/auth/password/reset/
         * @secure
         */
        authPasswordReset: (data: PasswordReset, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthPasswordResetConfirm
         * @summary Confirm password reset
         * @request POST:/3/auth/password/reset/confirm/
         * @secure
         */
        authPasswordResetConfirm: (data: PasswordResetConfirm$1, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthRefreshCreate
         * @request POST:/3/auth/refresh/
         * @secure
         */
        authRefreshCreate: (data: Refresh, params?: RequestParams) => Promise<RefreshedResponse>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthRegister
         * @summary Register
         * @request POST:/3/auth/register/
         * @secure
         */
        authRegister: (data: Register, params?: RequestParams) => Promise<ExtendedAuthenticatedResponse$1>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthRequestDelete
         * @summary Request delete
         * @request POST:/3/auth/request-delete/
         * @secure
         */
        authRequestDelete: (data: RequestDelete, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthRequestDeleteVerify
         * @summary Verify request delete
         * @request POST:/3/auth/request-delete/verify/
         * @secure
         */
        authRequestDeleteVerify: (data: VerifyRequestDelete$1, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthTokensList
         * @summary List auth tokens
         * @request GET:/3/auth/tokens/
         * @secure
         */
        authTokensList: (query: AuthTokensListParams, params?: RequestParams) => Promise<AuthTokenListResponse>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthTokensCreate
         * @summary Create auth token
         * @request POST:/3/auth/tokens/
         * @secure
         */
        authTokensCreate: (data: CreateAuthToken, params?: RequestParams) => Promise<ExtendedAuthenticatedResponse$1>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthTokensListDestroy
         * @summary Delete auth tokens
         * @request DELETE:/3/auth/tokens/
         * @secure
         */
        authTokensListDestroy: (params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthTokensRetrieve
         * @summary Retrieve auth token
         * @request GET:/3/auth/tokens/{token_key}/
         * @secure
         */
        authTokensRetrieve: (tokenKey: string, params?: RequestParams) => Promise<AuthTokenResponse>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthTokensDestroy
         * @summary Delete auth token
         * @request DELETE:/3/auth/tokens/{token_key}/
         * @secure
         */
        authTokensDestroy: (tokenKey: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyRetrieve
         * @summary Retrieve company
         * @request GET:/3/company/
         * @secure
         */
        companyRetrieve: (params?: RequestParams) => Promise<CompanyResponse$2>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyBankAccountsList
         * @summary List bank accounts
         * @request GET:/3/company/bank-accounts/
         * @secure
         */
        companyBankAccountsList: (query: CompanyBankAccountsListParams, params?: RequestParams) => Promise<PaginatedCompanyBankAccountListResponse>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyCurrenciesList
         * @summary List currencies
         * @request GET:/3/company/currencies/
         * @secure
         */
        companyCurrenciesList: (query: CompanyCurrenciesListParams, params?: RequestParams) => Promise<PaginatedAssetListResponse>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyCurrenciesRetrieve
         * @summary Retrieve currency
         * @request GET:/3/company/currencies/{code}/
         * @secure
         */
        companyCurrenciesRetrieve: (code: string, params?: RequestParams) => Promise<AssetResponse>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyWalletAccountsList
         * @summary List wallet accounts
         * @request GET:/3/company/wallet-accounts/
         * @secure
         */
        companyWalletAccountsList: (query: CompanyWalletAccountsListParams, params?: RequestParams) => Promise<PaginatedCompanyWalletAccountListResponse>;
        /**
         * No description
         *
         * @tags document-types
         * @name DocumentTypesList
         * @summary List document types
         * @request GET:/3/document-types/
         * @secure
         */
        documentTypesList: (query: DocumentTypesListParams$1, params?: RequestParams) => Promise<PaginatedDocumentTypeListResponse>;
        /**
         * No description
         *
         * @tags document-types
         * @name DocumentTypesRetrieve
         * @summary Retrieve document type
         * @request GET:/3/document-types/{id}/
         * @secure
         */
        documentTypesRetrieve: (id: string, params?: RequestParams) => Promise<DocumentTypeResponse>;
        /**
         * No description
         *
         * @tags exports
         * @name ExportsList
         * @summary List exports
         * @request GET:/3/exports/
         * @secure
         */
        exportsList: (query: ExportsListParams$1, params?: RequestParams) => Promise<PaginatedExportListResponse>;
        /**
         * No description
         *
         * @tags exports
         * @name ExportsCreate
         * @summary Create export
         * @request POST:/3/exports/
         * @secure
         */
        exportsCreate: (data: CreateExport, params?: RequestParams) => Promise<ExportResponse>;
        /**
         * No description
         *
         * @tags exports
         * @name ExportsRetrieve
         * @summary Retrieve export
         * @request GET:/3/exports/{identifier}/
         * @secure
         */
        exportsRetrieve: (identifier: string, params?: RequestParams) => Promise<ExtendedExportResponse>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsList
         * @summary List groups
         * @request GET:/3/groups/
         * @secure
         */
        groupsList: (query: GroupsListParams$1, params?: RequestParams) => Promise<PaginatedUserGroupListResponse>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsRetrieve
         * @summary Retrieve group
         * @request GET:/3/groups/{group_name}/
         * @secure
         */
        groupsRetrieve: (groupName: string, params?: RequestParams) => Promise<UserGroupResponse>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsFeesList
         * @summary List fees
         * @request GET:/3/groups/{group_name}/fees/
         * @secure
         */
        groupsFeesList: ({ groupName, ...query }: GroupsFeesListParams, params?: RequestParams) => Promise<PaginatedGroupFeeListResponse>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsFeesRetrieve
         * @summary Retrieve fee
         * @request GET:/3/groups/{group_name}/fees/{fee_id}/
         * @secure
         */
        groupsFeesRetrieve: (feeId: string, groupName: string, params?: RequestParams) => Promise<GroupFeeResponse>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsPermissionsList
         * @summary List permissions
         * @request GET:/3/groups/{group_name}/permissions/
         * @secure
         */
        groupsPermissionsList: ({ groupName, ...query }: GroupsPermissionsListParams$1, params?: RequestParams) => Promise<PaginatedGroupPermissionListResponse$1>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsPermissionsRetrieve
         * @summary Retrieve permission
         * @request GET:/3/groups/{group_name}/permissions/{permission_id}/
         * @secure
         */
        groupsPermissionsRetrieve: (groupName: string, permissionId: string, params?: RequestParams) => Promise<GroupPermissionResponse>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersList
         * @summary List tiers
         * @request GET:/3/groups/{group_name}/tiers/
         * @secure
         */
        groupsTiersList: ({ groupName, ...query }: GroupsTiersListParams$1, params?: RequestParams) => Promise<PaginatedGroupTierListResponse>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRetrieve
         * @summary Retrieve tier
         * @request GET:/3/groups/{group_name}/tiers/{tier_id}/
         * @secure
         */
        groupsTiersRetrieve: (groupName: string, tierId: string, params?: RequestParams) => Promise<ExtendedGroupTierResponse>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersFeesList
         * @summary List tier fees
         * @request GET:/3/groups/{group_name}/tiers/{tier_id}/fees/
         * @secure
         */
        groupsTiersFeesList: ({ groupName, tierId, ...query }: GroupsTiersFeesListParams, params?: RequestParams) => Promise<PaginatedGroupTierFeeListResponse>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersFeesRetrieve
         * @summary Retrieve tier fee
         * @request GET:/3/groups/{group_name}/tiers/{tier_id}/fees/{fee_id}/
         * @secure
         */
        groupsTiersFeesRetrieve: (feeId: string, groupName: string, tierId: string, params?: RequestParams) => Promise<GroupTierFeeResponse>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersLimitsList
         * @summary List tier limits
         * @request GET:/3/groups/{group_name}/tiers/{tier_id}/limits/
         * @secure
         */
        groupsTiersLimitsList: ({ groupName, tierId, ...query }: GroupsTiersLimitsListParams, params?: RequestParams) => Promise<PaginatedGroupTierLimitListResponse>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersLimitsRetrieve
         * @summary Retrieve tier limit
         * @request GET:/3/groups/{group_name}/tiers/{tier_id}/limits/{limit_id}/
         * @secure
         */
        groupsTiersLimitsRetrieve: (groupName: string, limitId: string, tierId: string, params?: RequestParams) => Promise<GroupTierLimitResponse>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsList
         * @summary List tier requirement sets
         * @request GET:/3/groups/{group_name}/tiers/{tier_id}/requirement-sets/
         * @secure
         */
        groupsTiersRequirementSetsList: ({ groupName, tierId, ...query }: GroupsTiersRequirementSetsListParams$1, params?: RequestParams) => Promise<PaginatedGroupTierRequirementSetListResponse$1>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsRetrieve
         * @summary Retrieve tier requirement set
         * @request GET:/3/groups/{group_name}/tiers/{tier_id}/requirement-sets/{req_set_id}/
         * @secure
         */
        groupsTiersRequirementSetsRetrieve: (groupName: string, reqSetId: string, tierId: string, params?: RequestParams) => Promise<GroupTierRequirementSetResponse$1>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsItemsList
         * @summary List tier requirement set items
         * @request GET:/3/groups/{group_name}/tiers/{tier_id}/requirement-sets/{req_set_id}/items/
         * @secure
         */
        groupsTiersRequirementSetsItemsList: ({ groupName, reqSetId, tierId, ...query }: GroupsTiersRequirementSetsItemsListParams$1, params?: RequestParams) => Promise<PaginatedGroupTierRequirementSetItemListResponse$1>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsItemsRetrieve
         * @summary Retrieve tier requirement set item
         * @request GET:/3/groups/{group_name}/tiers/{tier_id}/requirement-sets/{req_set_id}/items/{req_item_id}/
         * @secure
         */
        groupsTiersRequirementSetsItemsRetrieve: (groupName: string, reqItemId: string, reqSetId: string, tierId: string, params?: RequestParams) => Promise<GroupTierRequirementSetItemResponse$1>;
        /**
         * No description
         *
         * @tags metrics
         * @name MetricsList
         * @summary List metric
         * @request GET:/3/metrics/
         * @secure
         */
        metricsList: (query: MetricsListParams$1, params?: RequestParams) => Promise<PaginatedMetricListResponse>;
        /**
         * No description
         *
         * @tags metrics
         * @name MetricsCreate
         * @summary Create metric
         * @request POST:/3/metrics/
         * @secure
         */
        metricsCreate: (data: CreateMetric, params?: RequestParams) => Promise<MetricResponse>;
        /**
         * No description
         *
         * @tags metrics
         * @name MetricsRetrieve
         * @summary Retrieve metric
         * @request GET:/3/metrics/{identifier}/
         * @secure
         */
        metricsRetrieve: (identifier: string, params?: RequestParams) => Promise<MetricResponse>;
        /**
         * No description
         *
         * @tags metrics
         * @name MetricsDestroy
         * @summary Delete metric
         * @request DELETE:/3/metrics/{identifier}/
         * @secure
         */
        metricsDestroy: (identifier: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags metrics
         * @name MetricsPointsList
         * @summary List metric points
         * @request GET:/3/metrics/{identifier}/points/
         * @secure
         */
        metricsPointsList: ({ identifier, ...query }: MetricsPointsListParams$1, params?: RequestParams) => Promise<PaginatedMetricPointListResponse>;
        /**
         * No description
         *
         * @tags permissions
         * @name PermissionsList
         * @summary List permissions
         * @request GET:/3/permissions/
         * @secure
         */
        permissionsList: (query: PermissionsListParams$1, params?: RequestParams) => Promise<PaginatedUserPermissionListResponse$1>;
        /**
         * No description
         *
         * @tags permissions
         * @name PermissionsRetrieve
         * @summary Retrieve permission
         * @request GET:/3/permissions/{permission_id}/
         * @secure
         */
        permissionsRetrieve: (permissionId: string, params?: RequestParams) => Promise<UserPermissionResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicCompaniesList
         * @summary List public companies
         * @request GET:/3/public/companies/
         * @secure
         */
        publicCompaniesList: (query: PublicCompaniesListParams, params?: RequestParams) => Promise<PaginatedPublicCompanyListResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicCompaniesRetrieve
         * @summary Retrieve public company
         * @request GET:/3/public/companies/{id}/
         * @secure
         */
        publicCompaniesRetrieve: (id: string, params?: RequestParams) => Promise<PublicCompanyResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicCompaniesGroupsList
         * @summary List public company groups
         * @request GET:/3/public/companies/{id}/groups/
         * @secure
         */
        publicCompaniesGroupsList: ({ id, ...query }: PublicCompaniesGroupsListParams, params?: RequestParams) => Promise<PaginatedPublicGroupListResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicCompaniesGroupsRetrieve
         * @summary Retrieve public company group
         * @request GET:/3/public/companies/{id}/groups/{group_name}/
         * @secure
         */
        publicCompaniesGroupsRetrieve: (groupName: string, id: string, params?: RequestParams) => Promise<PublicGroupResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicCompaniesLegalTermsList
         * @summary List public company legal terms
         * @request GET:/3/public/companies/{id}/legal-terms/
         * @secure
         */
        publicCompaniesLegalTermsList: ({ id, ...query }: PublicCompaniesLegalTermsListParams, params?: RequestParams) => Promise<PaginatedPublicCompanyLegalTermListResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicCompaniesLegalTermsRetrieve
         * @summary Retrieve public company legal terms
         * @request GET:/3/public/companies/{id}/legal-terms/{term_id}/
         * @secure
         */
        publicCompaniesLegalTermsRetrieve: (id: string, termId: string, params?: RequestParams) => Promise<PublicCompanyLegalTermResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicCompaniesLegalTermsVersionsList
         * @summary List public company legal term versions
         * @request GET:/3/public/companies/{id}/legal-terms/{term_id}/versions/
         * @secure
         */
        publicCompaniesLegalTermsVersionsList: ({ id, termId, ...query }: PublicCompaniesLegalTermsVersionsListParams, params?: RequestParams) => Promise<PaginatedPublicCompanyLegalTermVersionListResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicCompaniesLegalTermsVersionsRetrieve
         * @summary Retrieve public company legal term version
         * @request GET:/3/public/companies/{id}/legal-terms/{term_id}/versions/{version_id}/
         * @secure
         */
        publicCompaniesLegalTermsVersionsRetrieve: (id: string, termId: string, versionId: string, params?: RequestParams) => Promise<PublicCompanyLegalTermVersionResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicCompaniesOauthClientsList
         * @request GET:/3/public/companies/{id}/oauth-clients/
         * @secure
         */
        publicCompaniesOauthClientsList: ({ id, ...query }: PublicCompaniesOauthClientsListParams, params?: RequestParams) => Promise<PaginatedOauthClientListResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicCompaniesOauthClientsRetrieve
         * @request GET:/3/public/companies/{id}/oauth-clients/{identifier}/
         * @secure
         */
        publicCompaniesOauthClientsRetrieve: (id: string, identifier: string, params?: RequestParams) => Promise<OauthClientResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicLegalTermsList
         * @summary List public legal terms
         * @request GET:/3/public/legal-terms/
         * @secure
         */
        publicLegalTermsList: (query: PublicLegalTermsListParams, params?: RequestParams) => Promise<PaginatedPublicLegalTermListResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicLegalTermsRetrieve
         * @summary Retrieve public legal terms
         * @request GET:/3/public/legal-terms/{term_id}/
         * @secure
         */
        publicLegalTermsRetrieve: (termId: string, params?: RequestParams) => Promise<PublicLegalTermResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicLegalTermsVersionsList
         * @summary List public legal term versions
         * @request GET:/3/public/legal-terms/{term_id}/versions/
         * @secure
         */
        publicLegalTermsVersionsList: ({ termId, ...query }: PublicLegalTermsVersionsListParams, params?: RequestParams) => Promise<PaginatedPublicLegalTermVersionListResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicLegalTermsVersionsRetrieve
         * @summary Retrieve public legal term version
         * @request GET:/3/public/legal-terms/{term_id}/versions/{version_id}/
         * @secure
         */
        publicLegalTermsVersionsRetrieve: (termId: string, versionId: string, params?: RequestParams) => Promise<PublicLegalTermVersionResponse>;
        /**
         * No description
         *
         * @tags statements
         * @name StatementsList
         * @request GET:/3/statements/
         * @secure
         */
        statementsList: (query: StatementsListParams$1, params?: RequestParams) => Promise<PaginatedStatementListResponse>;
        /**
         * No description
         *
         * @tags statements
         * @name StatementsCreate
         * @request POST:/3/statements/
         * @secure
         */
        statementsCreate: (data: CreateStatement, params?: RequestParams) => Promise<StatementResponse>;
        /**
         * No description
         *
         * @tags statements
         * @name StatementsRetrieve
         * @request GET:/3/statements/{identifier}/
         * @secure
         */
        statementsRetrieve: (identifier: string, params?: RequestParams) => Promise<StatementResponse>;
        /**
         * No description
         *
         * @tags statements
         * @name StatementsDestroy
         * @request DELETE:/3/statements/{identifier}/
         * @secure
         */
        statementsDestroy: (identifier: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags subtypes
         * @name SubtypesList
         * @summary List subtypes
         * @request GET:/3/subtypes/
         * @secure
         */
        subtypesList: (query: SubtypesListParams$1, params?: RequestParams) => Promise<TransactionSubtypeListResponse>;
        /**
         * No description
         *
         * @tags subtypes
         * @name SubtypesRetrieve
         * @summary Retrieve subtype
         * @request GET:/3/subtypes/{id}/
         * @secure
         */
        subtypesRetrieve: (id: string, params?: RequestParams) => Promise<TransactionSubtypeResponse>;
        /**
         * No description
         *
         * @tags transaction-collections
         * @name TransactionCollectionsList
         * @summary List transaction collections
         * @request GET:/3/transaction-collections/
         * @secure
         */
        transactionCollectionsList: (query: TransactionCollectionsListParams$1, params?: RequestParams) => Promise<PaginatedTransactionCollectionListResponse>;
        /**
         * No description
         *
         * @tags transaction-collections
         * @name TransactionCollectionsCreate
         * @summary Create transaction collection
         * @request POST:/3/transaction-collections/
         * @secure
         */
        transactionCollectionsCreate: (data: CreateTransactionCollection, params?: RequestParams) => Promise<TransactionCollectionResponse>;
        /**
         * No description
         *
         * @tags transaction-collections
         * @name TransactionCollectionsRetrieve
         * @summary Retrieve transaction collection
         * @request GET:/3/transaction-collections/{identifier}/
         * @secure
         */
        transactionCollectionsRetrieve: (identifier: string, params?: RequestParams) => Promise<TransactionCollectionResponse>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsList
         * @summary List transactions
         * @request GET:/3/transactions/
         * @secure
         */
        transactionsList: (query: TransactionsListParams$3, params?: RequestParams) => Promise<PaginatedTransactionListResponse>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsCreate
         * @summary Create transaction
         * @request POST:/3/transactions/
         * @secure
         */
        transactionsCreate: (data: CreateMultiTransaction, params?: RequestParams) => Promise<MultiTransactionResponse>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsRetrieve
         * @summary Retrieve transaction
         * @request GET:/3/transactions/{tx_code}/
         * @secure
         */
        transactionsRetrieve: (txCode: string, params?: RequestParams) => Promise<ExtendedTransactionResponse>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsUpdate
         * @summary Update transaction
         * @request PUT:/3/transactions/{tx_code}/
         * @secure
         */
        transactionsUpdate: (txCode: string, data: UpdateExtendedTransaction, params?: RequestParams) => Promise<ExtendedTransactionResponse>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsPartialUpdate
         * @summary Partially update transaction
         * @request PATCH:/3/transactions/{tx_code}/
         * @secure
         */
        transactionsPartialUpdate: (txCode: string, data: PatchedUpdateExtendedTransaction, params?: RequestParams) => Promise<ExtendedTransactionResponse>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsMessagesList
         * @summary List transaction messages
         * @request GET:/3/transactions/{tx_code}/messages/
         * @secure
         */
        transactionsMessagesList: ({ txCode, ...query }: TransactionsMessagesListParams$1, params?: RequestParams) => Promise<PaginatedTransactionMessageListResponse>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsMessagesRetrieve
         * @summary Retrieve transaction message
         * @request GET:/3/transactions/{tx_code}/messages/{id}/
         * @secure
         */
        transactionsMessagesRetrieve: (id: string, txCode: string, params?: RequestParams) => Promise<TransactionMessageResponse>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsCreditCreate
         * @summary Create credit transaction
         * @request POST:/3/transactions/credit/
         * @secure
         */
        transactionsCreditCreate: (data: CreateCreditTransaction, params?: RequestParams) => Promise<ExtendedTransactionResponse>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsDebitCreate
         * @summary Create debit transaction
         * @request POST:/3/transactions/debit/
         * @secure
         */
        transactionsDebitCreate: (data: CreateDebitTransaction, params?: RequestParams) => Promise<ExtendedTransactionResponse>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionTotalsRetrieve
         * @summary Retrieve transaction totals
         * @request GET:/3/transactions/totals/
         * @secure
         */
        transactionTotalsRetrieve: (params?: RequestParams) => Promise<TotalTransactionResponse$1>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsTransferCreate
         * @summary Create transfer
         * @request POST:/3/transactions/transfer/
         * @secure
         */
        transactionsTransferCreate: (data: CreateTransferTransaction, params?: RequestParams) => Promise<ExtendedTransactionResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserRetrieve
         * @summary Retrieve user
         * @request GET:/3/user/
         * @secure
         */
        userRetrieve: (params?: RequestParams) => Promise<ExtendedUserInfoResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserUpdate
         * @summary Update user
         * @request PUT:/3/user/
         * @secure
         */
        userUpdate: (data: ExtendedUserInfo$1, params?: RequestParams) => Promise<ExtendedUserInfoResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserPartialUpdate
         * @summary Partially update user
         * @request PATCH:/3/user/
         * @secure
         */
        userPartialUpdate: (data: PatchedExtendedUserInfo, params?: RequestParams) => Promise<ExtendedUserInfoResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserAddressesList
         * @summary List addresses
         * @request GET:/3/user/addresses/
         * @secure
         */
        userAddressesList: (params?: RequestParams) => Promise<UserAddressListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserAddressesCreate
         * @summary Create address
         * @request POST:/3/user/addresses/
         * @secure
         */
        userAddressesCreate: (data: UserAddress, params?: RequestParams) => Promise<UserAddressResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserAddressesRetrieve
         * @summary Retrieve address
         * @request GET:/3/user/addresses/{id}/
         * @secure
         */
        userAddressesRetrieve: (id: string, params?: RequestParams) => Promise<UserAddressResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserAddressesUpdate
         * @summary Update address
         * @request PUT:/3/user/addresses/{id}/
         * @secure
         */
        userAddressesUpdate: (id: string, data: UserAddress, params?: RequestParams) => Promise<UserAddressResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserAddressesPartialUpdate
         * @summary Partially update address
         * @request PATCH:/3/user/addresses/{id}/
         * @secure
         */
        userAddressesPartialUpdate: (id: string, data: PatchedUserAddress, params?: RequestParams) => Promise<UserAddressResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserAddressesDestroy
         * @summary Delete address
         * @request DELETE:/3/user/addresses/{id}/
         * @secure
         */
        userAddressesDestroy: (id: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags user
         * @name UserBankAccountsList
         * @summary List bank accounts
         * @request GET:/3/user/bank-accounts/
         * @secure
         */
        userBankAccountsList: (query: UserBankAccountsListParams, params?: RequestParams) => Promise<UserBankAccountListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserBankAccountsCreate
         * @summary Create bank account
         * @request POST:/3/user/bank-accounts/
         * @secure
         */
        userBankAccountsCreate: (data: UserCreateBankAccount, params?: RequestParams) => Promise<UserBankAccountResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserBankAccountsRetrieve
         * @summary Retrieve bank account
         * @request GET:/3/user/bank-accounts/{id}/
         * @secure
         */
        userBankAccountsRetrieve: (id: string, params?: RequestParams) => Promise<UserBankAccountResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserBankAccountsUpdate
         * @summary Update bank account
         * @request PUT:/3/user/bank-accounts/{id}/
         * @secure
         */
        userBankAccountsUpdate: (id: string, data: UserBankAccount, params?: RequestParams) => Promise<UserBankAccountResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserBankAccountsPartialUpdate
         * @summary Partially update bank account
         * @request PATCH:/3/user/bank-accounts/{id}/
         * @secure
         */
        userBankAccountsPartialUpdate: (id: string, data: PatchedUserBankAccount, params?: RequestParams) => Promise<UserBankAccountResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserBankAccountsDestroy
         * @summary Delete bank account
         * @request DELETE:/3/user/bank-accounts/{id}/
         * @secure
         */
        userBankAccountsDestroy: (id: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags user
         * @name UserBankAccountsAccountCurrenciesList
         * @summary List bank-accounts account currencies
         * @request GET:/3/user/bank-accounts/{id}/account-currencies/
         * @secure
         */
        userBankAccountsAccountCurrenciesList: (id: string, params?: RequestParams) => Promise<ReducedAccountAssetListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserBankAccountsAccountCurrenciesCreate
         * @summary Create bank-accounts account currency
         * @request POST:/3/user/bank-accounts/{id}/account-currencies/
         * @secure
         */
        userBankAccountsAccountCurrenciesCreate: (id: string, data: CreateUserBankAccountAccountAsset, params?: RequestParams) => Promise<ReducedAccountAssetResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserBankAccountsAccountCurrenciesRetrieve
         * @summary Retrieve bank-account account currency
         * @request GET:/3/user/bank-accounts/{id}/account-currencies/{account_currency_id}/
         * @secure
         */
        userBankAccountsAccountCurrenciesRetrieve: (accountCurrencyId: string, id: string, params?: RequestParams) => Promise<AccountAssetResponse$1>;
        /**
         * No description
         *
         * @tags user
         * @name UserBankAccountsAccountCurrenciesDestroy
         * @summary Delete bank-account account currency
         * @request DELETE:/3/user/bank-accounts/{id}/account-currencies/{account_currency_id}/
         * @secure
         */
        userBankAccountsAccountCurrenciesDestroy: (accountCurrencyId: string, id: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags user
         * @name UserBankAccountsCurrenciesList
         * @summary List bank account currencies
         * @request GET:/3/user/bank-accounts/{id}/currencies/
         * @deprecated
         * @secure
         */
        userBankAccountsCurrenciesList: (id: string, params?: RequestParams) => Promise<UserBankAccountAssetListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserBankAccountsCurrenciesCreate
         * @summary Create bank account currency
         * @request POST:/3/user/bank-accounts/{id}/currencies/
         * @deprecated
         * @secure
         */
        userBankAccountsCurrenciesCreate: (id: string, data: CreateUserBankAccountAsset, params?: RequestParams) => Promise<UserBankAccountAssetResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserBankAccountsCurrenciesRetrieve
         * @summary Retrieve bank account currency
         * @request GET:/3/user/bank-accounts/{id}/currencies/{code}/
         * @deprecated
         * @secure
         */
        userBankAccountsCurrenciesRetrieve: (code: string, id: string, params?: RequestParams) => Promise<UserBankAccountAssetResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserBankAccountsCurrenciesDestroy
         * @summary Delete bank account currency
         * @request DELETE:/3/user/bank-accounts/{id}/currencies/{code}/
         * @deprecated
         * @secure
         */
        userBankAccountsCurrenciesDestroy: (code: string, id: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags user
         * @name UserCryptoAccountsList
         * @summary List crypto accounts
         * @request GET:/3/user/crypto-accounts/
         * @secure
         */
        userCryptoAccountsList: (query: UserCryptoAccountsListParams, params?: RequestParams) => Promise<CryptoAccountListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserCryptoAccountsCreate
         * @summary Create crypto account
         * @request POST:/3/user/crypto-accounts/
         * @secure
         */
        userCryptoAccountsCreate: (data: CreateCryptoAccount, params?: RequestParams) => Promise<CryptoAccountResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserCryptoAccountsRetrieve
         * @summary Retrieve crypto account
         * @request GET:/3/user/crypto-accounts/{id}/
         * @secure
         */
        userCryptoAccountsRetrieve: (id: string, params?: RequestParams) => Promise<CryptoAccountResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserCryptoAccountsUpdate
         * @summary Update crypto account
         * @request PUT:/3/user/crypto-accounts/{id}/
         * @secure
         */
        userCryptoAccountsUpdate: (id: string, data: CryptoAccount, params?: RequestParams) => Promise<CryptoAccountResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserCryptoAccountsPartialUpdate
         * @summary Partially update crypto account
         * @request PATCH:/3/user/crypto-accounts/{id}/
         * @secure
         */
        userCryptoAccountsPartialUpdate: (id: string, data: PatchedCryptoAccount, params?: RequestParams) => Promise<CryptoAccountResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserCryptoAccountsDestroy
         * @summary Delete crypto account
         * @request DELETE:/3/user/crypto-accounts/{id}/
         * @secure
         */
        userCryptoAccountsDestroy: (id: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags user
         * @name UserCryptoAccountsAccountCurrenciesList
         * @summary List crypto-accounts account currencies
         * @request GET:/3/user/crypto-accounts/{id}/account-currencies/
         * @secure
         */
        userCryptoAccountsAccountCurrenciesList: (id: string, params?: RequestParams) => Promise<ReducedAccountAssetListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserCryptoAccountsAccountCurrenciesCreate
         * @summary Create crypto-accounts account currency
         * @request POST:/3/user/crypto-accounts/{id}/account-currencies/
         * @secure
         */
        userCryptoAccountsAccountCurrenciesCreate: (id: string, data: CreateCryptoAccountAccountAsset, params?: RequestParams) => Promise<ReducedAccountAssetResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserCryptoAccountsAccountCurrenciesRetrieve
         * @summary Retrieve crypto-account account currency
         * @request GET:/3/user/crypto-accounts/{id}/account-currencies/{account_currency_id}/
         * @secure
         */
        userCryptoAccountsAccountCurrenciesRetrieve: (accountCurrencyId: string, id: string, params?: RequestParams) => Promise<AccountAssetResponse$1>;
        /**
         * No description
         *
         * @tags user
         * @name UserCryptoAccountsAccountCurrenciesDestroy
         * @summary Delete crypto-account account currency
         * @request DELETE:/3/user/crypto-accounts/{id}/account-currencies/{account_currency_id}/
         * @secure
         */
        userCryptoAccountsAccountCurrenciesDestroy: (accountCurrencyId: string, id: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags user
         * @name UserCryptoAccountsCurrenciesList
         * @summary List crypto account currencies
         * @request GET:/3/user/crypto-accounts/{id}/currencies/
         * @deprecated
         * @secure
         */
        userCryptoAccountsCurrenciesList: (id: string, params?: RequestParams) => Promise<CryptoAccountAssetListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserCryptoAccountsCurrenciesCreate
         * @summary Create crypto account currency
         * @request POST:/3/user/crypto-accounts/{id}/currencies/
         * @deprecated
         * @secure
         */
        userCryptoAccountsCurrenciesCreate: (id: string, data: CreateCryptoAccountAsset, params?: RequestParams) => Promise<CryptoAccountAssetResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserCryptoAccountsCurrenciesRetrieve
         * @summary Retrieve crypto account currency
         * @request GET:/3/user/crypto-accounts/{id}/currencies/{code}/
         * @deprecated
         * @secure
         */
        userCryptoAccountsCurrenciesRetrieve: (code: string, id: string, params?: RequestParams) => Promise<CryptoAccountAssetResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserCryptoAccountsCurrenciesDestroy
         * @summary Delete crypto account currency
         * @request DELETE:/3/user/crypto-accounts/{id}/currencies/{code}/
         * @deprecated
         * @secure
         */
        userCryptoAccountsCurrenciesDestroy: (code: string, id: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags user
         * @name UserDevicesList
         * @summary List devices
         * @request GET:/3/user/devices/
         * @secure
         */
        userDevicesList: (query: UserDevicesListParams, params?: RequestParams) => Promise<DeviceListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserDevicesCreate
         * @summary Create device
         * @request POST:/3/user/devices/
         * @secure
         */
        userDevicesCreate: (data: CreateDevice, params?: RequestParams) => Promise<DeviceResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserDevicesAppsRetrieve
         * @summary Retrieve device app
         * @request GET:/3/user/devices/{device_id}/apps/{app_id}/
         * @secure
         */
        userDevicesAppsRetrieve: (appId: string, deviceId: string, params?: RequestParams) => Promise<DeviceAppResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserDevicesAppsUpdate
         * @summary Update device app
         * @request PUT:/3/user/devices/{device_id}/apps/{app_id}/
         * @secure
         */
        userDevicesAppsUpdate: (appId: string, deviceId: string, data: DeviceApp$1, params?: RequestParams) => Promise<DeviceAppResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserDevicesAppsPartialUpdate
         * @summary Partially update device app
         * @request PATCH:/3/user/devices/{device_id}/apps/{app_id}/
         * @secure
         */
        userDevicesAppsPartialUpdate: (appId: string, deviceId: string, data: PatchedDeviceApp, params?: RequestParams) => Promise<DeviceAppResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserDevicesAppsDestroy
         * @summary Delete device app
         * @request DELETE:/3/user/devices/{device_id}/apps/{app_id}/
         * @secure
         */
        userDevicesAppsDestroy: (appId: string, deviceId: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags user
         * @name UserDevicesRetrieve
         * @summary Retrieve device
         * @request GET:/3/user/devices/{id}/
         * @secure
         */
        userDevicesRetrieve: (id: string, params?: RequestParams) => Promise<DeviceResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserDevicesUpdate
         * @summary Update device
         * @request PUT:/3/user/devices/{id}/
         * @secure
         */
        userDevicesUpdate: (id: string, data: Device, params?: RequestParams) => Promise<DeviceResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserDevicesPartialUpdate
         * @summary Partially update device
         * @request PATCH:/3/user/devices/{id}/
         * @secure
         */
        userDevicesPartialUpdate: (id: string, data: PatchedDevice, params?: RequestParams) => Promise<DeviceResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserDevicesDestroy
         * @summary Delete device
         * @request DELETE:/3/user/devices/{id}/
         * @secure
         */
        userDevicesDestroy: (id: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags user
         * @name UserDevicesAppsList
         * @summary List device apps
         * @request GET:/3/user/devices/{id}/apps/
         * @secure
         */
        userDevicesAppsList: ({ id, ...query }: UserDevicesAppsListParams, params?: RequestParams) => Promise<PaginatedDeviceAppListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserDevicesAppsCreate
         * @summary Create device app
         * @request POST:/3/user/devices/{id}/apps/
         * @secure
         */
        userDevicesAppsCreate: (id: string, data: CreateDeviceApp, params?: RequestParams) => Promise<DeviceAppResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserDocumentsList
         * @summary List documents
         * @request GET:/3/user/documents/
         * @secure
         */
        userDocumentsList: (query: UserDocumentsListParams, params?: RequestParams) => Promise<PaginatedUserDocumentListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserDocumentsCreate
         * @summary Create document
         * @request POST:/3/user/documents/
         * @secure
         */
        userDocumentsCreate: (data: UserCreateDocument, params?: RequestParams) => Promise<UserDocumentResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserDocumentsRetrieve
         * @summary Retrieve document
         * @request GET:/3/user/documents/{id}/
         * @secure
         */
        userDocumentsRetrieve: (id: string, params?: RequestParams) => Promise<UserDocumentResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserDocumentsDestroy
         * @request DELETE:/3/user/documents/{id}/
         * @secure
         */
        userDocumentsDestroy: (id: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags user
         * @name UserEmailsList
         * @summary List emails
         * @request GET:/3/user/emails/
         * @secure
         */
        userEmailsList: (params?: RequestParams) => Promise<EmailListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserEmailsCreate
         * @summary Create email
         * @request POST:/3/user/emails/
         * @secure
         */
        userEmailsCreate: (data: CreateEmail, params?: RequestParams) => Promise<EmailResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserEmailsRetrieve
         * @summary Retrieve email
         * @request GET:/3/user/emails/{id}/
         * @secure
         */
        userEmailsRetrieve: (id: string, params?: RequestParams) => Promise<EmailResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserEmailsUpdate
         * @summary Update email
         * @request PUT:/3/user/emails/{id}/
         * @secure
         */
        userEmailsUpdate: (id: string, data: Email, params?: RequestParams) => Promise<EmailResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserEmailsPartialUpdate
         * @summary Partially update email
         * @request PATCH:/3/user/emails/{id}/
         * @secure
         */
        userEmailsPartialUpdate: (id: string, data: PatchedEmail, params?: RequestParams) => Promise<EmailResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserEmailsDestroy
         * @summary Delete email
         * @request DELETE:/3/user/emails/{id}/
         * @secure
         */
        userEmailsDestroy: (id: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags user
         * @name UserLegalTermsList
         * @summary List legal terms
         * @request GET:/3/user/legal-terms/
         * @secure
         */
        userLegalTermsList: (query: UserLegalTermsListParams, params?: RequestParams) => Promise<PaginatedLegalTermListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserLegalTermsRetrieve
         * @summary Retrieve legal term
         * @request GET:/3/user/legal-terms/{id}/
         * @secure
         */
        userLegalTermsRetrieve: (id: string, params?: RequestParams) => Promise<LegalTermResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserLegalTermsVersionsList
         * @summary List legal term version
         * @request GET:/3/user/legal-terms/{id}/versions/
         * @secure
         */
        userLegalTermsVersionsList: ({ id, ...query }: UserLegalTermsVersionsListParams, params?: RequestParams) => Promise<PaginatedLegalTermVersionListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserLegalTermsVersionsRetrieve
         * @summary Retrieve legal term version
         * @request GET:/3/user/legal-terms/{term_id}/versions/{version_id}/
         * @secure
         */
        userLegalTermsVersionsRetrieve: (termId: string, versionId: string, params?: RequestParams) => Promise<LegalTermVersionResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserLegalTermsVersionsUpdate
         * @summary Update legal term version
         * @request PUT:/3/user/legal-terms/{term_id}/versions/{version_id}/
         * @secure
         */
        userLegalTermsVersionsUpdate: (termId: string, versionId: string, data: UpdateLegalTermVersion, params?: RequestParams) => Promise<LegalTermVersionResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserLegalTermsVersionsPartialUpdate
         * @summary Partially update legal term version
         * @request PATCH:/3/user/legal-terms/{term_id}/versions/{version_id}/
         * @secure
         */
        userLegalTermsVersionsPartialUpdate: (termId: string, versionId: string, data: PatchedUpdateLegalTermVersion, params?: RequestParams) => Promise<LegalTermVersionResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserMessagesList
         * @summary List messages
         * @request GET:/3/user/messages/
         * @secure
         */
        userMessagesList: (query: UserMessagesListParams, params?: RequestParams) => Promise<PaginatedUserMessageListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserMessagesRetrieve
         * @summary Retrieve message
         * @request GET:/3/user/messages/{id}/
         * @secure
         */
        userMessagesRetrieve: (id: string, params?: RequestParams) => Promise<UserMessageResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserMobilesList
         * @summary List mobiles
         * @request GET:/3/user/mobiles/
         * @secure
         */
        userMobilesList: (params?: RequestParams) => Promise<MobileListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserMobilesCreate
         * @summary Create mobile
         * @request POST:/3/user/mobiles/
         * @secure
         */
        userMobilesCreate: (data: CreateMobile, params?: RequestParams) => Promise<MobileResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserMobilesRetrieve
         * @summary Retrieve mobile
         * @request GET:/3/user/mobiles/{id}/
         * @secure
         */
        userMobilesRetrieve: (id: string, params?: RequestParams) => Promise<MobileResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserMobilesUpdate
         * @summary Update mobile
         * @request PUT:/3/user/mobiles/{id}/
         * @secure
         */
        userMobilesUpdate: (id: string, data: Mobile, params?: RequestParams) => Promise<MobileResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserMobilesPartialUpdate
         * @summary Partially update mobile
         * @request PATCH:/3/user/mobiles/{id}/
         * @secure
         */
        userMobilesPartialUpdate: (id: string, data: PatchedMobile, params?: RequestParams) => Promise<MobileResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserMobilesDestroy
         * @summary Delete mobile
         * @request DELETE:/3/user/mobiles/{id}/
         * @secure
         */
        userMobilesDestroy: (id: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags user
         * @name UserWalletAccountsList
         * @summary List wallet accounts
         * @request GET:/3/user/wallet-accounts/
         * @secure
         */
        userWalletAccountsList: (query: UserWalletAccountsListParams, params?: RequestParams) => Promise<UserWalletAccountListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserWalletAccountsCreate
         * @summary Create wallet account
         * @request POST:/3/user/wallet-accounts/
         * @secure
         */
        userWalletAccountsCreate: (data: UserCreateWalletAccount, params?: RequestParams) => Promise<UserWalletAccountResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserWalletAccountsRetrieve
         * @summary Retrieve wallet account
         * @request GET:/3/user/wallet-accounts/{id}/
         * @secure
         */
        userWalletAccountsRetrieve: (id: string, params?: RequestParams) => Promise<UserWalletAccountResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserWalletAccountsUpdate
         * @summary Update wallet account
         * @request PUT:/3/user/wallet-accounts/{id}/
         * @secure
         */
        userWalletAccountsUpdate: (id: string, data: UserWalletAccount, params?: RequestParams) => Promise<UserWalletAccountResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserWalletAccountsPartialUpdate
         * @summary Partially update wallet account
         * @request PATCH:/3/user/wallet-accounts/{id}/
         * @secure
         */
        userWalletAccountsPartialUpdate: (id: string, data: PatchedUserWalletAccount, params?: RequestParams) => Promise<UserWalletAccountResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserWalletAccountsDestroy
         * @summary Delete wallet account
         * @request DELETE:/3/user/wallet-accounts/{id}/
         * @secure
         */
        userWalletAccountsDestroy: (id: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags user
         * @name UserWalletAccountsAccountCurrenciesList
         * @summary List wallet-accounts account currencies
         * @request GET:/3/user/wallet-accounts/{id}/account-currencies/
         * @secure
         */
        userWalletAccountsAccountCurrenciesList: (id: string, params?: RequestParams) => Promise<ReducedAccountAssetListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserWalletAccountsAccountCurrenciesCreate
         * @summary Create wallet-accounts account currency
         * @request POST:/3/user/wallet-accounts/{id}/account-currencies/
         * @secure
         */
        userWalletAccountsAccountCurrenciesCreate: (id: string, data: CreateUserWalletAccountAccountAsset, params?: RequestParams) => Promise<ReducedAccountAssetResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserWalletAccountsAccountCurrenciesRetrieve
         * @summary Retrieve wallet-account account currency
         * @request GET:/3/user/wallet-accounts/{id}/account-currencies/{account_currency_id}/
         * @secure
         */
        userWalletAccountsAccountCurrenciesRetrieve: (accountCurrencyId: string, id: string, params?: RequestParams) => Promise<AccountAssetResponse$1>;
        /**
         * No description
         *
         * @tags user
         * @name UserWalletAccountsAccountCurrenciesDestroy
         * @summary Delete wallet-account account currency
         * @request DELETE:/3/user/wallet-accounts/{id}/account-currencies/{account_currency_id}/
         * @secure
         */
        userWalletAccountsAccountCurrenciesDestroy: (accountCurrencyId: string, id: string, params?: RequestParams) => Promise<ActionResponse$a>;
        /**
         * No description
         *
         * @tags user
         * @name UserWalletAccountsCurrenciesList
         * @summary List wallet account currencies
         * @request GET:/3/user/wallet-accounts/{id}/currencies/
         * @deprecated
         * @secure
         */
        userWalletAccountsCurrenciesList: ({ id, ...query }: UserWalletAccountsCurrenciesListParams, params?: RequestParams) => Promise<PaginatedUserWalletAccountAssetListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserWalletAccountsCurrenciesCreate
         * @summary Create wallet account currency
         * @request POST:/3/user/wallet-accounts/{id}/currencies/
         * @deprecated
         * @secure
         */
        userWalletAccountsCurrenciesCreate: (id: string, data: CreateUserWalletAccountAsset, params?: RequestParams) => Promise<UserWalletAccountAssetResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserWalletAccountsCurrenciesRetrieve
         * @summary Retrieve wallet account currency
         * @request GET:/3/user/wallet-accounts/{id}/currencies/{code}/
         * @deprecated
         * @secure
         */
        userWalletAccountsCurrenciesRetrieve: (code: string, id: string, params?: RequestParams) => Promise<UserWalletAccountAssetResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserWalletAccountsCurrenciesDestroy
         * @summary Delete wallet account currency
         * @request DELETE:/3/user/wallet-accounts/{id}/currencies/{code}/
         * @deprecated
         * @secure
         */
        userWalletAccountsCurrenciesDestroy: (code: string, id: string, params?: RequestParams) => Promise<ActionResponse$a>;
    };
}

interface StorageAdapter$1 {
    getItem(key: string): Promise<string | null>;
    setItem(key: string, value: string): Promise<void>;
    removeItem(key: string): Promise<void>;
}
interface AuthSession {
    user: {
        id: string;
        [key: string]: any;
    };
    token: string;
    refresh_token: string;
    challenges: any[];
    expires: number;
}
type UserSession$1 = AuthSession;
type SessionListener = (session: AuthSession | null) => void;
type ErrorListener = (error: Error | null) => void;

/**
 * Rehive Platform User API with improved Developer Experience (DX).
 *
 * This wrapper class addresses a common DX issue with the generated Platform APIs.
 * The swagger-typescript-api generator creates APIs with nested namespaces based on the
 * OpenAPI paths. Since Rehive platform endpoints start with "/3/", they get grouped
 * under a "v3" namespace, requiring developers to write:
 *
 *   await platformApi.v3.authLogin(data)
 *
 * This wrapper automatically proxies all v3 methods to the root level, allowing:
 *
 *   await platformApi.authLogin(data)  // Much cleaner!
 *
 * The proxying happens dynamically at construction time, so all generated methods
 * are available without the v3 prefix while maintaining full TypeScript support.
 */
declare class RehivePlatformUserApi<SecurityDataType = unknown> extends Api$c<SecurityDataType> {
    [key: string]: any;
    constructor(config?: any);
}

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AccountAsset {
    id: string;
    balance: number;
    available_balance: number;
    account: ReducedAccount;
    currency: ReducedAsset;
    metadata: Record<string, any>;
    active: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AccountAssetLimit {
    id: number;
    /** Convert the Limit value from Decimal to int based on asset divisibility */
    value: number;
    /**
     * * `max` - Maximum
     * * `day_max` - Maximum per day
     * * `month_max` - Maximum per month
     * * `min` - Minimum
     * * `overdraft` - Overdraft
     */
    type: "max" | "day_max" | "month_max" | "min" | "overdraft";
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string;
    created: number;
    updated: number;
}
interface AccountAssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AccountAsset;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AccountAssetSettings {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: ReducedTransactionSubtype[];
}
interface AccountAssetSettingsResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AccountAssetSettings;
}
/** This serializer can be used if only a `status` is required in the response. */
interface ActionResponse$9 {
    status: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminAccessControlRule {
    id: number;
    /**
     * * `allow` - Allow
     * * `deny` - Deny
     */
    action: "allow" | "deny";
    /** * `ip` - Ip */
    type: "ip";
    /** @maxLength 100 */
    value: string;
    /** @maxLength 50 */
    label?: string | null;
    /**
     * A condensed user serializer showing only the necessary user information
     * in order to identifiy the user.
     */
    user?: ReducedUserInfo;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    group?: AdminReducedGroup;
    created: number;
    updated: number;
}
interface AdminAccessControlRuleResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminAccessControlRule;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminAccount {
    reference: string;
    /**
     * @maxLength 200
     * @default "default"
     */
    name?: string;
    definition: string | null;
    /** @maxLength 200 */
    label?: string | null;
    primary?: boolean;
    recon?: boolean;
    user: ReducedUserInfo;
    currencies: AdminReducedAccountAccountAsset[];
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminAccountAccountAsset {
    id: string;
    balance: number;
    available_balance: number;
    currency: ReducedAsset;
    limits: AccountAssetLimit[];
    fees: AdminAccountAssetFee[];
    metadata?: Record<string, any>;
    active: boolean;
    settings: AccountAssetSettings;
    subtypes: TransactionSubtype[];
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminAccountAccountAssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminAccountAccountAsset;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminAccountAccountAssetSettingsUpdate {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: number[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminAccountAsset {
    id: string;
    balance: number;
    available_balance: number;
    currency: ReducedAsset;
    account: ReducedAccount;
    /**
     * A condensed user serializer showing only the necessary user information
     * in order to identifiy the user.
     */
    user: ReducedUserInfo;
    metadata: Record<string, any>;
    active: boolean;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminAccountAssetFee {
    id: number;
    name: string | null;
    description: string | null;
    /** Convert the Fee value from Decimal to int based on asset divisibility */
    value: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    created: number;
    updated: number;
    account: string;
    asset: string;
    debit_account: string | null;
    credit_account: string | null;
    debit_subtype: string | null;
    credit_subtype: string | null;
    inferred: boolean | null;
    archived: boolean | null;
}
type AdminAccountAssetFeeList = AdminAccountAssetFee[];
interface AdminAccountAssetFeeListResponse {
    status: string;
    data: AdminAccountAssetFeeList;
}
interface AdminAccountAssetFeeResponse {
    status: string;
    data: AdminAccountAssetFee;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminAccountAssetLimit {
    id: number;
    /** Convert the Limit value from Decimal to int based on asset divisibility */
    value: number;
    /**
     * * `max` - Maximum
     * * `day_max` - Maximum per day
     * * `month_max` - Maximum per month
     * * `min` - Minimum
     * * `overdraft` - Overdraft
     */
    type: "max" | "day_max" | "month_max" | "min" | "overdraft";
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string;
    created: number;
    updated: number;
}
interface AdminAccountAssetLimitResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminAccountAssetLimit;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminAccountDefinition {
    /** @maxLength 200 */
    name: string;
    /** @maxLength 200 */
    label?: string | null;
    recon?: boolean;
    groups: AdminAccountDefinitionGroup[];
    archived?: boolean;
    updated: number;
    created: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminAccountDefinitionGroup {
    group: ReducedGroup;
    default: boolean;
    primary: boolean;
    currencies: AdminAccountDefinitionGroupAsset[];
    archived: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminAccountDefinitionGroupAsset {
    currency: ReducedAsset;
    archived: boolean;
    created: number;
    updated: number;
}
interface AdminAccountDefinitionGroupAssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminAccountDefinitionGroupAsset;
}
interface AdminAccountDefinitionGroupResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminAccountDefinitionGroup;
}
interface AdminAccountDefinitionResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminAccountDefinition;
}
interface AdminAccountResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminAccount;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminAppendTransactionCollectionMultiTransaction {
    transactions: AdminAppendTransactionCollectionTransaction[];
}
/**
 * This removed the status so that when appending to an existing collection
 * the status cannot be set manually.
 */
interface AdminAppendTransactionCollectionTransaction {
    /** @maxLength 64 */
    id?: string;
    /** @maxLength 64 */
    parent?: string;
    /** @maxLength 64 */
    partner?: string;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    amount: number;
    currency: string;
    account?: string | null;
    subtype?: string | null;
    /** @maxLength 100 */
    reference?: string | null;
    /**
     * @maxLength 100
     * @default ""
     */
    note?: string;
    metadata?: Record<string, any>;
    user?: string;
    /** @default false */
    inclusive?: boolean;
    /** @min 0 */
    expires?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminAsset$2 {
    code: string | null;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    divisibility: number;
    /** @format uri */
    icon?: string | null;
    manager: ManagerUser | null;
    /** @maxItems 20 */
    manager_conditions?: Record<string, any>[] | null;
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminAssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminAsset$2;
}
interface AdminAuthToken {
    token_key: string;
    user: ReducedUserInfo;
    expires: number;
    created: number;
}
interface AdminAuthTokenResponse {
    status: string;
    data: AdminAuthToken;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminAuthenticatorRule {
    id: number;
    /**
     * * `authentication` - Authentication
     * * `authorization` - Authorization
     * * `setup` - Setup
     */
    type: "authentication" | "authorization" | "setup";
    /**
     * * `ephemeral` - Ephemeral
     * * `durable` - Durable
     * * `permanent` - Permanent
     */
    durability: "ephemeral" | "durable" | "permanent";
    authenticator_types: ("totp" | "sms" | "static")[];
    permissions: Permission[];
    group: ReducedGroup;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    duration?: number | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    session_age?: number | null;
    created: number;
    updated: number;
}
interface AdminAuthenticatorRuleResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminAuthenticatorRule;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompany$9 {
    id: string;
    /** @maxLength 100 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    website?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    support_website?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    documentation_website?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    support_email?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @format uri */
    logo?: string | null;
    /** @format uri */
    icon?: string | null;
    address: AdminCompanyAddress;
    settings: CompanySettings;
    services: ReducedService[];
    public?: boolean;
    metadata?: Record<string, any>;
    /**
     * * `test` - Test
     * * `production` - Production
     */
    mode: "test" | "production";
    /**
     * * `pending` - Pending
     * * `active` - Active
     * * `restricted` - Restricted
     * * `suspended` - Suspended
     */
    status?: "pending" | "active" | "restricted" | "suspended";
    created: number;
    updated: number;
    /** @format email */
    system_email: string;
    owner: ReducedUserInfo;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompanyAddress {
    /** @maxLength 200 */
    line_1?: string | null;
    /** @maxLength 200 */
    line_2?: string | null;
    /** @maxLength 100 */
    city?: string | null;
    /** @maxLength 100 */
    state_province?: string | null;
    country?: string | null;
    /** @maxLength 10 */
    postal_code?: string | null;
}
interface AdminCompanyAddressResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminCompanyAddress;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompanyBankAccount {
    id: number;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 200 */
    number?: string | null;
    /** @maxLength 200 */
    type?: string | null;
    /** @maxLength 200 */
    bank_name?: string | null;
    /** @maxLength 50 */
    bank_code?: string | null;
    /** @maxLength 3 */
    bank_currency?: string | null;
    /** @maxLength 50 */
    branch_code?: string | null;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    branch_address?: CompanyBankBranchAddress;
    /** @maxLength 50 */
    routing_number?: string | null;
    /** @maxLength 16 */
    swift?: string | null;
    /** @maxLength 50 */
    iban?: string | null;
    /** @maxLength 16 */
    bic?: string | null;
    metadata?: Record<string, any>;
    currencies: ReducedAsset[];
    /** @default false */
    archived?: boolean;
    /** * `deposit` - Deposit */
    action?: "deposit" | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompanyBankAccountAsset {
    /** @maxLength 30 */
    code?: string | null;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminCompanyBankAccountAssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminCompanyBankAccountAsset;
}
interface AdminCompanyBankAccountResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminCompanyBankAccount;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompanyLink {
    id: number;
    key: string | null;
    counterparty: AdminCompanyLinkCounterparty;
    /**
     * * `pending` - Pending
     * * `complete` - Complete
     */
    status: "pending" | "complete";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompanyLinkCounterparty {
    company: ReducedCompany;
    /**
     * * `pending` - Pending
     * * `complete` - Complete
     */
    status: "pending" | "complete";
}
interface AdminCompanyLinkResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminCompanyLink;
}
interface AdminCompanyResponse$9 {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminCompany$9;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompanySettings {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: CompanyDisallowedTransactionSubtype[];
    require_transaction_subtypes?: boolean;
    require_verification?: boolean;
    allow_registrations?: boolean;
    allow_overdrafts?: boolean;
    allow_session_durations?: boolean;
    require_registration?: boolean;
    /**
     * @min 300
     * @max 2678400
     */
    default_session_duration?: number;
    /**
     * @min 300
     * @max 2678400
     */
    default_transaction_lifespan?: number;
    require_terms_and_conditions?: boolean;
    require_privacy_policy?: boolean;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    account_reference_length?: number;
    /** @format uri */
    password_reset_url?: string | null;
    /** @format uri */
    password_set_url?: string | null;
    /** @format uri */
    email_verification_url?: string | null;
    /** @format uri */
    deactivate_verification_url?: string | null;
    /** @format uri */
    request_delete_verification_url?: string | null;
    /** @format uri */
    terms_and_conditions_url?: string | null;
    /** @format uri */
    privacy_policy_url?: string | null;
    /** @maxItems 249 */
    nationalities: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
    /** @maxItems 249 */
    residencies: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
}
interface AdminCompanySettingsResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminCompanySettings;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompanyWalletAccount {
    id: number;
    /** @maxLength 200 */
    username?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    email?: string | null;
    /** @maxLength 24 */
    mobile?: string | null;
    /** @maxLength 50 */
    name?: string | null;
    /**
     * * `paypal` - Paypal
     * * `venmo` - Venmo
     * * `other` - Other
     */
    type?: "paypal" | "venmo" | "other";
    metadata?: Record<string, any>;
    currencies: ReducedAsset[];
    /** * `deposit` - Deposit */
    action?: "deposit" | null;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompanyWalletAccountAsset {
    /** @maxLength 30 */
    code?: string | null;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminCompanyWalletAccountAssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminCompanyWalletAccountAsset;
}
interface AdminCompanyWalletAccountResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminCompanyWalletAccount;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateAccessControlRule {
    id: number;
    /**
     * * `allow` - Allow
     * * `deny` - Deny
     */
    action: "allow" | "deny";
    /** * `ip` - Ip */
    type: "ip";
    /** @maxLength 100 */
    value: string;
    /** @maxLength 50 */
    label?: string | null;
    user?: string | null;
    group?: string | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateAccount {
    /** @maxLength 50 */
    reference?: string | null;
    /**
     * @maxLength 200
     * @default "default"
     */
    name?: string;
    definition: string | null;
    /** @maxLength 200 */
    label?: string | null;
    primary?: boolean;
    recon?: boolean;
    user?: string | null;
    currencies: AdminAccountAccountAsset[];
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminCreateAccountAccountAsset {
    currency: string;
    active?: boolean;
    metadata?: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateAccountAccountAssetFee {
    /** @maxLength 50 */
    name?: string | null;
    /** @min 0 */
    value?: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype?: string | null;
    /** @maxLength 250 */
    description?: string | null;
    debit_account?: string | null;
    credit_account?: string | null;
    debit_subtype?: string | null;
    credit_subtype?: string | null;
    inferred?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateAccountAccountAssetLimit {
    /** @min 0 */
    value: number;
    /**
     * * `max` - Maximum
     * * `day_max` - Maximum per day
     * * `month_max` - Maximum per month
     * * `min` - Minimum
     * * `overdraft` - Overdraft
     */
    type: "max" | "day_max" | "month_max" | "min" | "overdraft";
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateAccountDefinitionGroup {
    group: string;
    default?: boolean;
    primary?: boolean;
    currencies?: string[];
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateAccountDefinitionGroupAsset {
    currency: string;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateAsset$2 {
    /** @maxLength 30 */
    code?: string | null;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min 0
     * @max 18
     */
    divisibility: number;
    /** @format uri */
    icon?: string | null;
    manager?: string | null;
    manager_conditions?: Record<string, any>[] | null;
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateAuthToken {
    /** @min 0 */
    duration?: number | null;
    user: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateAuthenticatorRule {
    id: number;
    /**
     * * `authentication` - Authentication
     * * `authorization` - Authorization
     * * `setup` - Setup
     */
    type: "authentication" | "authorization" | "setup";
    /**
     * * `ephemeral` - Ephemeral
     * * `durable` - Durable
     * * `permanent` - Permanent
     */
    durability: "ephemeral" | "durable" | "permanent";
    authenticator_types: ("totp" | "sms" | "static")[];
    permissions?: (string | null)[];
    group?: string;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    duration?: number | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    session_age?: number | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateCompanyBankAccountAsset {
    currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateCompanyLink {
    id: number;
    key?: string;
    company?: string;
    /**
     * * `pending` - Pending
     * * `complete` - Complete
     */
    status: "pending" | "complete";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateCompanyWalletAccountAsset {
    currency: string;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface AdminCreateCreditTransaction {
    /** @maxLength 64 */
    id?: string;
    amount: number;
    currency: string;
    account?: string | null;
    subtype?: string | null;
    /** @maxLength 100 */
    reference?: string | null;
    /**
     * @maxLength 100
     * @default ""
     */
    note?: string;
    metadata?: Record<string, any>;
    user?: string;
    /** @default false */
    inclusive?: boolean;
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     * @default "Pending"
     */
    status?: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    fees?: AdminCreateTransactionFee[];
    /** @min 0 */
    expires?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateCryptoAccount {
    id: number;
    /** @maxLength 250 */
    address: string;
    /** @maxLength 50 */
    name?: string | null;
    code: string | null;
    /**
     * * `bitcoin` - Bitcoin
     * * `ethereum` - Ethereum
     * * `stellar` - Stellar
     * * `other` - Other
     */
    crypto_type?: "bitcoin" | "ethereum" | "stellar" | "other";
    /**
     * * `testnet` - Testnet
     * * `mainnet` - Mainnet
     * @default "testnet"
     */
    network?: "testnet" | "mainnet";
    metadata?: Record<string, any>;
    user: string;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    currencies: ReducedAsset[];
    account_currencies: ReducedAccountAsset[];
    /** @default false */
    archived?: boolean;
    /**
     * * `withdraw` - Withdraw
     * * `deposit` - Deposit
     * @default "withdraw"
     */
    action?: "withdraw" | "deposit" | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateCryptoAccountAccountAsset {
    account_currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateCryptoAccountAsset {
    currency: string;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface AdminCreateDebitTransaction {
    /** @maxLength 64 */
    id?: string;
    amount: number;
    currency: string;
    account?: string | null;
    subtype?: string | null;
    /** @maxLength 100 */
    reference?: string | null;
    /**
     * @maxLength 100
     * @default ""
     */
    note?: string;
    metadata?: Record<string, any>;
    user?: string;
    /** @default false */
    inclusive?: boolean;
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     * @default "Pending"
     */
    status?: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    fees?: AdminCreateTransactionFee[];
    /** @min 0 */
    expires?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateDevice {
    user: string;
    id: number;
    /** @maxLength 64 */
    imei: string;
    /** @maxLength 30 */
    name?: string | null;
    apps: DeviceApp[];
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateDeviceApp {
    id: number;
    /** @maxLength 30 */
    name?: string | null;
    /** * `expo` - Expo */
    type: "expo";
    /** @maxLength 100 */
    token?: string | null;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateEmail {
    user: string;
    id: number;
    /**
     * @format email
     * @maxLength 254
     */
    email: string;
    primary?: boolean;
    verified?: boolean;
    /** @default false */
    temporary: boolean | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateExport {
    /**
     * * `account` - Account
     * * `account_currency` - Account_Currency
     * * `transaction` - Transaction
     * * `user` - User
     */
    resource: "account" | "account_currency" | "transaction" | "user";
    page_size?: number | null;
    query?: Record<string, any>;
    /**
     * * `json` - JSON
     * * `csv` - CSV
     */
    file_format?: "json" | "csv";
    user?: string;
    /**
     * * `admin` - Admin
     * * `user` - User
     */
    section: "admin" | "user";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateGroup {
    /** @maxLength 80 */
    name: string;
    /** @maxLength 80 */
    label?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @format uri */
    icon?: string | null;
    /**
     * * `admin` - Admin
     * * `user` - User
     */
    section?: "admin" | "user";
    default?: boolean;
    public?: boolean;
    listed?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateGroupFee {
    /** @maxLength 50 */
    name?: string | null;
    /** @min 0 */
    value?: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype?: string | null;
    /** @maxLength 250 */
    description?: string | null;
    debit_account?: string | null;
    credit_account?: string | null;
    debit_subtype?: string | null;
    credit_subtype?: string | null;
    inferred?: boolean;
    account_definition?: string | null;
    currency: string;
}
interface AdminCreateGroupPermission {
    /**
     * * `admin` - Admin
     * * `user` - User
     */
    section: "admin" | "user";
    /**
     * * `accesscontrolrule` - Access Control Rule
     * * `account` - Account
     * * `accountdefinition` - Account Definition
     * * `address` - Address
     * * `currency` - Currency
     * * `bankaccount` - Bank Account
     * * `company` - Company
     * * `cryptoaccount` - Crypto Account
     * * `device` - Device
     * * `document` - Document
     * * `email` - Email
     * * `group` - Group
     * * `jwt` - Jwt
     * * `legalterm` - Legal Term
     * * `mfa` - Mfa
     * * `mfarule` - Mfa Rule
     * * `mobile` - Mobile
     * * `notification` - Notification
     * * `oauthclient` - Oauth Client
     * * `permission` - Permission
     * * `request` - Request
     * * `service` - Service
     * * `token` - Token
     * * `transaction` - Transaction
     * * `transactionsubtypes` - Transaction Subtypes
     * * `user` - User
     * * `webhook` - Webhook
     */
    type: "accesscontrolrule" | "account" | "accountdefinition" | "address" | "currency" | "bankaccount" | "company" | "cryptoaccount" | "device" | "document" | "email" | "group" | "jwt" | "legalterm" | "mfa" | "mfarule" | "mobile" | "notification" | "oauthclient" | "permission" | "request" | "service" | "token" | "transaction" | "transactionsubtypes" | "user" | "webhook";
    /**
     * * `view` - View
     * * `add` - Add
     * * `change` - Change
     * * `delete` - Delete
     */
    level: "view" | "add" | "change" | "delete";
    properties?: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateGroupTierFee {
    /** @maxLength 50 */
    name?: string | null;
    /** @min 0 */
    value?: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype?: string | null;
    /** @maxLength 250 */
    description?: string | null;
    debit_account?: string | null;
    credit_account?: string | null;
    debit_subtype?: string | null;
    credit_subtype?: string | null;
    inferred?: boolean;
    account_definition?: string | null;
    currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateGroupTierLimit {
    /** @min 0 */
    value: number;
    /**
     * * `max` - Maximum
     * * `day_max` - Maximum per day
     * * `month_max` - Maximum per month
     * * `min` - Minimum
     * * `overdraft` - Overdraft
     */
    type: "max" | "day_max" | "month_max" | "min" | "overdraft";
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype?: string | null;
    currency: string;
    account_definition?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateMetric {
    /** @maxLength 50 */
    name?: string | null;
    /** @maxLength 50 */
    slug?: string | null;
    /**
     * * `account_count` - Account Count
     * * `transaction_count` - Transaction Count
     * * `transaction_complete_count` - Transaction Complete Count
     * * `transaction_failed_count` - Transaction Failed Count
     * * `transaction_pending_count` - Transaction Pending Count
     * * `transaction_complete_sum` - Transaction Complete Sum
     * * `transaction_failed_sum` - Transaction Failed Sum
     * * `transaction_pending_sum` - Transaction Pending Sum
     * * `transaction_balance_sum` - Transaction Balance Sum
     * * `transaction_available_balance_sum` - Transaction Available Balance Sum
     * * `user_count` - User Count
     * * `user_active_count` - User Active Count
     * * `user_transacted_in_30days_count` - User Transacted In 30Days Count
     */
    type: "account_count" | "transaction_count" | "transaction_complete_count" | "transaction_failed_count" | "transaction_pending_count" | "transaction_complete_sum" | "transaction_failed_sum" | "transaction_pending_sum" | "transaction_balance_sum" | "transaction_available_balance_sum" | "user_count" | "user_active_count" | "user_transacted_in_30days_count";
    /**
     * * `accumulate` - Accumulate
     * * `set` - Set
     */
    method?: "accumulate" | "set";
    currency?: string;
    timezone: string;
    query?: Record<string, any>;
    metadata?: Record<string, any>;
    user?: string;
    /**
     * * `admin` - Admin
     * * `user` - User
     */
    section: "admin" | "user";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateMobile {
    user: string;
    id: number;
    /** @maxLength 24 */
    number: string;
    primary?: boolean;
    verified?: boolean;
    /** @default false */
    archived?: boolean;
    /** @default false */
    temporary: boolean | null;
    created: number;
    updated: number;
}
interface AdminCreateMultiGroupPermission {
    permissions: AdminCreateGroupPermission[];
}
interface AdminCreateMultiTransaction {
    transactions: AdminExplicitCreateTransaction[];
}
interface AdminCreateMultiUserPermission {
    permissions: AdminCreateUserPermission[];
}
interface AdminCreateServicePermission {
    permissions: CreatePermission[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateStatement {
    account: string;
    timezone: string;
    /** @min 0 */
    start_date?: number | null;
    /** @min 0 */
    end_date?: number | null;
    metadata?: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateTransactionCollection {
    /** @maxLength 64 */
    id?: string;
    transactions: AdminCreateTransactionCollectionTransaction[];
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status?: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    checks?: ("type" | "verification" | "limits" | "balance")[] | null;
    /** @min 0 */
    expires?: number | null;
    created: number;
    updated: number;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface AdminCreateTransactionCollectionTransaction {
    /** @maxLength 64 */
    id?: string;
    /** @maxLength 64 */
    parent?: string;
    /** @maxLength 64 */
    partner?: string;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    amount: number;
    currency: string;
    account?: string | null;
    subtype?: string | null;
    /** @maxLength 100 */
    reference?: string | null;
    /**
     * @maxLength 100
     * @default ""
     */
    note?: string;
    metadata?: Record<string, any>;
    user?: string;
    /** @default false */
    inclusive?: boolean;
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status?: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    /** @min 0 */
    expires?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateTransactionFee {
    /** @maxLength 250 */
    description: string;
    /** @min 0 */
    amount: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateTransactionMessage {
    id: number;
    /**
     * * `admin` - Admin
     * * `user` - User
     */
    section?: "admin" | "user";
    /**
     * * `info` - Info
     * * `warning` - Warning
     * * `error` - Error
     */
    level?: "info" | "warning" | "error";
    message: string;
    author: ReducedUserInfo | null;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateTransactionSubtype {
    id: number;
    /** @maxLength 50 */
    name: string;
    /** @maxLength 50 */
    label?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    /**
     * * `partner` - Partner
     * * `single` - Single
     * @deprecated
     */
    usage_type?: "partner" | "single" | null;
    partner?: number | null;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateTransferTransaction {
    id: string;
    debit_account?: string | null;
    debit_subtype?: string | null;
    debit_metadata?: Record<string, any>;
    /**
     * @maxLength 100
     * @default ""
     */
    debit_note?: string;
    /** @maxLength 100 */
    debit_reference?: string | null;
    credit_account?: string | null;
    credit_subtype?: string | null;
    credit_metadata?: Record<string, any>;
    /**
     * @maxLength 100
     * @default ""
     */
    credit_note?: string;
    /** @maxLength 100 */
    credit_reference?: string | null;
    /** @maxLength 100 */
    recipient?: string | null;
    amount: number;
    currency: string;
    user?: string;
    /** @default false */
    inclusive?: boolean;
    debit_fees?: AdminCreateTransactionFee[];
    credit_fees?: AdminCreateTransactionFee[];
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status?: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    /** @min 0 */
    expires?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateUpdateAccountDefinition {
    /** @maxLength 200 */
    name: string;
    /** @maxLength 200 */
    label?: string | null;
    recon?: boolean;
    /** @default false */
    archived?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateUpdateLegalTerm {
    id: number;
    /**
     * * `system` - System
     * * `company` - Company
     */
    type: "system" | "company";
    /** @maxLength 100 */
    name: string;
    /** @maxLength 255 */
    description?: string | null;
    groups?: (string | null)[];
    versions: AdminReducedLegalTermVersion[];
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateUserAddress {
    id: number;
    /**
     * * `permanent` - Permanent
     * * `contact` - Contact
     * * `shipping` - Shipping
     * * `billing` - Billing
     * * `business` - Business
     */
    type?: "permanent" | "contact" | "shipping" | "billing" | "business";
    user: string;
    /** @maxLength 200 */
    line_1?: string | null;
    /** @maxLength 200 */
    line_2?: string | null;
    /** @maxLength 100 */
    city?: string | null;
    /** @maxLength 100 */
    state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    postal_code?: string | null;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    /** @default false */
    archived?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateUserBankAccount {
    id: number;
    user: string;
    /** @maxLength 200 */
    name?: string | null;
    owner?: BankOwner | null;
    /** @maxLength 200 */
    number?: string | null;
    /** @maxLength 200 */
    type?: string | null;
    /**
     * * `individual` - Individual
     * * `business` - Business
     */
    beneficiary_type?: "individual" | "business" | null;
    /** @maxLength 20 */
    clabe?: string | null;
    /** @maxLength 200 */
    bank_name?: string | null;
    /** @maxLength 50 */
    bank_code?: string | null;
    /** @maxLength 3 */
    bank_currency?: string | null;
    /** @maxLength 50 */
    branch_code?: string | null;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    branch_address?: AdminUserBankBranchAddress;
    /** @maxLength 255 */
    branch_address_text?: string | null;
    /** @maxLength 50 */
    routing_number?: string | null;
    /** @maxLength 16 */
    swift?: string | null;
    /** @maxLength 50 */
    iban?: string | null;
    /** @maxLength 16 */
    bic?: string | null;
    code: string | null;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    currencies: ReducedAsset[];
    account_currencies: ReducedAccountAsset[];
    /**
     * * `withdraw` - Withdraw
     * * `deposit` - Deposit
     * @default "withdraw"
     */
    action?: "withdraw" | "deposit" | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateUserBankAccountAccountAsset {
    account_currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateUserBankAccountAsset {
    currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateUserDocument {
    id: number;
    user: string;
    /** @format uri */
    file: string;
    type: number;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    metadata?: Record<string, any>;
    /** @maxLength 250 */
    note?: string | null;
    /** @default false */
    archived?: boolean;
    expires?: number | null;
}
interface AdminCreateUserGroup {
    group: string;
}
/**
 * Default user serializer for showing information regarding the user.
 * Information about user setting and permissions shown in
 * the ExtendedUserInfoSerializer
 */
interface AdminCreateUserInfo {
    /** @maxLength 64 */
    id?: string;
    /** @maxLength 150 */
    username?: string;
    /** @format email */
    email?: string;
    mobile?: string;
    /** @maxLength 50 */
    first_name?: string | null;
    /** @maxLength 50 */
    middle_name?: string | null;
    /** @maxLength 50 */
    last_name?: string | null;
    /** @format uri */
    profile?: string | null;
    /**
     * @maxItems 1
     * @minItems 0
     */
    groups?: (string | null)[];
    /** @default false */
    temporary: boolean | null;
    /** @maxLength 24 */
    id_number?: string | null;
    /** @format date */
    birth_date?: string | null;
    currency: ReducedAsset;
    account: string;
    /** @default 0 */
    balance: number;
    /** @default 0 */
    available_balance: number;
    company: string;
    owner: boolean;
    /** @maxLength 24 */
    language?: string;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    nationality?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    residency?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `male` - Male
     * * `female` - Female
     * * `other` - Other
     * * `not_specified` - Not Specified
     */
    gender?: "male" | "female" | "other" | "not_specified" | null;
    /**
     * * `mr` - Mr
     * * `mrs` - Mrs
     * * `ms` - Ms
     * * `mx` - Mx
     */
    title?: "mr" | "mrs" | "ms" | "mx" | null;
    /**
     * * `single` - Single
     * * `married` - Married
     * * `divorced` - Divorced
     * * `widowed` - Widowed
     */
    marital_status?: "single" | "married" | "divorced" | "widowed" | null;
    /** @maxLength 100 */
    fathers_name?: string | null;
    /** @maxLength 100 */
    mothers_name?: string | null;
    /** @maxLength 100 */
    grandfathers_name?: string | null;
    /** @maxLength 100 */
    grandmothers_name?: string | null;
    /** @maxLength 100 */
    central_bank_number?: string | null;
    metadata?: Record<string, any>;
    /** @maxLength 100 */
    timezone?: string | null;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    business_name?: string | null;
    /** @deprecated */
    verified: boolean;
    verification: UserVerification;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    created: number;
    updated: number;
    /** @default false */
    deactivated?: boolean;
    /**
     * * `retaining` - Retaining
     * * `delete_requested` - Delete Requested
     * * `deleted` - Deleted
     */
    retention_state?: "retaining" | "delete_requested" | "deleted";
    /** @default false */
    archived?: boolean;
    last_login: number;
    settings: UserSettings$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateUserMessage {
    id: number;
    /**
     * * `admin` - Admin
     * * `user` - User
     */
    section?: "admin" | "user";
    /**
     * * `info` - Info
     * * `warning` - Warning
     * * `error` - Error
     */
    level?: "info" | "warning" | "error";
    message: string;
    /** @default false */
    archived?: boolean;
    author: ReducedUserInfo | null;
    created: number;
    updated: number;
}
interface AdminCreateUserPermission {
    /**
     * * `admin` - Admin
     * * `user` - User
     */
    section: "admin" | "user";
    /**
     * * `accesscontrolrule` - Access Control Rule
     * * `account` - Account
     * * `accountdefinition` - Account Definition
     * * `address` - Address
     * * `currency` - Currency
     * * `bankaccount` - Bank Account
     * * `company` - Company
     * * `cryptoaccount` - Crypto Account
     * * `device` - Device
     * * `document` - Document
     * * `email` - Email
     * * `group` - Group
     * * `jwt` - Jwt
     * * `legalterm` - Legal Term
     * * `mfa` - Mfa
     * * `mfarule` - Mfa Rule
     * * `mobile` - Mobile
     * * `notification` - Notification
     * * `oauthclient` - Oauth Client
     * * `permission` - Permission
     * * `request` - Request
     * * `service` - Service
     * * `token` - Token
     * * `transaction` - Transaction
     * * `transactionsubtypes` - Transaction Subtypes
     * * `user` - User
     * * `webhook` - Webhook
     */
    type: "accesscontrolrule" | "account" | "accountdefinition" | "address" | "currency" | "bankaccount" | "company" | "cryptoaccount" | "device" | "document" | "email" | "group" | "jwt" | "legalterm" | "mfa" | "mfarule" | "mobile" | "notification" | "oauthclient" | "permission" | "request" | "service" | "token" | "transaction" | "transactionsubtypes" | "user" | "webhook";
    /**
     * * `view` - View
     * * `add` - Add
     * * `change` - Change
     * * `delete` - Delete
     */
    level: "view" | "add" | "change" | "delete";
    properties?: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateUserWalletAccount {
    id: number;
    user: string;
    /** @maxLength 200 */
    username?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    email?: string | null;
    /** @maxLength 24 */
    mobile?: string | null;
    /** @maxLength 50 */
    name?: string | null;
    code: string | null;
    /**
     * * `paypal` - Paypal
     * * `venmo` - Venmo
     * * `other` - Other
     */
    type?: "paypal" | "venmo" | "other";
    metadata?: Record<string, any>;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    currencies: ReducedAsset[];
    /** @default false */
    archived?: boolean;
    /**
     * * `withdraw` - Withdraw
     * * `deposit` - Deposit
     * @default "withdraw"
     */
    action?: "withdraw" | "deposit" | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateUserWalletAccountAccountAsset {
    account_currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateUserWalletAccountAsset {
    currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCryptoAccount {
    id: number;
    /** @maxLength 250 */
    address: string;
    /** @maxLength 50 */
    name?: string | null;
    code: string | null;
    /**
     * * `bitcoin` - Bitcoin
     * * `ethereum` - Ethereum
     * * `stellar` - Stellar
     * * `other` - Other
     */
    crypto_type?: "bitcoin" | "ethereum" | "stellar" | "other";
    /**
     * * `testnet` - Testnet
     * * `mainnet` - Mainnet
     * @default "testnet"
     */
    network?: "testnet" | "mainnet";
    metadata?: Record<string, any>;
    user: ReducedUserInfo;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    currencies: ReducedAsset[];
    account_currencies: ReducedAccountAsset[];
    /** @default false */
    archived?: boolean;
    /**
     * * `withdraw` - Withdraw
     * * `deposit` - Deposit
     * @default "withdraw"
     */
    action?: "withdraw" | "deposit" | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCryptoAccountAsset {
    /** @maxLength 30 */
    code?: string | null;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
    /** @format uri */
    icon?: string | null;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
type AdminCryptoAccountAssetList = AdminCryptoAccountAsset[];
interface AdminCryptoAccountAssetListResponse {
    status: string;
    data: AdminCryptoAccountAssetList;
}
interface AdminCryptoAccountAssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminCryptoAccountAsset;
}
interface AdminCryptoAccountResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminCryptoAccount;
}
interface AdminDeactivate {
    user: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminDevice {
    id: number;
    user: ReducedUserInfo;
    imei: string;
    /** @maxLength 30 */
    name?: string | null;
    apps: ReducedDeviceApp[];
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminDeviceApp {
    id: number;
    /** @maxLength 30 */
    name?: string | null;
    /** * `expo` - Expo */
    type: "expo";
    token: string | null;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminDeviceAppResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminDeviceApp;
}
interface AdminDeviceResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminDevice;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminDocumentType {
    id: number;
    /** @maxLength 50 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    related_resources?: ("user" | "useraddress" | "userbankaccount" | "userwalletaccount" | "usercryptoaccount")[];
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminDocumentTypeResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminDocumentType;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminEmail {
    user: ReducedUserInfo;
    id: number;
    /** @format email */
    email: string;
    primary?: boolean;
    verified?: boolean;
    archived?: boolean;
    /** @default false */
    temporary: boolean | null;
    created: number;
    updated: number;
}
interface AdminEmailResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminEmail;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface AdminExplicitCreateTransaction {
    /** @maxLength 64 */
    id?: string;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    amount: number;
    currency: string;
    account?: string | null;
    subtype?: string | null;
    /** @maxLength 100 */
    reference?: string | null;
    /**
     * @maxLength 100
     * @default ""
     */
    note?: string;
    metadata?: Record<string, any>;
    user?: string;
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     * @default "Pending"
     */
    status?: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    fees?: AdminCreateTransactionFee[];
    /** @min 0 */
    expires?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminExport {
    id: string;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
    /**
     * * `account` - Account
     * * `account_currency` - Account_Currency
     * * `transaction` - Transaction
     * * `user` - User
     */
    resource: "account" | "account_currency" | "transaction" | "user";
    query?: Record<string, any>;
    /**
     * * `queued` - Queued
     * * `processing` - Processing
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "queued" | "processing" | "complete" | "failed";
    progress: number;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    count?: number | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    page_size?: number;
    /**
     * * `json` - JSON
     * * `csv` - CSV
     */
    file_format: "json" | "csv";
    created: number;
    updated: number;
    /**
     * A condensed user serializer showing only the necessary user information
     * in order to identifiy the user.
     */
    user: ReducedUserInfo;
    archived?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminExportPage {
    /**
     * @min -2147483648
     * @max 2147483647
     */
    count?: number;
    /** Get the page number. Index plus 1. */
    page: number;
    /** @format uri */
    file?: string | null;
    status: string;
}
interface AdminExportResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminExport;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminExtendedAccount {
    reference: string;
    /**
     * @maxLength 200
     * @default "default"
     */
    name?: string;
    definition: string | null;
    /** @maxLength 200 */
    label?: string | null;
    primary?: boolean;
    recon?: boolean;
    user: ReducedUserInfo;
    currencies: AdminAccountAccountAsset[];
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminExtendedAccountResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminExtendedAccount;
}
interface AdminExtendedAuthToken {
    token_key: string;
    token: string;
    user: ReducedUserInfo;
    expires: number;
    created: number;
}
interface AdminExtendedAuthTokenResponse {
    status: string;
    data: AdminExtendedAuthToken;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminExtendedExport {
    id: string;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
    /**
     * * `account` - Account
     * * `account_currency` - Account_Currency
     * * `transaction` - Transaction
     * * `user` - User
     */
    resource: "account" | "account_currency" | "transaction" | "user";
    query: Record<string, any>;
    /**
     * * `queued` - Queued
     * * `processing` - Processing
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "queued" | "processing" | "complete" | "failed";
    progress: number;
    count: number | null;
    page_size: number;
    pages: AdminExportPage[];
    /**
     * * `json` - JSON
     * * `csv` - CSV
     */
    file_format: "json" | "csv";
    created: number;
    updated: number;
    user: ReducedUserInfo;
    /** @default false */
    archived?: boolean;
}
interface AdminExtendedExportResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminExtendedExport;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminExtendedGroupTier {
    id: number;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    level: number;
    /** @maxLength 255 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @deprecated */
    limits: GroupTierLimit[];
    /** @deprecated */
    fees: GroupTierFee[];
    settings: GroupTierSettings;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminExtendedGroupTierResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminExtendedGroupTier;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminExtendedRequest {
    id: number;
    user: ReducedUserInfo;
    key: string | null;
    scheme: string;
    path: string | null;
    method: string;
    content_type: string;
    params: Record<string, any>;
    headers: Record<string, any>;
    status_code: number | null;
    body: Record<string, any>;
    /**
     * * `accesscontrolrule` - Access Control Rule
     * * `account` - Account
     * * `accountcurrency` - Account Currency
     * * `accountcurrencylimit` - Account Currency Limit
     * * `accountcurrencyfee` - Account Currency Fee
     * * `accountdefinition` - Account Definition
     * * `accountdefinitiongroup` - Account Definition Group
     * * `accountdefinitiongroupcurrency` - Account Definition Group Currency
     * * `currency` - Currency
     * * `authenticator` - Authenticator
     * * `authenticatorchallenge` - Authenticator Challenge
     * * `authenticatorrule` - Authenticator Rule
     * * `backgroundtask` - Background Task
     * * `bankowneraddress` - Bank Owner Address
     * * `bankbranchaddress` - Bank Branch Address
     * * `company` - Company
     * * `companyaddress` - Company Address
     * * `companybankaccount` - Company Bank Account
     * * `companywalletaccount` - Company Wallet Account
     * * `companyservice` - Company Service
     * * `companynotification` - Company Notification
     * * `device` - Device
     * * `deviceapp` - Device App
     * * `document` - Document
     * * `documenttype` - Document Type
     * * `export` - Export
     * * `exportpage` - Export Page
     * * `email` - Email
     * * `group` - Group
     * * `groupfee` - Group Fee
     * * `grouppermission` - Group Permission
     * * `grouptier` - Group Tier
     * * `grouptierrequirement` - Group Tier Requirement
     * * `grouptierlimit` - Group Tier Limit
     * * `grouptierfee` - Group Tier Fee
     * * `grouptierrequirementsetitem` - Group Tier Requirement Set Item
     * * `grouptierrequirementset` - Group Tier Requirement Set
     * * `legalterm` - Legal Term
     * * `legaltermversion` - Legal Term Version
     * * `metric` - Metric
     * * `metric_schema` - Metric Schema
     * * `metric_point` - Metric Point
     * * `mfa` - Mfa
     * * `mfasmsdevice` - Mfa Sms Device
     * * `mfatotpdevice` - Mfa Totp Device
     * * `mfastaticdevice` - Mfa Static Device
     * * `mfatokenverification` - Mfa Token Verification
     * * `mobile` - Mobile
     * * `mobileconfirmation` - Mobile Confirmation
     * * `notification` - Notification
     * * `oauthclient` - Oauth Client
     * * `oauthlink` - Oauth Link
     * * `oauthsession` - Oauth Session
     * * `oidckey` - Oidc Key
     * * `permission` - Permission
     * * `recoverycode` - Recovery Code
     * * `refresh_token` - Refresh Token
     * * `request` - Request
     * * `resourcerequirementrule` - Resource Requirement Rule
     * * `service` - Service
     * * `statement` - Statement
     * * `token` - Token
     * * `transaction` - Transaction
     * * `transactionfee` - Transaction Fee
     * * `transactionsubtype` - Transaction Subtype
     * * `transactionmessage` - Transaction Message
     * * `transactioncollection` - Transaction Collection
     * * `user` - User
     * * `useraddress` - User Address
     * * `userbankaccount` - User Bank Account
     * * `userwalletaccount` - User Wallet Account
     * * `usercryptoaccount` - User Crypto Account
     * * `userlegaltermversion` - User Legal Term Version
     * * `usermessage` - User Message
     * * `userpermission` - User Permission
     * * `webhook` - Webhook
     * * `webhooktask` - Webhook Task
     * * `webhookrequest` - Webhook Request
     */
    resource: "accesscontrolrule" | "account" | "accountcurrency" | "accountcurrencylimit" | "accountcurrencyfee" | "accountdefinition" | "accountdefinitiongroup" | "accountdefinitiongroupcurrency" | "currency" | "authenticator" | "authenticatorchallenge" | "authenticatorrule" | "backgroundtask" | "bankowneraddress" | "bankbranchaddress" | "company" | "companyaddress" | "companybankaccount" | "companywalletaccount" | "companyservice" | "companynotification" | "device" | "deviceapp" | "document" | "documenttype" | "export" | "exportpage" | "email" | "group" | "groupfee" | "grouppermission" | "grouptier" | "grouptierrequirement" | "grouptierlimit" | "grouptierfee" | "grouptierrequirementsetitem" | "grouptierrequirementset" | "legalterm" | "legaltermversion" | "metric" | "metric_schema" | "metric_point" | "mfa" | "mfasmsdevice" | "mfatotpdevice" | "mfastaticdevice" | "mfatokenverification" | "mobile" | "mobileconfirmation" | "notification" | "oauthclient" | "oauthlink" | "oauthsession" | "oidckey" | "permission" | "recoverycode" | "refresh_token" | "request" | "resourcerequirementrule" | "service" | "statement" | "token" | "transaction" | "transactionfee" | "transactionsubtype" | "transactionmessage" | "transactioncollection" | "user" | "useraddress" | "userbankaccount" | "userwalletaccount" | "usercryptoaccount" | "userlegaltermversion" | "usermessage" | "userpermission" | "webhook" | "webhooktask" | "webhookrequest" | null;
    resource_id: string | null;
    /**
     * Return a response object. This has to be unpickled from a stored
     * binary field. If it fails, throw an error so we can investigate but
     * return None as well.
     */
    response: Record<string, any>;
    created: number;
    updated: number;
}
interface AdminExtendedRequestResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminExtendedRequest;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface AdminExtendedTransaction {
    id: string;
    collection: string;
    parent: string | null;
    partner: AdminPartnerTransaction | null;
    index: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    /** @maxLength 100 */
    note?: string;
    metadata?: Record<string, any>;
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    reference: string | null;
    amount: number;
    fee: number;
    total_amount: number;
    balance: number;
    label: string;
    account: string;
    currency: ReducedAsset;
    account_currency: TransactionAccountAsset;
    creator: ReducedUserInfo;
    user: ReducedUserInfo;
    fees: TransactionFee[];
    inclusive: boolean;
    /** @default false */
    archived?: boolean;
    executed: number | null;
    expires: number;
    created: number;
    updated: number;
}
interface AdminExtendedTransactionResponse {
    status: string;
    /**
     * A mixin that handles the application of permissions to properties on a
     * serializer using the built-in permissions system.
     *
     * NOTE : This only works if the following conditions are met:
     *     - The request context must contain a user.
     *     - The class this mixin is attached must be a serializer.
     *     - The class this mixin is attached to must have a Meta.model defined.
     *     - The Meta.model class must have a PERMISSION_TYPE defined.
     */
    data: AdminExtendedTransaction;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminExtendedTransactionTransition {
    id: string;
    set: string;
    transaction: AdminExtendedTransaction;
    /**
     * * `queued` - Queued
     * * `pending` - Pending
     * * `approved` - Approved
     * * `declined` - Declined
     */
    status: "queued" | "pending" | "approved" | "declined";
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    from_status: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    to_status: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    index: number;
    archived: boolean;
    created: number;
    updated: number;
}
interface AdminExtendedTransactionTransitionResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminExtendedTransactionTransition;
}
/**
 * Default user serializer for showing information regarding the user.
 * Information about user setting and permissions shown in
 * the ExtendedUserInfoSerializer
 */
interface AdminExtendedUserInfo {
    id: string;
    /**
     * @maxLength 150
     * @pattern ^[\w.@+-]+$
     */
    username: string | null;
    /** @format email */
    email: string | null;
    mobile: string | null;
    /** @maxLength 50 */
    first_name?: string | null;
    /** @maxLength 50 */
    middle_name?: string | null;
    /** @maxLength 50 */
    last_name?: string | null;
    /** @format uri */
    profile?: string | null;
    groups: ReducedGroup[];
    /** @default false */
    temporary: boolean | null;
    /** @maxLength 24 */
    id_number?: string | null;
    /** @format date */
    birth_date?: string | null;
    currency: ReducedAsset;
    account: string;
    /** @default 0 */
    balance: number;
    /** @default 0 */
    available_balance: number;
    company: string;
    owner: boolean;
    /** @maxLength 24 */
    language?: string;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    nationality?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    residency?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `male` - Male
     * * `female` - Female
     * * `other` - Other
     * * `not_specified` - Not Specified
     */
    gender?: "male" | "female" | "other" | "not_specified" | null;
    /**
     * * `mr` - Mr
     * * `mrs` - Mrs
     * * `ms` - Ms
     * * `mx` - Mx
     */
    title?: "mr" | "mrs" | "ms" | "mx" | null;
    /**
     * * `single` - Single
     * * `married` - Married
     * * `divorced` - Divorced
     * * `widowed` - Widowed
     */
    marital_status?: "single" | "married" | "divorced" | "widowed" | null;
    /** @maxLength 100 */
    fathers_name?: string | null;
    /** @maxLength 100 */
    mothers_name?: string | null;
    /** @maxLength 100 */
    grandfathers_name?: string | null;
    /** @maxLength 100 */
    grandmothers_name?: string | null;
    /** @maxLength 100 */
    central_bank_number?: string | null;
    metadata?: Record<string, any>;
    /** @maxLength 100 */
    timezone?: string | null;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    business_name?: string | null;
    /** @deprecated */
    verified: boolean;
    verification: UserVerification;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    created: number;
    updated: number;
    /** @default false */
    deactivated?: boolean;
    /**
     * * `retaining` - Retaining
     * * `delete_requested` - Delete Requested
     * * `deleted` - Deleted
     */
    retention_state?: "retaining" | "delete_requested" | "deleted";
    /** @default false */
    archived?: boolean;
    last_login: number;
    settings: UserSettings$1;
}
interface AdminExtendedUserInfoResponse {
    status: string;
    /**
     * Default user serializer for showing information regarding the user.
     * Information about user setting and permissions shown in
     * the ExtendedUserInfoSerializer
     */
    data: AdminExtendedUserInfo;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminExtendedWebhookTask {
    id: number;
    webhook: AdminWebhook$1;
    /** Get the number of tries that have occurred. */
    tries: number;
    completed: number;
    failed: number;
    archived: boolean;
    created: number;
    updated: number;
    data: Record<string, any>;
}
interface AdminExtendedWebhookTaskResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminExtendedWebhookTask;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminGroup {
    /** @maxLength 80 */
    name: string;
    /** @maxLength 80 */
    label?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @format uri */
    icon?: string | null;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section?: "system" | "admin" | "user";
    default: boolean;
    public: boolean;
    listed: boolean;
    tiers: ReducedGroupTier[];
    settings: AdminGroupSettings;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminGroupFee {
    id: number;
    name: string | null;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    account_definition: string | null;
    currency: string;
    /** Convert the Fee value from Decimal to int based on asset divisibility */
    value: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    description: string | null;
    debit_account: string | null;
    credit_account: string | null;
    debit_subtype: string | null;
    credit_subtype: string | null;
    created: number;
    updated: number;
    inferred: boolean | null;
    archived: boolean | null;
}
type AdminGroupFeeList = AdminGroupFee[];
interface AdminGroupFeeListResponse {
    status: string;
    data: AdminGroupFeeList;
}
interface AdminGroupFeeResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminGroupFee;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminGroupPermission {
    id: number;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
    /**
     * * `accesscontrolrule` - Access Control Rule
     * * `account` - Account
     * * `accountdefinition` - Account Definition
     * * `address` - Address
     * * `currency` - Currency
     * * `bankaccount` - Bank Account
     * * `company` - Company
     * * `cryptoaccount` - Crypto Account
     * * `device` - Device
     * * `document` - Document
     * * `email` - Email
     * * `group` - Group
     * * `jwt` - Jwt
     * * `legalterm` - Legal Term
     * * `mfa` - Mfa
     * * `mfarule` - Mfa Rule
     * * `mobile` - Mobile
     * * `notification` - Notification
     * * `oauthclient` - Oauth Client
     * * `permission` - Permission
     * * `request` - Request
     * * `service` - Service
     * * `token` - Token
     * * `transaction` - Transaction
     * * `transactionsubtypes` - Transaction Subtypes
     * * `user` - User
     * * `webhook` - Webhook
     */
    type: "accesscontrolrule" | "account" | "accountdefinition" | "address" | "currency" | "bankaccount" | "company" | "cryptoaccount" | "device" | "document" | "email" | "group" | "jwt" | "legalterm" | "mfa" | "mfarule" | "mobile" | "notification" | "oauthclient" | "permission" | "request" | "service" | "token" | "transaction" | "transactionsubtypes" | "user" | "webhook";
    /**
     * * `view` - View
     * * `add` - Add
     * * `change` - Change
     * * `delete` - Delete
     */
    level: "view" | "add" | "change" | "delete";
    properties?: Record<string, any>;
}
interface AdminGroupPermissionResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminGroupPermission;
}
interface AdminGroupResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminGroup;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminGroupSettings {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: GroupDisallowedTransactionSubtype[];
    /**
     * @format uri
     * @maxLength 200
     */
    password_reset_url?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    password_set_url?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    email_verification_url?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    deactivate_verification_url?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    request_delete_verification_url?: string | null;
}
interface AdminGroupSettingsResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminGroupSettings;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminGroupTier {
    id: number;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    level: number;
    /** @maxLength 255 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @deprecated */
    limits: GroupTierLimit[];
    /** @deprecated */
    fees: GroupTierFee[];
    settings: GroupTierSettings;
    archived: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminGroupTierFee {
    id: number;
    name: string | null;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    account_definition: string | null;
    currency: string;
    /** Convert the Fee value from Decimal to int based on asset divisibility */
    value: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    description: string | null;
    debit_account: string | null;
    credit_account: string | null;
    debit_subtype: string | null;
    credit_subtype: string | null;
    created: number;
    updated: number;
    inferred: boolean | null;
    archived: boolean | null;
}
type AdminGroupTierFeeList = AdminGroupTierFee[];
interface AdminGroupTierFeeListResponse {
    status: string;
    data: AdminGroupTierFeeList;
}
interface AdminGroupTierFeeResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminGroupTierFee;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminGroupTierLimit {
    id: number;
    /** Convert the Limit value from Decimal to int based on asset divisibility */
    value: number;
    /**
     * * `max` - Maximum
     * * `day_max` - Maximum per day
     * * `month_max` - Maximum per month
     * * `min` - Minimum
     * * `overdraft` - Overdraft
     */
    type: "max" | "day_max" | "month_max" | "min" | "overdraft";
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string;
    account_definition: string | null;
    currency: string;
    created: number;
    updated: number;
    archived?: boolean;
}
type AdminGroupTierLimitList = AdminGroupTierLimit[];
interface AdminGroupTierLimitListResponse {
    status: string;
    data: AdminGroupTierLimitList;
}
interface AdminGroupTierLimitResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminGroupTierLimit;
}
type AdminGroupTierList = AdminGroupTier[];
interface AdminGroupTierListResponse {
    status: string;
    data: AdminGroupTierList;
}
interface AdminGroupTierResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminGroupTier;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminLegalTerm {
    id: number;
    /**
     * * `system` - System
     * * `company` - Company
     */
    type: "system" | "company";
    /** @maxLength 100 */
    name: string;
    /** @maxLength 255 */
    description?: string | null;
    groups: string[];
    versions: AdminReducedLegalTermVersion[];
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminLegalTermResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminLegalTerm;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminLegalTermVersion {
    id: number;
    version: number;
    /** @maxLength 250 */
    note?: string | null;
    content?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    url?: string | null;
    created: number;
    /** @default false */
    archived?: boolean;
    updated: number;
}
interface AdminLegalTermVersionResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminLegalTermVersion;
}
interface AdminLogin {
    user: string;
    /** @maxLength 128 */
    password: string;
    /** @min 0 */
    session_duration?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminMFAAuthenticator {
    id: string;
    /**
     * * `totp` - Totp
     * * `sms` - Sms
     * * `static` - Static
     */
    type: "totp" | "sms" | "static";
    user: ReducedUserInfo;
    verified: boolean;
}
interface AdminMFAAuthenticatorResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminMFAAuthenticator;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminMetric {
    id: string;
    /** @maxLength 50 */
    name?: string | null;
    /** @maxLength 50 */
    slug?: string | null;
    metadata?: Record<string, any>;
    /**
     * * `account_count` - Account Count
     * * `transaction_count` - Transaction Count
     * * `transaction_complete_count` - Transaction Complete Count
     * * `transaction_failed_count` - Transaction Failed Count
     * * `transaction_pending_count` - Transaction Pending Count
     * * `transaction_complete_sum` - Transaction Complete Sum
     * * `transaction_failed_sum` - Transaction Failed Sum
     * * `transaction_pending_sum` - Transaction Pending Sum
     * * `transaction_balance_sum` - Transaction Balance Sum
     * * `transaction_available_balance_sum` - Transaction Available Balance Sum
     * * `user_count` - User Count
     * * `user_active_count` - User Active Count
     * * `user_transacted_in_30days_count` - User Transacted In 30Days Count
     */
    type: "account_count" | "transaction_count" | "transaction_complete_count" | "transaction_failed_count" | "transaction_pending_count" | "transaction_complete_sum" | "transaction_failed_sum" | "transaction_pending_sum" | "transaction_balance_sum" | "transaction_available_balance_sum" | "user_count" | "user_active_count" | "user_transacted_in_30days_count";
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    currency: ReducedAsset;
    timezone: string;
    query: Record<string, any>;
    /**
     * * `accumulate` - Accumulate
     * * `set` - Set
     */
    method: "accumulate" | "set";
    created: number;
    updated: number;
    /**
     * A condensed user serializer showing only the necessary user information
     * in order to identifiy the user.
     */
    user: ReducedUserInfo;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
    /** @default false */
    archived?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminMetricPoint {
    id: number;
    value: number;
    date: number;
}
interface AdminMetricResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminMetric;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminMobile {
    user: ReducedUserInfo;
    id: number;
    number: string;
    primary: boolean;
    verified?: boolean;
    /** @default false */
    archived?: boolean;
    /** @default false */
    temporary: boolean | null;
    created: number;
    updated: number;
}
interface AdminMobileResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminMobile;
}
interface AdminMultiGroupPermission {
    permissions: AdminGroupPermission[];
}
interface AdminMultiGroupPermissionResponse {
    status: string;
    data: AdminMultiGroupPermission;
}
/**
 * Generic permission handling (No properties support).
 *     - Services
 *     - Auth tokens
 */
interface AdminMultiPermission {
    permissions: Permission[];
}
interface AdminMultiPermissionResponse {
    status: string;
    /**
     * Generic permission handling (No properties support).
     *     - Services
     *     - Auth tokens
     */
    data: AdminMultiPermission;
}
interface AdminMultiTransaction {
    transactions: AdminTransaction$2[];
}
interface AdminMultiTransactionResponse {
    status: string;
    data: AdminMultiTransaction;
}
interface AdminMultiUserPermission {
    permissions: AdminUserPermission[];
}
interface AdminMultiUserPermissionResponse {
    status: string;
    data: AdminMultiUserPermission;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminOauthClient {
    id: string;
    /**
     * * `apple` - Apple
     * * `google` - Google
     */
    provider: "apple" | "google";
    /** @maxLength 250 */
    application: string;
    /** @maxLength 250 */
    client_id: string;
    data?: Record<string, any>;
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminOauthClientResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminOauthClient;
}
interface AdminOverviewAsset {
    balance_total: number;
    available_balance_total: number;
    count_total: number;
    count_debits_pending: number;
    count_debits_complete: number;
    count_credits_pending: number;
    count_credits_complete: number;
    sum_debits_pending: number;
    sum_debits_complete: number;
    sum_credits_pending: number;
    sum_credits_complete: number;
    balance_24h: number;
    count_24h: number;
    sum_24h_debits_pending: number;
    sum_24h_debits_complete: number;
    sum_24h_credits_pending: number;
    sum_24h_credits_complete: number;
}
interface AdminOverviewAssetResponse {
    status: string;
    data: AdminOverviewAsset;
}
interface AdminOverviewUser {
    total: number;
    archived: number;
    active: number;
}
interface AdminOverviewUserResponse {
    status: string;
    data: AdminOverviewUser;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminPartnerTransaction {
    id: string;
    user: AdminPartnerUserInfo;
    account: string;
}
/**
 * A condensed user serializer showing only the necessary user information to
 * identify a partner user (without exposing any extra).
 *
 * This only works when a transaction instance is sent to it.
 */
interface AdminPartnerUserInfo {
    id: string;
    identifier: string;
    username: string;
    first_name: string;
    middle_name: string;
    last_name: string;
    /** @format uri */
    profile: string | null;
    temporary: boolean;
    /** @format email */
    email: string;
    mobile: string;
}
/** Serializer for requesting a password reset e-mail. */
interface AdminPasswordReset {
    force?: boolean;
    user: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminReducedAccountAccountAsset {
    id: string;
    balance: number;
    available_balance: number;
    currency: ReducedAsset;
    active: boolean;
    archived?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminReducedAccountAsset {
    id: string;
    balance: number;
    available_balance: number;
    account: ReducedAccount;
    currency: ReducedAsset;
    active: boolean;
    archived?: boolean;
}
type AdminReducedAccountAssetList = AdminReducedAccountAsset[];
interface AdminReducedAccountAssetListResponse {
    status: string;
    data: AdminReducedAccountAssetList;
}
interface AdminReducedAccountAssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminReducedAccountAsset;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminReducedGroup {
    /** @maxLength 80 */
    name: string;
    /** @maxLength 80 */
    label?: string | null;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminReducedLegalTermVersion {
    id: number;
    version: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminReducedUserLegalTermVersion {
    id: number;
    version: number;
    accepted: boolean;
    created: number;
    updated: number;
}
interface AdminRegister {
    /** @maxLength 50 */
    first_name?: string;
    /** @maxLength 50 */
    middle_name?: string;
    /** @maxLength 50 */
    last_name?: string;
    /** @maxLength 150 */
    username?: string;
    /** @format email */
    email?: string;
    mobile?: string;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    nationality?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    residency?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 128 */
    password?: string;
    /**
     * @deprecated
     * @maxLength 128
     */
    password1?: string;
    /**
     * @deprecated
     * @maxLength 128
     */
    password2?: string;
    terms_and_conditions?: boolean;
    privacy_policy?: boolean;
    /** @min 0 */
    session_duration?: number | null;
    /**
     * @maxItems 1
     * @minItems 0
     */
    groups?: (string | null)[];
    /** @minItems 0 */
    legal_term_versions?: number[];
    /** @maxLength 24 */
    id_number?: string | null;
    /** @format date */
    birth_date?: string | null;
    /** @maxLength 24 */
    language?: string;
    /**
     * * `male` - Male
     * * `female` - Female
     * * `other` - Other
     * * `not_specified` - Not Specified
     */
    gender?: "male" | "female" | "other" | "not_specified" | null;
    /**
     * * `mr` - Mr
     * * `mrs` - Mrs
     * * `ms` - Ms
     * * `mx` - Mx
     */
    title?: "mr" | "mrs" | "ms" | "mx" | null;
    /**
     * * `single` - Single
     * * `married` - Married
     * * `divorced` - Divorced
     * * `widowed` - Widowed
     */
    marital_status?: "single" | "married" | "divorced" | "widowed" | null;
    /** @maxLength 100 */
    timezone?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminRequest {
    id: number;
    user: ReducedUserInfo;
    key: string | null;
    scheme: string;
    path: string | null;
    method: string;
    content_type: string;
    params: Record<string, any>;
    headers: Record<string, any>;
    status_code: number | null;
    body: Record<string, any>;
    /**
     * * `accesscontrolrule` - Access Control Rule
     * * `account` - Account
     * * `accountcurrency` - Account Currency
     * * `accountcurrencylimit` - Account Currency Limit
     * * `accountcurrencyfee` - Account Currency Fee
     * * `accountdefinition` - Account Definition
     * * `accountdefinitiongroup` - Account Definition Group
     * * `accountdefinitiongroupcurrency` - Account Definition Group Currency
     * * `currency` - Currency
     * * `authenticator` - Authenticator
     * * `authenticatorchallenge` - Authenticator Challenge
     * * `authenticatorrule` - Authenticator Rule
     * * `backgroundtask` - Background Task
     * * `bankowneraddress` - Bank Owner Address
     * * `bankbranchaddress` - Bank Branch Address
     * * `company` - Company
     * * `companyaddress` - Company Address
     * * `companybankaccount` - Company Bank Account
     * * `companywalletaccount` - Company Wallet Account
     * * `companyservice` - Company Service
     * * `companynotification` - Company Notification
     * * `device` - Device
     * * `deviceapp` - Device App
     * * `document` - Document
     * * `documenttype` - Document Type
     * * `export` - Export
     * * `exportpage` - Export Page
     * * `email` - Email
     * * `group` - Group
     * * `groupfee` - Group Fee
     * * `grouppermission` - Group Permission
     * * `grouptier` - Group Tier
     * * `grouptierrequirement` - Group Tier Requirement
     * * `grouptierlimit` - Group Tier Limit
     * * `grouptierfee` - Group Tier Fee
     * * `grouptierrequirementsetitem` - Group Tier Requirement Set Item
     * * `grouptierrequirementset` - Group Tier Requirement Set
     * * `legalterm` - Legal Term
     * * `legaltermversion` - Legal Term Version
     * * `metric` - Metric
     * * `metric_schema` - Metric Schema
     * * `metric_point` - Metric Point
     * * `mfa` - Mfa
     * * `mfasmsdevice` - Mfa Sms Device
     * * `mfatotpdevice` - Mfa Totp Device
     * * `mfastaticdevice` - Mfa Static Device
     * * `mfatokenverification` - Mfa Token Verification
     * * `mobile` - Mobile
     * * `mobileconfirmation` - Mobile Confirmation
     * * `notification` - Notification
     * * `oauthclient` - Oauth Client
     * * `oauthlink` - Oauth Link
     * * `oauthsession` - Oauth Session
     * * `oidckey` - Oidc Key
     * * `permission` - Permission
     * * `recoverycode` - Recovery Code
     * * `refresh_token` - Refresh Token
     * * `request` - Request
     * * `resourcerequirementrule` - Resource Requirement Rule
     * * `service` - Service
     * * `statement` - Statement
     * * `token` - Token
     * * `transaction` - Transaction
     * * `transactionfee` - Transaction Fee
     * * `transactionsubtype` - Transaction Subtype
     * * `transactionmessage` - Transaction Message
     * * `transactioncollection` - Transaction Collection
     * * `user` - User
     * * `useraddress` - User Address
     * * `userbankaccount` - User Bank Account
     * * `userwalletaccount` - User Wallet Account
     * * `usercryptoaccount` - User Crypto Account
     * * `userlegaltermversion` - User Legal Term Version
     * * `usermessage` - User Message
     * * `userpermission` - User Permission
     * * `webhook` - Webhook
     * * `webhooktask` - Webhook Task
     * * `webhookrequest` - Webhook Request
     */
    resource: "accesscontrolrule" | "account" | "accountcurrency" | "accountcurrencylimit" | "accountcurrencyfee" | "accountdefinition" | "accountdefinitiongroup" | "accountdefinitiongroupcurrency" | "currency" | "authenticator" | "authenticatorchallenge" | "authenticatorrule" | "backgroundtask" | "bankowneraddress" | "bankbranchaddress" | "company" | "companyaddress" | "companybankaccount" | "companywalletaccount" | "companyservice" | "companynotification" | "device" | "deviceapp" | "document" | "documenttype" | "export" | "exportpage" | "email" | "group" | "groupfee" | "grouppermission" | "grouptier" | "grouptierrequirement" | "grouptierlimit" | "grouptierfee" | "grouptierrequirementsetitem" | "grouptierrequirementset" | "legalterm" | "legaltermversion" | "metric" | "metric_schema" | "metric_point" | "mfa" | "mfasmsdevice" | "mfatotpdevice" | "mfastaticdevice" | "mfatokenverification" | "mobile" | "mobileconfirmation" | "notification" | "oauthclient" | "oauthlink" | "oauthsession" | "oidckey" | "permission" | "recoverycode" | "refresh_token" | "request" | "resourcerequirementrule" | "service" | "statement" | "token" | "transaction" | "transactionfee" | "transactionsubtype" | "transactionmessage" | "transactioncollection" | "user" | "useraddress" | "userbankaccount" | "userwalletaccount" | "usercryptoaccount" | "userlegaltermversion" | "usermessage" | "userpermission" | "webhook" | "webhooktask" | "webhookrequest" | null;
    resource_id: string | null;
    created: number;
    updated: number;
}
interface AdminRequestDelete {
    user: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminService {
    id: number;
    company: number | null;
    slug: string | null;
    /**
     * * `system` - System
     * * `public` - Public
     * * `private` - Private
     */
    type: "system" | "public" | "private";
    /** @maxLength 100 */
    name: string;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxItems 10 */
    tags?: string[] | null;
    verified: boolean;
    public: boolean;
    /** @maxLength 250 */
    url: string;
    /** @maxLength 250 */
    management_url?: string | null;
    terms_and_conditions_url: string | null;
    website_url: string | null;
    active: boolean;
}
interface AdminServiceResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminService;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminStatement {
    id: string;
    account: ReducedAccount;
    timezone: string;
    start_date: number;
    end_date: number;
    /** @format uri */
    file?: string | null;
    /**
     * * `queued` - Queued
     * * `processing` - Processing
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "queued" | "processing" | "complete" | "failed";
    created: number;
    updated: number;
    /** @default false */
    archived?: boolean;
}
interface AdminStatementResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminStatement;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface AdminTransaction$2 {
    id: string;
    collection: string;
    parent: string | null;
    partner: AdminPartnerTransaction | null;
    index: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    note: string;
    metadata: Record<string, any>;
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    reference: string | null;
    amount: number;
    fee: number;
    total_amount: number;
    balance: number;
    label: string;
    account: string;
    currency: ReducedAsset;
    account_currency: TransactionAccountAsset;
    user: ReducedUserInfo;
    inclusive: boolean;
    archived?: boolean;
    executed: number | null;
    expires: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminTransactionCollection {
    id: string;
    transactions: AdminTransactionCollectionTransaction[];
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    checks?: ("type" | "verification" | "limits" | "balance")[] | null;
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminTransactionCollectionResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminTransactionCollection;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface AdminTransactionCollectionTransaction {
    id: string;
    parent: string | null;
    partner: string | null;
    index: number;
    inferred: boolean;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    note: string;
    metadata: Record<string, any>;
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    reference: string | null;
    amount: number;
    fee: number;
    total_amount: number;
    balance: number;
    label: string;
    account: string;
    currency: ReducedAsset;
    account_currency: TransactionAccountAsset;
    user: ReducedUserInfo;
    inclusive: boolean;
    /** @default false */
    archived?: boolean;
    executed: number | null;
    created: number;
    updated: number;
    expires: number;
}
interface AdminTransactionCollectionTransactionResponse {
    status: string;
    /**
     * A mixin that handles the application of permissions to properties on a
     * serializer using the built-in permissions system.
     *
     * NOTE : This only works if the following conditions are met:
     *     - The request context must contain a user.
     *     - The class this mixin is attached must be a serializer.
     *     - The class this mixin is attached to must have a Meta.model defined.
     *     - The Meta.model class must have a PERMISSION_TYPE defined.
     */
    data: AdminTransactionCollectionTransaction;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminTransactionMessage {
    id: number;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section?: "system" | "admin" | "user";
    /**
     * * `info` - Info
     * * `warning` - Warning
     * * `error` - Error
     */
    level?: "info" | "warning" | "error";
    message: string;
    author: ReducedUserInfo | null;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminTransactionMessageResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminTransactionMessage;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminTransactionSubtype {
    id: number;
    /** @maxLength 50 */
    name: string;
    /** @maxLength 50 */
    label?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    /**
     * * `partner` - Partner
     * * `single` - Single
     * @deprecated
     */
    usage_type: "partner" | "single" | null;
    partner: ReducedTransactionSubtype;
    archived?: boolean;
    created: number;
    updated: number;
}
type AdminTransactionSubtypeList = AdminTransactionSubtype[];
interface AdminTransactionSubtypeListResponse {
    status: string;
    data: AdminTransactionSubtypeList;
}
interface AdminTransactionSubtypeResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminTransactionSubtype;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminTransactionTransition {
    id: string;
    set: string;
    transaction: string;
    /**
     * * `queued` - Queued
     * * `pending` - Pending
     * * `approved` - Approved
     * * `declined` - Declined
     */
    status: "queued" | "pending" | "approved" | "declined";
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    from_status: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    to_status: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    index: number;
    archived: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateAccountDefinitionGroup {
    group: ReducedGroup;
    default?: boolean;
    primary?: boolean;
    currencies?: string[];
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateAccountDefinitionGroupAsset {
    currency: ReducedAsset;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateAsset {
    code: string | null;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    divisibility: number;
    /** @format uri */
    icon?: string | null;
    manager?: string | null;
    manager_conditions?: Record<string, any>[] | null;
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateAuthToken {
    /** @min 0 */
    expires: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateAuthenticatorRule {
    id: number;
    /**
     * * `authentication` - Authentication
     * * `authorization` - Authorization
     * * `setup` - Setup
     */
    type: "authentication" | "authorization" | "setup";
    /**
     * * `ephemeral` - Ephemeral
     * * `durable` - Durable
     * * `permanent` - Permanent
     */
    durability: "ephemeral" | "durable" | "permanent";
    authenticator_types: ("totp" | "sms" | "static")[];
    permissions?: (string | null)[];
    group: ReducedGroup;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    duration?: number | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    session_age?: number | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateCompanyLink {
    id: number;
    key: string | null;
    counterparty: AdminCompanyLinkCounterparty;
    /** * `complete` - Complete */
    status: "complete";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateCompanySettings {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: UpdateCompanyDisallowedTransactionSubtype[];
    require_transaction_subtypes?: boolean;
    require_verification?: boolean;
    allow_registrations?: boolean;
    allow_overdrafts?: boolean;
    allow_session_durations?: boolean;
    require_registration?: boolean;
    /**
     * @min 300
     * @max 2678400
     */
    default_session_duration?: number;
    /**
     * @min 300
     * @max 2678400
     */
    default_transaction_lifespan?: number;
    require_terms_and_conditions?: boolean;
    require_privacy_policy?: boolean;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    account_reference_length?: number;
    /** @format uri */
    password_reset_url?: string | null;
    /** @format uri */
    password_set_url?: string | null;
    /** @format uri */
    email_verification_url?: string | null;
    /** @format uri */
    deactivate_verification_url?: string | null;
    /** @format uri */
    request_delete_verification_url?: string | null;
    /** @format uri */
    terms_and_conditions_url?: string | null;
    /** @format uri */
    privacy_policy_url?: string | null;
    /** @maxItems 249 */
    nationalities: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
    /** @maxItems 249 */
    residencies: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateExtendedAccount {
    reference: string;
    /**
     * @maxLength 200
     * @default "default"
     */
    name?: string;
    definition: string | null;
    /** @maxLength 200 */
    label?: string | null;
    primary?: boolean;
    recon?: boolean;
    user: ReducedUserInfo;
    currencies: AdminAccountAccountAsset[];
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface AdminUpdateExtendedTransaction {
    id: string;
    collection: string;
    parent: string | null;
    partner: AdminPartnerTransaction | null;
    index: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    /** @maxLength 100 */
    note?: string;
    metadata?: Record<string, any>;
    /**
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status?: "Pending" | "Complete" | "Failed";
    reference: string | null;
    amount: number;
    fee: number;
    total_amount: number;
    balance: number;
    label: string;
    account: string;
    currency: ReducedAsset;
    account_currency: TransactionAccountAsset;
    creator: ReducedUserInfo;
    user: ReducedUserInfo;
    fees: TransactionFee[];
    inclusive: boolean;
    /** @default false */
    archived?: boolean;
    executed: number | null;
    expires: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateGroup {
    /** @maxLength 80 */
    name: string;
    /** @maxLength 80 */
    label?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @format uri */
    icon?: string | null;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section?: "system" | "admin" | "user";
    default: boolean;
    public: boolean;
    listed: boolean;
    tiers: ReducedGroupTier[];
    settings: AdminGroupSettings;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateGroupFee {
    /** @maxLength 50 */
    name?: string | null;
    /** @min 0 */
    value?: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype?: string | null;
    /** @maxLength 250 */
    description?: string | null;
    debit_account?: string | null;
    credit_account?: string | null;
    debit_subtype?: string | null;
    credit_subtype?: string | null;
    inferred?: boolean;
    account_definition?: string | null;
    currency?: string;
    /** @default false */
    archived?: boolean;
}
interface AdminUpdateGroupResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminUpdateGroup;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateGroupSettings {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: UpdateGroupDisallowedTransactionSubtype[];
    /**
     * @format uri
     * @maxLength 200
     */
    password_reset_url?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    password_set_url?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    email_verification_url?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    deactivate_verification_url?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    request_delete_verification_url?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateGroupTierFee {
    /** @maxLength 50 */
    name?: string | null;
    /** @min 0 */
    value?: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype?: string | null;
    /** @maxLength 250 */
    description?: string | null;
    debit_account?: string | null;
    credit_account?: string | null;
    debit_subtype?: string | null;
    credit_subtype?: string | null;
    inferred?: boolean;
    account_definition?: string | null;
    currency?: string;
    /** @default false */
    archived?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateGroupTierLimit {
    /** @min 0 */
    value: number;
    /**
     * * `max` - Maximum
     * * `day_max` - Maximum per day
     * * `month_max` - Maximum per month
     * * `min` - Minimum
     * * `overdraft` - Overdraft
     */
    type: "max" | "day_max" | "month_max" | "min" | "overdraft";
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype?: string | null;
    currency: string;
    account_definition?: string | null;
    /** @default false */
    archived?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateGroupTierSettings {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: UpdateGroupTierDisallowedTransactionSubtype[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateOauthClient {
    id: string;
    /**
     * * `apple` - Apple
     * * `google` - Google
     */
    provider: "apple" | "google";
    /** @maxLength 250 */
    application: string;
    client_id: string;
    data?: Record<string, any>;
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateService {
    id: number;
    company: number | null;
    slug: string | null;
    /**
     * * `system` - System
     * * `public` - Public
     * * `private` - Private
     */
    type: "system" | "public" | "private";
    name?: string;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxItems 10 */
    tags?: string[] | null;
    verified: boolean;
    public: boolean;
    url?: string;
    /** @maxLength 250 */
    management_url?: string | null;
    terms_and_conditions_url: string | null;
    website_url: string | null;
    active: boolean;
}
/**
 * Generic permission handling (No properties support).
 *     - Services
 *     - Auth tokens
 */
interface AdminUpdateServicePermission {
    id: number;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
    /**
     * * `accesscontrolrule` - Access Control Rule
     * * `account` - Account
     * * `accountdefinition` - Account Definition
     * * `address` - Address
     * * `currency` - Currency
     * * `bankaccount` - Bank Account
     * * `company` - Company
     * * `cryptoaccount` - Crypto Account
     * * `device` - Device
     * * `document` - Document
     * * `email` - Email
     * * `group` - Group
     * * `jwt` - Jwt
     * * `legalterm` - Legal Term
     * * `mfa` - Mfa
     * * `mfarule` - Mfa Rule
     * * `mobile` - Mobile
     * * `notification` - Notification
     * * `oauthclient` - Oauth Client
     * * `permission` - Permission
     * * `request` - Request
     * * `service` - Service
     * * `token` - Token
     * * `transaction` - Transaction
     * * `transactionsubtypes` - Transaction Subtypes
     * * `user` - User
     * * `webhook` - Webhook
     */
    type: "accesscontrolrule" | "account" | "accountdefinition" | "address" | "currency" | "bankaccount" | "company" | "cryptoaccount" | "device" | "document" | "email" | "group" | "jwt" | "legalterm" | "mfa" | "mfarule" | "mobile" | "notification" | "oauthclient" | "permission" | "request" | "service" | "token" | "transaction" | "transactionsubtypes" | "user" | "webhook";
    /**
     * * `view` - View
     * * `add` - Add
     * * `change` - Change
     * * `delete` - Delete
     */
    level: "view" | "add" | "change" | "delete";
}
interface AdminUpdateServicePermissionResponse {
    status: string;
    /**
     * Generic permission handling (No properties support).
     *     - Services
     *     - Auth tokens
     */
    data: AdminUpdateServicePermission;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateTransactionCollection {
    id: string;
    transactions: AdminTransactionCollectionTransaction[];
    /**
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status?: "Quoted" | "Pending" | "Complete" | "Failed";
    checks?: ("type" | "verification" | "limits" | "balance")[] | null;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateTransactionSubtype {
    id: number;
    /** @maxLength 50 */
    name: string;
    /** @maxLength 50 */
    label?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    /**
     * * `partner` - Partner
     * * `single` - Single
     * @deprecated
     */
    usage_type?: "partner" | "single" | null;
    partner?: number | null;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateTransactionTransition {
    id: string;
    set: string;
    transaction: AdminExtendedTransaction;
    /**
     * * `approved` - Approved
     * * `declined` - Declined
     */
    status: "approved" | "declined";
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    from_status: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    to_status: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    index: number;
    archived: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateUserDocument {
    id: number;
    user: ReducedUserInfo;
    /** @format uri */
    file: string;
    type: number;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    metadata?: Record<string, any>;
    /** @maxLength 250 */
    note?: string | null;
    /** @default false */
    archived?: boolean;
    expires?: number | null;
}
/**
 * Default user serializer for showing information regarding the user.
 * Information about user setting and permissions shown in
 * the ExtendedUserInfoSerializer
 */
interface AdminUpdateUserInfo {
    id: string;
    /**
     * @maxLength 150
     * @pattern ^[\w.@+-]+$
     */
    username: string | null;
    /** @format email */
    email?: string;
    mobile?: string;
    /** @maxLength 50 */
    first_name?: string | null;
    /** @maxLength 50 */
    middle_name?: string | null;
    /** @maxLength 50 */
    last_name?: string | null;
    /** @format uri */
    profile?: string | null;
    /**
     * @maxItems 1
     * @minItems 0
     */
    groups?: (string | null)[];
    /** @default false */
    temporary: boolean | null;
    /** @maxLength 24 */
    id_number?: string | null;
    /** @format date */
    birth_date?: string | null;
    currency: ReducedAsset;
    account: string;
    /** @default 0 */
    balance: number;
    /** @default 0 */
    available_balance: number;
    company: string;
    owner: boolean;
    /** @maxLength 24 */
    language?: string;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    nationality?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    residency?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `male` - Male
     * * `female` - Female
     * * `other` - Other
     * * `not_specified` - Not Specified
     */
    gender?: "male" | "female" | "other" | "not_specified" | null;
    /**
     * * `mr` - Mr
     * * `mrs` - Mrs
     * * `ms` - Ms
     * * `mx` - Mx
     */
    title?: "mr" | "mrs" | "ms" | "mx" | null;
    /**
     * * `single` - Single
     * * `married` - Married
     * * `divorced` - Divorced
     * * `widowed` - Widowed
     */
    marital_status?: "single" | "married" | "divorced" | "widowed" | null;
    /** @maxLength 100 */
    fathers_name?: string | null;
    /** @maxLength 100 */
    mothers_name?: string | null;
    /** @maxLength 100 */
    grandfathers_name?: string | null;
    /** @maxLength 100 */
    grandmothers_name?: string | null;
    /** @maxLength 100 */
    central_bank_number?: string | null;
    metadata?: Record<string, any>;
    /** @maxLength 100 */
    timezone?: string | null;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    business_name?: string | null;
    /** @deprecated */
    verified: boolean;
    verification: UserVerification;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    created: number;
    updated: number;
    /** @default false */
    deactivated?: boolean;
    /**
     * * `retaining` - Retaining
     * * `delete_requested` - Delete Requested
     * * `deleted` - Deleted
     */
    retention_state?: "retaining" | "delete_requested" | "deleted";
    /** @default false */
    archived?: boolean;
    last_login: number;
    settings: UserSettings$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateUserSettings {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: UpdateUserDisallowedTransactionSubtype[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUserAddress {
    id: number;
    /**
     * * `permanent` - Permanent
     * * `contact` - Contact
     * * `shipping` - Shipping
     * * `billing` - Billing
     * * `business` - Business
     */
    type?: "permanent" | "contact" | "shipping" | "billing" | "business";
    user: ReducedUserInfo;
    /** @maxLength 200 */
    line_1?: string | null;
    /** @maxLength 200 */
    line_2?: string | null;
    /** @maxLength 100 */
    city?: string | null;
    /** @maxLength 100 */
    state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    postal_code?: string | null;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminUserAddressResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminUserAddress;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUserBankAccount {
    id: number;
    user: ReducedUserInfo;
    /** @maxLength 200 */
    name?: string | null;
    owner?: BankOwner | null;
    /** @maxLength 200 */
    number?: string | null;
    /** @maxLength 200 */
    type?: string | null;
    /**
     * * `individual` - Individual
     * * `business` - Business
     */
    beneficiary_type?: "individual" | "business" | null;
    /** @maxLength 20 */
    clabe?: string | null;
    /** @maxLength 200 */
    bank_name?: string | null;
    /** @maxLength 50 */
    bank_code?: string | null;
    /** @maxLength 3 */
    bank_currency?: string | null;
    /** @maxLength 50 */
    branch_code?: string | null;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    branch_address?: AdminUserBankBranchAddress;
    /** @maxLength 255 */
    branch_address_text?: string | null;
    /** @maxLength 50 */
    routing_number?: string | null;
    /** @maxLength 16 */
    swift?: string | null;
    /** @maxLength 50 */
    iban?: string | null;
    /** @maxLength 16 */
    bic?: string | null;
    code: string | null;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    currencies: ReducedAsset[];
    account_currencies: ReducedAccountAsset[];
    /**
     * * `withdraw` - Withdraw
     * * `deposit` - Deposit
     * @default "withdraw"
     */
    action?: "withdraw" | "deposit" | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUserBankAccountAsset {
    /** @maxLength 30 */
    code?: string | null;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
type AdminUserBankAccountAssetList = AdminUserBankAccountAsset[];
interface AdminUserBankAccountAssetListResponse {
    status: string;
    data: AdminUserBankAccountAssetList;
}
interface AdminUserBankAccountAssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminUserBankAccountAsset;
}
interface AdminUserBankAccountResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminUserBankAccount;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUserBankBranchAddress {
    /** @maxLength 200 */
    line_1?: string | null;
    /** @maxLength 200 */
    line_2?: string | null;
    /** @maxLength 100 */
    city?: string | null;
    /** @maxLength 100 */
    state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    postal_code?: string | null;
    /** @maxLength 10 */
    state_code?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUserDocument {
    id: number;
    user: ReducedUserInfo;
    /** @format uri */
    file: string;
    type: ReducedDocumentType;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    metadata: Record<string, any>;
    note: string | null;
    archived: boolean;
    expires: number;
    created: number;
    updated: number;
}
interface AdminUserDocumentResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminUserDocument;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUserGroup {
    /** @maxLength 80 */
    name: string;
    /** @maxLength 80 */
    label?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @format uri */
    icon?: string | null;
    default: boolean;
    public: boolean;
    listed: boolean;
    permissions: number;
    tier: AdminGroupTier;
    tiers: ReducedGroupTier[];
    settings: AdminGroupSettings;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminUserGroupResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminUserGroup;
}
/**
 * Default user serializer for showing information regarding the user.
 * Information about user setting and permissions shown in
 * the ExtendedUserInfoSerializer
 */
interface AdminUserInfo {
    id: string;
    /**
     * @maxLength 150
     * @pattern ^[\w.@+-]+$
     */
    username: string | null;
    /** @format email */
    email: string | null;
    mobile: string | null;
    /** @maxLength 50 */
    first_name?: string | null;
    /** @maxLength 50 */
    middle_name?: string | null;
    /** @maxLength 50 */
    last_name?: string | null;
    /** @format uri */
    profile?: string | null;
    groups: ReducedGroup[];
    /** @default false */
    temporary: boolean | null;
    /** @maxLength 24 */
    id_number?: string | null;
    /** @format date */
    birth_date?: string | null;
    currency: ReducedAsset;
    account: string;
    /** @default 0 */
    balance: number;
    /** @default 0 */
    available_balance: number;
    company: string;
    owner: boolean;
    /** @maxLength 24 */
    language?: string;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    nationality?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    residency?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `male` - Male
     * * `female` - Female
     * * `other` - Other
     * * `not_specified` - Not Specified
     */
    gender?: "male" | "female" | "other" | "not_specified" | null;
    /**
     * * `mr` - Mr
     * * `mrs` - Mrs
     * * `ms` - Ms
     * * `mx` - Mx
     */
    title?: "mr" | "mrs" | "ms" | "mx" | null;
    /**
     * * `single` - Single
     * * `married` - Married
     * * `divorced` - Divorced
     * * `widowed` - Widowed
     */
    marital_status?: "single" | "married" | "divorced" | "widowed" | null;
    /** @maxLength 100 */
    fathers_name?: string | null;
    /** @maxLength 100 */
    mothers_name?: string | null;
    /** @maxLength 100 */
    grandfathers_name?: string | null;
    /** @maxLength 100 */
    grandmothers_name?: string | null;
    /** @maxLength 100 */
    central_bank_number?: string | null;
    metadata?: Record<string, any>;
    /** @maxLength 100 */
    timezone?: string | null;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    business_name?: string | null;
    /** @deprecated */
    verified: boolean;
    verification: UserVerification;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    created: number;
    updated: number;
    /** @default false */
    deactivated?: boolean;
    /**
     * * `retaining` - Retaining
     * * `delete_requested` - Delete Requested
     * * `deleted` - Deleted
     */
    retention_state?: "retaining" | "delete_requested" | "deleted";
    /** @default false */
    archived?: boolean;
    last_login: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUserLegalTerm {
    id: number;
    /**
     * * `system` - System
     * * `company` - Company
     */
    type: "system" | "company";
    /** @maxLength 100 */
    name: string;
    /** @maxLength 255 */
    description?: string | null;
    versions: AdminReducedUserLegalTermVersion[];
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
interface AdminUserLegalTermResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminUserLegalTerm;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUserLegalTermVersion {
    id: number;
    version: number;
    accepted: boolean;
    accepted_date: number;
    note: string | null;
    content: string | null;
    /** @format uri */
    url: string | null;
    archived: boolean;
    created: number;
    updated: number;
}
interface AdminUserLegalTermVersionResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminUserLegalTermVersion;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUserMessage {
    id: number;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section?: "system" | "admin" | "user";
    /**
     * * `info` - Info
     * * `warning` - Warning
     * * `error` - Error
     */
    level?: "info" | "warning" | "error";
    message: string;
    /** @default false */
    archived?: boolean;
    author: ReducedUserInfo | null;
    created: number;
    updated: number;
}
interface AdminUserMessageResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminUserMessage;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUserPermission {
    id: number;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
    /**
     * * `accesscontrolrule` - Access Control Rule
     * * `account` - Account
     * * `accountdefinition` - Account Definition
     * * `address` - Address
     * * `currency` - Currency
     * * `bankaccount` - Bank Account
     * * `company` - Company
     * * `cryptoaccount` - Crypto Account
     * * `device` - Device
     * * `document` - Document
     * * `email` - Email
     * * `group` - Group
     * * `jwt` - Jwt
     * * `legalterm` - Legal Term
     * * `mfa` - Mfa
     * * `mfarule` - Mfa Rule
     * * `mobile` - Mobile
     * * `notification` - Notification
     * * `oauthclient` - Oauth Client
     * * `permission` - Permission
     * * `request` - Request
     * * `service` - Service
     * * `token` - Token
     * * `transaction` - Transaction
     * * `transactionsubtypes` - Transaction Subtypes
     * * `user` - User
     * * `webhook` - Webhook
     */
    type: "accesscontrolrule" | "account" | "accountdefinition" | "address" | "currency" | "bankaccount" | "company" | "cryptoaccount" | "device" | "document" | "email" | "group" | "jwt" | "legalterm" | "mfa" | "mfarule" | "mobile" | "notification" | "oauthclient" | "permission" | "request" | "service" | "token" | "transaction" | "transactionsubtypes" | "user" | "webhook";
    /**
     * * `view` - View
     * * `add` - Add
     * * `change` - Change
     * * `delete` - Delete
     */
    level: "view" | "add" | "change" | "delete";
    properties?: Record<string, any>;
}
interface AdminUserPermissionResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminUserPermission;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUserWalletAccount {
    id: number;
    user: ReducedUserInfo;
    /** @maxLength 200 */
    username?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    email?: string | null;
    /** @maxLength 24 */
    mobile?: string | null;
    /** @maxLength 50 */
    name?: string | null;
    code: string | null;
    /**
     * * `paypal` - Paypal
     * * `venmo` - Venmo
     * * `other` - Other
     */
    type?: "paypal" | "venmo" | "other";
    metadata?: Record<string, any>;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    currencies: ReducedAsset[];
    /** @default false */
    archived?: boolean;
    /**
     * * `withdraw` - Withdraw
     * * `deposit` - Deposit
     * @default "withdraw"
     */
    action?: "withdraw" | "deposit" | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUserWalletAccountAsset {
    /** @maxLength 30 */
    code?: string | null;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
type AdminUserWalletAccountAssetList = AdminUserWalletAccountAsset[];
interface AdminUserWalletAccountAssetListResponse {
    status: string;
    data: AdminUserWalletAccountAssetList;
}
interface AdminUserWalletAccountAssetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminUserWalletAccountAsset;
}
interface AdminUserWalletAccountResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminUserWalletAccount;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminWebhook$1 {
    id: number;
    /** @format uri */
    url: string;
    /**
     * * `company.link.create` - Company Link Create
     * * `company.link.update` - Company Link Update
     * * `company.update` - Company Update
     * * `currency.create` - Currency Create
     * * `currency.update` - Currency Update
     * * `user.create` - User Create
     * * `user.update` - User Update
     * * `user.password.reset` - User Password Reset
     * * `user.password.set` - User Password Set
     * * `user.deactivate.verify` - User Deactivate Verify
     * * `user.request_delete.verify` - User Request Delete Verify
     * * `user.email.verify` - User Email Verify
     * * `user.mobile.verify` - User Mobile Verify
     * * `email.create` - Email Create
     * * `email.update` - Email Update
     * * `mobile.create` - Mobile Create
     * * `mobile.update` - Mobile Update
     * * `address.create` - Address Create
     * * `address.update` - Address Update
     * * `document.create` - Document Create
     * * `document.update` - Document Update
     * * `bank_account.create` - Bank Account Create
     * * `bank_account.update` - Bank Account Update
     * * `crypto_account.create` - Crypto Account Create
     * * `crypto_account.update` - Crypto Account Update
     * * `account.create` - Account Create
     * * `account.update` - Account Update
     * * `account.currency.create` - Account Currency Create
     * * `transaction.create` - Transaction Create
     * * `transaction.update` - Transaction Update
     * * `transaction.initiate` - Transaction Initiate
     * * `transaction.execute` - Transaction Execute
     * * `transaction.transition.create` - Transaction Transition Create
     * * `transaction.transition.update` - Transaction Transition Update
     * * `mfa.sms.verify` - Mfa Sms Verify
     */
    event: "company.link.create" | "company.link.update" | "company.update" | "currency.create" | "currency.update" | "user.create" | "user.update" | "user.password.reset" | "user.password.set" | "user.deactivate.verify" | "user.request_delete.verify" | "user.email.verify" | "user.mobile.verify" | "email.create" | "email.update" | "mobile.create" | "mobile.update" | "address.create" | "address.update" | "document.create" | "document.update" | "bank_account.create" | "bank_account.update" | "crypto_account.create" | "crypto_account.update" | "account.create" | "account.update" | "account.currency.create" | "transaction.create" | "transaction.update" | "transaction.initiate" | "transaction.execute" | "transaction.transition.create" | "transaction.transition.update" | "mfa.sms.verify";
    /** @maxLength 250 */
    secret?: string;
    /** @maxLength 250 */
    condition?: string | null;
    enabled?: boolean;
    service: ReducedService | null;
    /** @default false */
    archived?: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminWebhookRequest {
    id: number;
    response_code: number | null;
    error: string | null;
    archived: boolean;
    created: number;
    updated: number;
}
interface AdminWebhookRequestResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminWebhookRequest;
}
interface AdminWebhookResponse$1 {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminWebhook$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminWebhookTask {
    id: number;
    webhook: AdminWebhook$1;
    /** Get the number of tries that have occurred. */
    tries: number;
    completed: number;
    failed: number;
    archived: boolean;
    created: number;
    updated: number;
}
interface Authenticated {
    /**
     * Fetch a token to use for authentication. The token is excluded if this
     * is a cookied based authenication response.
     */
    token: string;
    /**
     * Fetch a refresh token to use for refreshing authentication. The refresh
     * token is excluded if this is a cookied based authenication response.
     */
    refresh_token: string;
    /**
     * A reduced user serializer showing only the necessary information for post
     * login serialization.
     */
    user: ProtectedUserInfo;
    challenges: AuthenticatorChallenge[];
    expires: number;
    created: number;
}
interface AuthenticatedResponse {
    status: string;
    data: Authenticated;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AuthenticatorChallenge {
    id: string;
    /**
     * * `authentication` - Authentication
     * * `authorization` - Authorization
     * * `setup` - Setup
     */
    type: "authentication" | "authorization" | "setup";
    /**
     * * `ephemeral` - Ephemeral
     * * `durable` - Durable
     * * `permanent` - Permanent
     */
    durability: "ephemeral" | "durable" | "permanent";
    authenticator_types: ("totp" | "sms" | "static")[];
    created: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface BankOwner {
    /** @maxLength 50 */
    first_name?: string | null;
    /** @maxLength 50 */
    middle_name?: string | null;
    /** @maxLength 50 */
    last_name?: string | null;
    /** @maxLength 150 */
    full_name?: string | null;
    /** @maxLength 24 */
    phone_number?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    email_address?: string | null;
    /** @maxLength 100 */
    company_name?: string | null;
    /** @maxLength 15 */
    ein_tin?: string | null;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    address?: BankOwnerAddress;
    /** @maxLength 255 */
    address_text?: string | null;
    /** @maxLength 16 */
    cpf_cpnj?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface BankOwnerAddress {
    /** @maxLength 200 */
    line_1?: string | null;
    /** @maxLength 200 */
    line_2?: string | null;
    /** @maxLength 100 */
    city?: string | null;
    /** @maxLength 100 */
    state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    postal_code?: string | null;
    /** @maxLength 10 */
    state_code?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CompanyBankBranchAddress {
    /** @maxLength 200 */
    line_1?: string | null;
    /** @maxLength 200 */
    line_2?: string | null;
    /** @maxLength 100 */
    city?: string | null;
    /** @maxLength 100 */
    state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    postal_code?: string | null;
    /** @maxLength 10 */
    state_code?: string | null;
}
interface CompanyDisallowedTransactionSubtype {
    subtype: ReducedTransactionSubtype;
    currency: ReducedAsset;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CompanySettings {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: CompanyDisallowedTransactionSubtype[];
    require_transaction_subtypes?: boolean;
    require_verification?: boolean;
    allow_registrations?: boolean;
    allow_overdrafts?: boolean;
    allow_session_durations?: boolean;
    require_registration?: boolean;
    /**
     * @min 300
     * @max 2678400
     */
    default_session_duration?: number;
    /**
     * @min 300
     * @max 2678400
     */
    default_transaction_lifespan?: number;
    require_terms_and_conditions?: boolean;
    require_privacy_policy?: boolean;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    account_reference_length?: number;
    /** @format uri */
    password_reset_url?: string | null;
    /** @format uri */
    password_set_url?: string | null;
    /** @format uri */
    email_verification_url?: string | null;
    /** @format uri */
    deactivate_verification_url?: string | null;
    /** @format uri */
    request_delete_verification_url?: string | null;
    /** @format uri */
    terms_and_conditions_url?: string | null;
    /** @format uri */
    privacy_policy_url?: string | null;
    /** @maxItems 249 */
    nationalities: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
    /** @maxItems 249 */
    residencies: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateGroupTierRequirementSetItem {
    id: number;
    /** * `resource` - Resource */
    type: "resource";
    rule: CreateGroupTierRequirementSetItemRule;
    /** @maxLength 50 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * @min 0
     * @max 2147483647
     */
    weight?: number | null;
    created: number;
    updated: number;
}
type CreateGroupTierRequirementSetItemRule = ResourceRequirementRule;
/**
 * Generic permission handling (No properties support).
 *     - Services
 *     - Auth tokens
 */
interface CreatePermission {
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
    /**
     * * `accesscontrolrule` - Access Control Rule
     * * `account` - Account
     * * `accountdefinition` - Account Definition
     * * `address` - Address
     * * `currency` - Currency
     * * `bankaccount` - Bank Account
     * * `company` - Company
     * * `cryptoaccount` - Crypto Account
     * * `device` - Device
     * * `document` - Document
     * * `email` - Email
     * * `group` - Group
     * * `jwt` - Jwt
     * * `legalterm` - Legal Term
     * * `mfa` - Mfa
     * * `mfarule` - Mfa Rule
     * * `mobile` - Mobile
     * * `notification` - Notification
     * * `oauthclient` - Oauth Client
     * * `permission` - Permission
     * * `request` - Request
     * * `service` - Service
     * * `token` - Token
     * * `transaction` - Transaction
     * * `transactionsubtypes` - Transaction Subtypes
     * * `user` - User
     * * `webhook` - Webhook
     */
    type: "accesscontrolrule" | "account" | "accountdefinition" | "address" | "currency" | "bankaccount" | "company" | "cryptoaccount" | "device" | "document" | "email" | "group" | "jwt" | "legalterm" | "mfa" | "mfarule" | "mobile" | "notification" | "oauthclient" | "permission" | "request" | "service" | "token" | "transaction" | "transactionsubtypes" | "user" | "webhook";
    /**
     * * `view` - View
     * * `add` - Add
     * * `change` - Change
     * * `delete` - Delete
     */
    level: "view" | "add" | "change" | "delete";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateUpdateGroupTierRequirementSet {
    id: number;
    parent?: number | null;
    /** @maxLength 50 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * * `all` - All
     * * `any` - Any
     */
    condition: "all" | "any";
    /**
     * @min 1
     * @max 24
     */
    min_condition_matches?: number | null;
    items: GroupTierRequirementSetItem[];
    /**
     * @min 0
     * @max 2147483647
     */
    weight?: number | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface DeviceApp {
    id: number;
    /** @maxLength 30 */
    name?: string | null;
    /** * `expo` - Expo */
    type: "expo";
    token: string | null;
    created: number;
    updated: number;
}
interface ExtendedAuthenticated {
    /**
     * Fetch a token to use for authentication. The token is excluded if this
     * is a cookied based authenication response.
     */
    token: string;
    /**
     * Fetch a refresh token to use for refreshing authentication. The refresh
     * token is excluded if this is a cookied based authenication response.
     */
    refresh_token: string;
    /**
     * Extended user information shown based on the default user info serializer.
     * Contain additional information about user permissions and settings.
     */
    user: ExtendedUserInfo;
    challenges: AuthenticatorChallenge[];
    expires: number;
    created: number;
}
interface ExtendedAuthenticatedResponse {
    status: string;
    data: ExtendedAuthenticated;
}
/**
 * Extended user information shown based on the default user info serializer.
 * Contain additional information about user permissions and settings.
 */
interface ExtendedUserInfo {
    id: string;
    /**
     * @maxLength 150
     * @pattern ^[\w.@+-]+$
     */
    username: string | null;
    /** @format email */
    email: string | null;
    mobile: string | null;
    /** @maxLength 50 */
    first_name?: string | null;
    /** @maxLength 50 */
    middle_name?: string | null;
    /** @maxLength 50 */
    last_name?: string | null;
    /** @format uri */
    profile?: string | null;
    groups: ReducedGroup[];
    /** @default false */
    temporary: boolean | null;
    /** @maxLength 24 */
    id_number?: string | null;
    /** @format date */
    birth_date?: string | null;
    currency: ReducedAsset;
    account: string;
    /** @default 0 */
    balance: number;
    /** @default 0 */
    available_balance: number;
    company: string;
    owner: boolean;
    /** @maxLength 24 */
    language?: string;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    nationality?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    residency?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `male` - Male
     * * `female` - Female
     * * `other` - Other
     * * `not_specified` - Not Specified
     */
    gender?: "male" | "female" | "other" | "not_specified" | null;
    /**
     * * `mr` - Mr
     * * `mrs` - Mrs
     * * `ms` - Ms
     * * `mx` - Mx
     */
    title?: "mr" | "mrs" | "ms" | "mx" | null;
    /**
     * * `single` - Single
     * * `married` - Married
     * * `divorced` - Divorced
     * * `widowed` - Widowed
     */
    marital_status?: "single" | "married" | "divorced" | "widowed" | null;
    /** @maxLength 100 */
    fathers_name?: string | null;
    /** @maxLength 100 */
    mothers_name?: string | null;
    /** @maxLength 100 */
    grandfathers_name?: string | null;
    /** @maxLength 100 */
    grandmothers_name?: string | null;
    /** @maxLength 100 */
    central_bank_number?: string | null;
    metadata: Record<string, any>;
    /** @maxLength 100 */
    timezone?: string | null;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    business_name?: string | null;
    /** @deprecated */
    verified: boolean;
    verification: UserVerification;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    created: number;
    updated: number;
    settings: UserSettings$1;
}
interface GroupDisallowedTransactionSubtype {
    subtype: ReducedTransactionSubtype;
    currency: ReducedAsset;
    account_definition: ReducedAccountDefinition;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface GroupPermission {
    id: number;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
    /**
     * * `accesscontrolrule` - Access Control Rule
     * * `account` - Account
     * * `accountdefinition` - Account Definition
     * * `address` - Address
     * * `currency` - Currency
     * * `bankaccount` - Bank Account
     * * `company` - Company
     * * `cryptoaccount` - Crypto Account
     * * `device` - Device
     * * `document` - Document
     * * `email` - Email
     * * `group` - Group
     * * `jwt` - Jwt
     * * `legalterm` - Legal Term
     * * `mfa` - Mfa
     * * `mfarule` - Mfa Rule
     * * `mobile` - Mobile
     * * `notification` - Notification
     * * `oauthclient` - Oauth Client
     * * `permission` - Permission
     * * `request` - Request
     * * `service` - Service
     * * `token` - Token
     * * `transaction` - Transaction
     * * `transactionsubtypes` - Transaction Subtypes
     * * `user` - User
     * * `webhook` - Webhook
     */
    type: "accesscontrolrule" | "account" | "accountdefinition" | "address" | "currency" | "bankaccount" | "company" | "cryptoaccount" | "device" | "document" | "email" | "group" | "jwt" | "legalterm" | "mfa" | "mfarule" | "mobile" | "notification" | "oauthclient" | "permission" | "request" | "service" | "token" | "transaction" | "transactionsubtypes" | "user" | "webhook";
    /**
     * * `view` - View
     * * `add` - Add
     * * `change` - Change
     * * `delete` - Delete
     */
    level: "view" | "add" | "change" | "delete";
    properties: Record<string, any>;
}
interface GroupTierDisallowedTransactionSubtype {
    subtype: ReducedTransactionSubtype;
    currency: ReducedAsset;
    account_definition: ReducedAccountDefinition;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface GroupTierFee {
    id: number;
    name: string | null;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string | null;
    account_definition: string | null;
    currency: string;
    /** Convert the Fee value from Decimal to int based on asset divisibility */
    value: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    description: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface GroupTierLimit {
    id: number;
    /** Convert the Limit value from Decimal to int based on asset divisibility */
    value: number;
    /**
     * * `max` - Maximum
     * * `day_max` - Maximum per day
     * * `month_max` - Maximum per month
     * * `min` - Minimum
     * * `overdraft` - Overdraft
     */
    type: "max" | "day_max" | "month_max" | "min" | "overdraft";
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    subtype: string;
    account_definition: string | null;
    currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface GroupTierRequirementSet {
    id: number;
    parent?: number | null;
    /** @maxLength 50 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * * `all` - All
     * * `any` - Any
     */
    condition: "all" | "any";
    /**
     * @min 1
     * @max 24
     */
    min_condition_matches?: number | null;
    items: GroupTierRequirementSetItem[];
    /**
     * @min 0
     * @max 2147483647
     */
    weight?: number | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface GroupTierRequirementSetItem {
    id: number;
    /** * `resource` - Resource */
    type: "resource";
    rule: GroupTierRequirementSetItemRule;
    /** @maxLength 50 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * @min 0
     * @max 2147483647
     */
    weight?: number | null;
    created: number;
    updated: number;
}
interface GroupTierRequirementSetItemResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: GroupTierRequirementSetItem;
}
type GroupTierRequirementSetItemRule = ResourceRequirementRule;
interface GroupTierRequirementSetResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: GroupTierRequirementSet;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface GroupTierSettings {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: GroupTierDisallowedTransactionSubtype[];
}
interface GroupTierSettingsResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: GroupTierSettings;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerUser {
    id: string;
    first_name: string | null;
    middle_name: string | null;
    last_name: string | null;
    service: ReducedService | null;
}
interface PaginatedAdminAccessControlRuleList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminAccessControlRule[];
}
interface PaginatedAdminAccessControlRuleListResponse {
    status: string;
    data: PaginatedAdminAccessControlRuleList;
}
interface PaginatedAdminAccountAccountAssetList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminAccountAccountAsset[];
}
interface PaginatedAdminAccountAccountAssetListResponse {
    status: string;
    data: PaginatedAdminAccountAccountAssetList;
}
interface PaginatedAdminAccountAssetLimitList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminAccountAssetLimit[];
}
interface PaginatedAdminAccountAssetLimitListResponse {
    status: string;
    data: PaginatedAdminAccountAssetLimitList;
}
interface PaginatedAdminAccountAssetList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminAccountAsset[];
}
interface PaginatedAdminAccountAssetListResponse {
    status: string;
    data: PaginatedAdminAccountAssetList;
}
interface PaginatedAdminAccountDefinitionGroupAssetList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminAccountDefinitionGroupAsset[];
}
interface PaginatedAdminAccountDefinitionGroupAssetListResponse {
    status: string;
    data: PaginatedAdminAccountDefinitionGroupAssetList;
}
interface PaginatedAdminAccountDefinitionGroupList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminAccountDefinitionGroup[];
}
interface PaginatedAdminAccountDefinitionGroupListResponse {
    status: string;
    data: PaginatedAdminAccountDefinitionGroupList;
}
interface PaginatedAdminAccountDefinitionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminAccountDefinition[];
}
interface PaginatedAdminAccountDefinitionListResponse {
    status: string;
    data: PaginatedAdminAccountDefinitionList;
}
interface PaginatedAdminAccountList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminAccount[];
}
interface PaginatedAdminAccountListResponse {
    status: string;
    data: PaginatedAdminAccountList;
}
interface PaginatedAdminAssetList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminAsset$2[];
}
interface PaginatedAdminAssetListResponse {
    status: string;
    data: PaginatedAdminAssetList;
}
interface PaginatedAdminAuthTokenList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminAuthToken[];
}
interface PaginatedAdminAuthTokenListResponse {
    status: string;
    data: PaginatedAdminAuthTokenList;
}
interface PaginatedAdminAuthenticatorRuleList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminAuthenticatorRule[];
}
interface PaginatedAdminAuthenticatorRuleListResponse {
    status: string;
    data: PaginatedAdminAuthenticatorRuleList;
}
interface PaginatedAdminCompanyBankAccountAssetList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminCompanyBankAccountAsset[];
}
interface PaginatedAdminCompanyBankAccountAssetListResponse {
    status: string;
    data: PaginatedAdminCompanyBankAccountAssetList;
}
interface PaginatedAdminCompanyBankAccountList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminCompanyBankAccount[];
}
interface PaginatedAdminCompanyBankAccountListResponse {
    status: string;
    data: PaginatedAdminCompanyBankAccountList;
}
interface PaginatedAdminCompanyLinkList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminCompanyLink[];
}
interface PaginatedAdminCompanyLinkListResponse {
    status: string;
    data: PaginatedAdminCompanyLinkList;
}
interface PaginatedAdminCompanyWalletAccountAssetList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminCompanyWalletAccountAsset[];
}
interface PaginatedAdminCompanyWalletAccountAssetListResponse {
    status: string;
    data: PaginatedAdminCompanyWalletAccountAssetList;
}
interface PaginatedAdminCompanyWalletAccountList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminCompanyWalletAccount[];
}
interface PaginatedAdminCompanyWalletAccountListResponse {
    status: string;
    data: PaginatedAdminCompanyWalletAccountList;
}
interface PaginatedAdminCryptoAccountList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminCryptoAccount[];
}
interface PaginatedAdminCryptoAccountListResponse {
    status: string;
    data: PaginatedAdminCryptoAccountList;
}
interface PaginatedAdminDeviceAppList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminDeviceApp[];
}
interface PaginatedAdminDeviceAppListResponse {
    status: string;
    data: PaginatedAdminDeviceAppList;
}
interface PaginatedAdminDeviceList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminDevice[];
}
interface PaginatedAdminDeviceListResponse {
    status: string;
    data: PaginatedAdminDeviceList;
}
interface PaginatedAdminDocumentTypeList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminDocumentType[];
}
interface PaginatedAdminDocumentTypeListResponse {
    status: string;
    data: PaginatedAdminDocumentTypeList;
}
interface PaginatedAdminEmailList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminEmail[];
}
interface PaginatedAdminEmailListResponse {
    status: string;
    data: PaginatedAdminEmailList;
}
interface PaginatedAdminExportList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminExport[];
}
interface PaginatedAdminExportListResponse {
    status: string;
    data: PaginatedAdminExportList;
}
interface PaginatedAdminGroupList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminGroup[];
}
interface PaginatedAdminGroupListResponse {
    status: string;
    data: PaginatedAdminGroupList;
}
interface PaginatedAdminLegalTermList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminLegalTerm[];
}
interface PaginatedAdminLegalTermListResponse {
    status: string;
    data: PaginatedAdminLegalTermList;
}
interface PaginatedAdminLegalTermVersionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminLegalTermVersion[];
}
interface PaginatedAdminLegalTermVersionListResponse {
    status: string;
    data: PaginatedAdminLegalTermVersionList;
}
interface PaginatedAdminMFAAuthenticatorList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminMFAAuthenticator[];
}
interface PaginatedAdminMFAAuthenticatorListResponse {
    status: string;
    data: PaginatedAdminMFAAuthenticatorList;
}
interface PaginatedAdminMetricList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminMetric[];
}
interface PaginatedAdminMetricListResponse {
    status: string;
    data: PaginatedAdminMetricList;
}
interface PaginatedAdminMetricPointList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminMetricPoint[];
}
interface PaginatedAdminMetricPointListResponse {
    status: string;
    data: PaginatedAdminMetricPointList;
}
interface PaginatedAdminMobileList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminMobile[];
}
interface PaginatedAdminMobileListResponse {
    status: string;
    data: PaginatedAdminMobileList;
}
interface PaginatedAdminOauthClientList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminOauthClient[];
}
interface PaginatedAdminOauthClientListResponse {
    status: string;
    data: PaginatedAdminOauthClientList;
}
interface PaginatedAdminRequestList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminRequest[];
}
interface PaginatedAdminRequestListResponse {
    status: string;
    data: PaginatedAdminRequestList;
}
interface PaginatedAdminServiceList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminService[];
}
interface PaginatedAdminServiceListResponse {
    status: string;
    data: PaginatedAdminServiceList;
}
interface PaginatedAdminStatementList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminStatement[];
}
interface PaginatedAdminStatementListResponse {
    status: string;
    data: PaginatedAdminStatementList;
}
interface PaginatedAdminTransactionCollectionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminTransactionCollection[];
}
interface PaginatedAdminTransactionCollectionListResponse {
    status: string;
    data: PaginatedAdminTransactionCollectionList;
}
interface PaginatedAdminTransactionCollectionTransactionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminTransactionCollectionTransaction[];
}
interface PaginatedAdminTransactionCollectionTransactionListResponse {
    status: string;
    data: PaginatedAdminTransactionCollectionTransactionList;
}
interface PaginatedAdminTransactionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminTransaction$2[];
}
interface PaginatedAdminTransactionListResponse {
    status: string;
    data: PaginatedAdminTransactionList;
}
interface PaginatedAdminTransactionMessageList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminTransactionMessage[];
}
interface PaginatedAdminTransactionMessageListResponse {
    status: string;
    data: PaginatedAdminTransactionMessageList;
}
interface PaginatedAdminTransactionTransitionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminTransactionTransition[];
}
interface PaginatedAdminTransactionTransitionListResponse {
    status: string;
    data: PaginatedAdminTransactionTransitionList;
}
interface PaginatedAdminUserAddressList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminUserAddress[];
}
interface PaginatedAdminUserAddressListResponse {
    status: string;
    data: PaginatedAdminUserAddressList;
}
interface PaginatedAdminUserBankAccountList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminUserBankAccount[];
}
interface PaginatedAdminUserBankAccountListResponse {
    status: string;
    data: PaginatedAdminUserBankAccountList;
}
interface PaginatedAdminUserDocumentList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminUserDocument[];
}
interface PaginatedAdminUserDocumentListResponse {
    status: string;
    data: PaginatedAdminUserDocumentList;
}
interface PaginatedAdminUserGroupList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminUserGroup[];
}
interface PaginatedAdminUserGroupListResponse {
    status: string;
    data: PaginatedAdminUserGroupList;
}
interface PaginatedAdminUserInfoList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminUserInfo[];
}
interface PaginatedAdminUserInfoListResponse {
    status: string;
    data: PaginatedAdminUserInfoList;
}
interface PaginatedAdminUserLegalTermList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminUserLegalTerm[];
}
interface PaginatedAdminUserLegalTermListResponse {
    status: string;
    data: PaginatedAdminUserLegalTermList;
}
interface PaginatedAdminUserLegalTermVersionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminUserLegalTermVersion[];
}
interface PaginatedAdminUserLegalTermVersionListResponse {
    status: string;
    data: PaginatedAdminUserLegalTermVersionList;
}
interface PaginatedAdminUserMessageList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminUserMessage[];
}
interface PaginatedAdminUserMessageListResponse {
    status: string;
    data: PaginatedAdminUserMessageList;
}
interface PaginatedAdminUserWalletAccountList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminUserWalletAccount[];
}
interface PaginatedAdminUserWalletAccountListResponse {
    status: string;
    data: PaginatedAdminUserWalletAccountList;
}
interface PaginatedAdminWebhookList$1 {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminWebhook$1[];
}
interface PaginatedAdminWebhookListResponse$1 {
    status: string;
    data: PaginatedAdminWebhookList$1;
}
interface PaginatedAdminWebhookRequestList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminWebhookRequest[];
}
interface PaginatedAdminWebhookRequestListResponse {
    status: string;
    data: PaginatedAdminWebhookRequestList;
}
interface PaginatedAdminWebhookTaskList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminWebhookTask[];
}
interface PaginatedAdminWebhookTaskListResponse {
    status: string;
    data: PaginatedAdminWebhookTaskList;
}
interface PaginatedGroupPermissionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: GroupPermission[];
}
interface PaginatedGroupPermissionListResponse {
    status: string;
    data: PaginatedGroupPermissionList;
}
interface PaginatedGroupTierRequirementSetItemList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: GroupTierRequirementSetItem[];
}
interface PaginatedGroupTierRequirementSetItemListResponse {
    status: string;
    data: PaginatedGroupTierRequirementSetItemList;
}
interface PaginatedGroupTierRequirementSetList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: GroupTierRequirementSet[];
}
interface PaginatedGroupTierRequirementSetListResponse {
    status: string;
    data: PaginatedGroupTierRequirementSetList;
}
interface PaginatedPermissionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Permission[];
}
interface PaginatedPermissionListResponse {
    status: string;
    data: PaginatedPermissionList;
}
interface PaginatedUserPermissionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: UserPermission[];
}
interface PaginatedUserPermissionListResponse {
    status: string;
    data: PaginatedUserPermissionList;
}
/** Serializer for confirming a password reset attempt. */
interface PasswordResetConfirm {
    /** @maxLength 128 */
    new_password?: string;
    /**
     * @deprecated
     * @maxLength 128
     */
    new_password1?: string;
    /**
     * @deprecated
     * @maxLength 128
     */
    new_password2?: string;
    uid: string;
    token: string;
    /**
     * * `all` - All
     * * `temporary` - Temporary
     * * `none` - None
     * @default "temporary"
     */
    clear_session_option?: "all" | "temporary" | "none";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminAccountAccountAsset {
    id?: string;
    balance?: number;
    available_balance?: number;
    currency?: ReducedAsset;
    limits?: AccountAssetLimit[];
    fees?: AdminAccountAssetFee[];
    metadata?: Record<string, any>;
    active?: boolean;
    settings?: AccountAssetSettings;
    subtypes?: TransactionSubtype[];
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminAccountAccountAssetSettingsUpdate {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes?: number[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCompany$7 {
    id?: string;
    /** @maxLength 100 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    website?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    support_website?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    documentation_website?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    support_email?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @format uri */
    logo?: string | null;
    /** @format uri */
    icon?: string | null;
    address?: AdminCompanyAddress;
    settings?: CompanySettings;
    services?: ReducedService[];
    public?: boolean;
    metadata?: Record<string, any>;
    /**
     * * `test` - Test
     * * `production` - Production
     */
    mode?: "test" | "production";
    /**
     * * `pending` - Pending
     * * `active` - Active
     * * `restricted` - Restricted
     * * `suspended` - Suspended
     */
    status?: "pending" | "active" | "restricted" | "suspended";
    created?: number;
    updated?: number;
    /** @format email */
    system_email?: string;
    owner?: ReducedUserInfo;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCompanyAddress {
    /** @maxLength 200 */
    line_1?: string | null;
    /** @maxLength 200 */
    line_2?: string | null;
    /** @maxLength 100 */
    city?: string | null;
    /** @maxLength 100 */
    state_province?: string | null;
    country?: string | null;
    /** @maxLength 10 */
    postal_code?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCompanyBankAccount {
    id?: number;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 200 */
    number?: string | null;
    /** @maxLength 200 */
    type?: string | null;
    /** @maxLength 200 */
    bank_name?: string | null;
    /** @maxLength 50 */
    bank_code?: string | null;
    /** @maxLength 3 */
    bank_currency?: string | null;
    /** @maxLength 50 */
    branch_code?: string | null;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    branch_address?: CompanyBankBranchAddress;
    /** @maxLength 50 */
    routing_number?: string | null;
    /** @maxLength 16 */
    swift?: string | null;
    /** @maxLength 50 */
    iban?: string | null;
    /** @maxLength 16 */
    bic?: string | null;
    metadata?: Record<string, any>;
    currencies?: ReducedAsset[];
    /** @default false */
    archived?: boolean;
    /** * `deposit` - Deposit */
    action?: "deposit" | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCompanyWalletAccount {
    id?: number;
    /** @maxLength 200 */
    username?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    email?: string | null;
    /** @maxLength 24 */
    mobile?: string | null;
    /** @maxLength 50 */
    name?: string | null;
    /**
     * * `paypal` - Paypal
     * * `venmo` - Venmo
     * * `other` - Other
     */
    type?: "paypal" | "venmo" | "other";
    metadata?: Record<string, any>;
    currencies?: ReducedAsset[];
    /** * `deposit` - Deposit */
    action?: "deposit" | null;
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCreateAccessControlRule {
    id?: number;
    /**
     * * `allow` - Allow
     * * `deny` - Deny
     */
    action?: "allow" | "deny";
    /** * `ip` - Ip */
    type?: "ip";
    /** @maxLength 100 */
    value?: string;
    /** @maxLength 50 */
    label?: string | null;
    user?: string | null;
    group?: string | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCreateAccountAccountAssetFee {
    /** @maxLength 50 */
    name?: string | null;
    /** @min 0 */
    value?: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type?: "credit" | "debit";
    subtype?: string | null;
    /** @maxLength 250 */
    description?: string | null;
    debit_account?: string | null;
    credit_account?: string | null;
    debit_subtype?: string | null;
    credit_subtype?: string | null;
    inferred?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCreateAccountAccountAssetLimit {
    /** @min 0 */
    value?: number;
    /**
     * * `max` - Maximum
     * * `day_max` - Maximum per day
     * * `month_max` - Maximum per month
     * * `min` - Minimum
     * * `overdraft` - Overdraft
     */
    type?: "max" | "day_max" | "month_max" | "min" | "overdraft";
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type?: "credit" | "debit";
    subtype?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCreateUpdateAccountDefinition {
    /** @maxLength 200 */
    name?: string;
    /** @maxLength 200 */
    label?: string | null;
    recon?: boolean;
    /** @default false */
    archived?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCreateUpdateLegalTerm {
    id?: number;
    /**
     * * `system` - System
     * * `company` - Company
     */
    type?: "system" | "company";
    /** @maxLength 100 */
    name?: string;
    /** @maxLength 255 */
    description?: string | null;
    groups?: (string | null)[];
    versions?: AdminReducedLegalTermVersion[];
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCryptoAccount {
    id?: number;
    /** @maxLength 250 */
    address?: string;
    /** @maxLength 50 */
    name?: string | null;
    code?: string | null;
    /**
     * * `bitcoin` - Bitcoin
     * * `ethereum` - Ethereum
     * * `stellar` - Stellar
     * * `other` - Other
     */
    crypto_type?: "bitcoin" | "ethereum" | "stellar" | "other";
    /**
     * * `testnet` - Testnet
     * * `mainnet` - Mainnet
     * @default "testnet"
     */
    network?: "testnet" | "mainnet";
    metadata?: Record<string, any>;
    user?: ReducedUserInfo;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    currencies?: ReducedAsset[];
    account_currencies?: ReducedAccountAsset[];
    /** @default false */
    archived?: boolean;
    /**
     * * `withdraw` - Withdraw
     * * `deposit` - Deposit
     * @default "withdraw"
     */
    action?: "withdraw" | "deposit" | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminDevice {
    id?: number;
    user?: ReducedUserInfo;
    imei?: string;
    /** @maxLength 30 */
    name?: string | null;
    apps?: ReducedDeviceApp[];
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminDeviceApp {
    id?: number;
    /** @maxLength 30 */
    name?: string | null;
    /** * `expo` - Expo */
    type?: "expo";
    token?: string | null;
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminDocumentType {
    id?: number;
    /** @maxLength 50 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    related_resources?: ("user" | "useraddress" | "userbankaccount" | "userwalletaccount" | "usercryptoaccount")[];
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminEmail {
    user?: ReducedUserInfo;
    id?: number;
    /** @format email */
    email?: string;
    primary?: boolean;
    verified?: boolean;
    archived?: boolean;
    /** @default false */
    temporary?: boolean | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminExtendedGroupTier {
    id?: number;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    level?: number;
    /** @maxLength 255 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @deprecated */
    limits?: GroupTierLimit[];
    /** @deprecated */
    fees?: GroupTierFee[];
    settings?: GroupTierSettings;
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminGroupPermission {
    id?: number;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section?: "system" | "admin" | "user";
    /**
     * * `accesscontrolrule` - Access Control Rule
     * * `account` - Account
     * * `accountdefinition` - Account Definition
     * * `address` - Address
     * * `currency` - Currency
     * * `bankaccount` - Bank Account
     * * `company` - Company
     * * `cryptoaccount` - Crypto Account
     * * `device` - Device
     * * `document` - Document
     * * `email` - Email
     * * `group` - Group
     * * `jwt` - Jwt
     * * `legalterm` - Legal Term
     * * `mfa` - Mfa
     * * `mfarule` - Mfa Rule
     * * `mobile` - Mobile
     * * `notification` - Notification
     * * `oauthclient` - Oauth Client
     * * `permission` - Permission
     * * `request` - Request
     * * `service` - Service
     * * `token` - Token
     * * `transaction` - Transaction
     * * `transactionsubtypes` - Transaction Subtypes
     * * `user` - User
     * * `webhook` - Webhook
     */
    type?: "accesscontrolrule" | "account" | "accountdefinition" | "address" | "currency" | "bankaccount" | "company" | "cryptoaccount" | "device" | "document" | "email" | "group" | "jwt" | "legalterm" | "mfa" | "mfarule" | "mobile" | "notification" | "oauthclient" | "permission" | "request" | "service" | "token" | "transaction" | "transactionsubtypes" | "user" | "webhook";
    /**
     * * `view` - View
     * * `add` - Add
     * * `change` - Change
     * * `delete` - Delete
     */
    level?: "view" | "add" | "change" | "delete";
    properties?: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminLegalTermVersion {
    id?: number;
    version?: number;
    /** @maxLength 250 */
    note?: string | null;
    content?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    url?: string | null;
    created?: number;
    /** @default false */
    archived?: boolean;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminMobile {
    user?: ReducedUserInfo;
    id?: number;
    number?: string;
    primary?: boolean;
    verified?: boolean;
    /** @default false */
    archived?: boolean;
    /** @default false */
    temporary?: boolean | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateAccountDefinitionGroup {
    group?: ReducedGroup;
    default?: boolean;
    primary?: boolean;
    currencies?: string[];
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateAccountDefinitionGroupAsset {
    currency?: ReducedAsset;
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateAsset {
    code?: string | null;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    divisibility?: number;
    /** @format uri */
    icon?: string | null;
    manager?: string | null;
    manager_conditions?: Record<string, any>[] | null;
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateAuthToken {
    /** @min 0 */
    expires?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateAuthenticatorRule {
    id?: number;
    /**
     * * `authentication` - Authentication
     * * `authorization` - Authorization
     * * `setup` - Setup
     */
    type?: "authentication" | "authorization" | "setup";
    /**
     * * `ephemeral` - Ephemeral
     * * `durable` - Durable
     * * `permanent` - Permanent
     */
    durability?: "ephemeral" | "durable" | "permanent";
    authenticator_types?: ("totp" | "sms" | "static")[];
    permissions?: (string | null)[];
    group?: ReducedGroup;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    duration?: number | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    session_age?: number | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateCompanyLink {
    id?: number;
    key?: string | null;
    counterparty?: AdminCompanyLinkCounterparty;
    /** * `complete` - Complete */
    status?: "complete";
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateCompanySettings {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes?: UpdateCompanyDisallowedTransactionSubtype[];
    require_transaction_subtypes?: boolean;
    require_verification?: boolean;
    allow_registrations?: boolean;
    allow_overdrafts?: boolean;
    allow_session_durations?: boolean;
    require_registration?: boolean;
    /**
     * @min 300
     * @max 2678400
     */
    default_session_duration?: number;
    /**
     * @min 300
     * @max 2678400
     */
    default_transaction_lifespan?: number;
    require_terms_and_conditions?: boolean;
    require_privacy_policy?: boolean;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    account_reference_length?: number;
    /** @format uri */
    password_reset_url?: string | null;
    /** @format uri */
    password_set_url?: string | null;
    /** @format uri */
    email_verification_url?: string | null;
    /** @format uri */
    deactivate_verification_url?: string | null;
    /** @format uri */
    request_delete_verification_url?: string | null;
    /** @format uri */
    terms_and_conditions_url?: string | null;
    /** @format uri */
    privacy_policy_url?: string | null;
    /** @maxItems 249 */
    nationalities?: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
    /** @maxItems 249 */
    residencies?: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateExtendedAccount {
    reference?: string;
    /**
     * @maxLength 200
     * @default "default"
     */
    name?: string;
    definition?: string | null;
    /** @maxLength 200 */
    label?: string | null;
    primary?: boolean;
    recon?: boolean;
    user?: ReducedUserInfo;
    currencies?: AdminAccountAccountAsset[];
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A mixin that handles the application of permissions to properties on a
 * serializer using the built-in permissions system.
 *
 * NOTE : This only works if the following conditions are met:
 *     - The request context must contain a user.
 *     - The class this mixin is attached must be a serializer.
 *     - The class this mixin is attached to must have a Meta.model defined.
 *     - The Meta.model class must have a PERMISSION_TYPE defined.
 */
interface PatchedAdminUpdateExtendedTransaction {
    id?: string;
    collection?: string;
    parent?: string | null;
    partner?: AdminPartnerTransaction | null;
    index?: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type?: "credit" | "debit";
    subtype?: string | null;
    /** @maxLength 100 */
    note?: string;
    metadata?: Record<string, any>;
    /**
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status?: "Pending" | "Complete" | "Failed";
    reference?: string | null;
    amount?: number;
    fee?: number;
    total_amount?: number;
    balance?: number;
    label?: string;
    account?: string;
    currency?: ReducedAsset;
    account_currency?: TransactionAccountAsset;
    creator?: ReducedUserInfo;
    user?: ReducedUserInfo;
    fees?: TransactionFee[];
    inclusive?: boolean;
    /** @default false */
    archived?: boolean;
    executed?: number | null;
    expires?: number;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateGroup {
    /** @maxLength 80 */
    name?: string;
    /** @maxLength 80 */
    label?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @format uri */
    icon?: string | null;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section?: "system" | "admin" | "user";
    default?: boolean;
    public?: boolean;
    listed?: boolean;
    tiers?: ReducedGroupTier[];
    settings?: AdminGroupSettings;
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateGroupFee {
    /** @maxLength 50 */
    name?: string | null;
    /** @min 0 */
    value?: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type?: "credit" | "debit";
    subtype?: string | null;
    /** @maxLength 250 */
    description?: string | null;
    debit_account?: string | null;
    credit_account?: string | null;
    debit_subtype?: string | null;
    credit_subtype?: string | null;
    inferred?: boolean;
    account_definition?: string | null;
    currency?: string;
    /** @default false */
    archived?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateGroupSettings {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes?: UpdateGroupDisallowedTransactionSubtype[];
    /**
     * @format uri
     * @maxLength 200
     */
    password_reset_url?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    password_set_url?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    email_verification_url?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    deactivate_verification_url?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    request_delete_verification_url?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateGroupTierFee {
    /** @maxLength 50 */
    name?: string | null;
    /** @min 0 */
    value?: number;
    /**
     * @format double
     * @min 0
     * @max 1000
     * @exclusiveMax true
     */
    percentage?: number;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type?: "credit" | "debit";
    subtype?: string | null;
    /** @maxLength 250 */
    description?: string | null;
    debit_account?: string | null;
    credit_account?: string | null;
    debit_subtype?: string | null;
    credit_subtype?: string | null;
    inferred?: boolean;
    account_definition?: string | null;
    currency?: string;
    /** @default false */
    archived?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateGroupTierLimit {
    /** @min 0 */
    value?: number;
    /**
     * * `max` - Maximum
     * * `day_max` - Maximum per day
     * * `month_max` - Maximum per month
     * * `min` - Minimum
     * * `overdraft` - Overdraft
     */
    type?: "max" | "day_max" | "month_max" | "min" | "overdraft";
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type?: "credit" | "debit";
    subtype?: string | null;
    currency?: string;
    account_definition?: string | null;
    /** @default false */
    archived?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateGroupTierSettings {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes?: UpdateGroupTierDisallowedTransactionSubtype[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateOauthClient {
    id?: string;
    /**
     * * `apple` - Apple
     * * `google` - Google
     */
    provider?: "apple" | "google";
    /** @maxLength 250 */
    application?: string;
    client_id?: string;
    data?: Record<string, any>;
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateService {
    id?: number;
    company?: number | null;
    slug?: string | null;
    /**
     * * `system` - System
     * * `public` - Public
     * * `private` - Private
     */
    type?: "system" | "public" | "private";
    name?: string;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxItems 10 */
    tags?: string[] | null;
    verified?: boolean;
    public?: boolean;
    url?: string;
    /** @maxLength 250 */
    management_url?: string | null;
    terms_and_conditions_url?: string | null;
    website_url?: string | null;
    active?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateTransactionCollection {
    id?: string;
    transactions?: AdminTransactionCollectionTransaction[];
    /**
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    status?: "Quoted" | "Pending" | "Complete" | "Failed";
    checks?: ("type" | "verification" | "limits" | "balance")[] | null;
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateTransactionSubtype {
    id?: number;
    /** @maxLength 50 */
    name?: string;
    /** @maxLength 50 */
    label?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type?: "credit" | "debit";
    /**
     * * `partner` - Partner
     * * `single` - Single
     * @deprecated
     */
    usage_type?: "partner" | "single" | null;
    partner?: number | null;
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateTransactionTransition {
    id?: string;
    set?: string;
    transaction?: AdminExtendedTransaction;
    /**
     * * `approved` - Approved
     * * `declined` - Declined
     */
    status?: "approved" | "declined";
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    from_status?: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    /**
     * * `Initiating` - Initiating
     * * `Quoted` - Quoted
     * * `Pending` - Pending
     * * `Complete` - Complete
     * * `Failed` - Failed
     */
    to_status?: "Initiating" | "Quoted" | "Pending" | "Complete" | "Failed";
    index?: number;
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateUserDocument {
    id?: number;
    user?: ReducedUserInfo;
    /** @format uri */
    file?: string;
    type?: number;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    metadata?: Record<string, any>;
    /** @maxLength 250 */
    note?: string | null;
    /** @default false */
    archived?: boolean;
    expires?: number | null;
}
/**
 * Default user serializer for showing information regarding the user.
 * Information about user setting and permissions shown in
 * the ExtendedUserInfoSerializer
 */
interface PatchedAdminUpdateUserInfo {
    id?: string;
    /**
     * @maxLength 150
     * @pattern ^[\w.@+-]+$
     */
    username?: string | null;
    /** @format email */
    email?: string;
    mobile?: string;
    /** @maxLength 50 */
    first_name?: string | null;
    /** @maxLength 50 */
    middle_name?: string | null;
    /** @maxLength 50 */
    last_name?: string | null;
    /** @format uri */
    profile?: string | null;
    /**
     * @maxItems 1
     * @minItems 0
     */
    groups?: (string | null)[];
    /** @default false */
    temporary?: boolean | null;
    /** @maxLength 24 */
    id_number?: string | null;
    /** @format date */
    birth_date?: string | null;
    currency?: ReducedAsset;
    account?: string;
    /** @default 0 */
    balance?: number;
    /** @default 0 */
    available_balance?: number;
    company?: string;
    owner?: boolean;
    /** @maxLength 24 */
    language?: string;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    nationality?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    residency?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /**
     * * `male` - Male
     * * `female` - Female
     * * `other` - Other
     * * `not_specified` - Not Specified
     */
    gender?: "male" | "female" | "other" | "not_specified" | null;
    /**
     * * `mr` - Mr
     * * `mrs` - Mrs
     * * `ms` - Ms
     * * `mx` - Mx
     */
    title?: "mr" | "mrs" | "ms" | "mx" | null;
    /**
     * * `single` - Single
     * * `married` - Married
     * * `divorced` - Divorced
     * * `widowed` - Widowed
     */
    marital_status?: "single" | "married" | "divorced" | "widowed" | null;
    /** @maxLength 100 */
    fathers_name?: string | null;
    /** @maxLength 100 */
    mothers_name?: string | null;
    /** @maxLength 100 */
    grandfathers_name?: string | null;
    /** @maxLength 100 */
    grandmothers_name?: string | null;
    /** @maxLength 100 */
    central_bank_number?: string | null;
    metadata?: Record<string, any>;
    /** @maxLength 100 */
    timezone?: string | null;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    business_name?: string | null;
    /** @deprecated */
    verified?: boolean;
    verification?: UserVerification;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    created?: number;
    updated?: number;
    /** @default false */
    deactivated?: boolean;
    /**
     * * `retaining` - Retaining
     * * `delete_requested` - Delete Requested
     * * `deleted` - Deleted
     */
    retention_state?: "retaining" | "delete_requested" | "deleted";
    /** @default false */
    archived?: boolean;
    last_login?: number;
    settings?: UserSettings$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateUserSettings {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes?: UpdateUserDisallowedTransactionSubtype[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUserAddress {
    id?: number;
    /**
     * * `permanent` - Permanent
     * * `contact` - Contact
     * * `shipping` - Shipping
     * * `billing` - Billing
     * * `business` - Business
     */
    type?: "permanent" | "contact" | "shipping" | "billing" | "business";
    user?: ReducedUserInfo;
    /** @maxLength 200 */
    line_1?: string | null;
    /** @maxLength 200 */
    line_2?: string | null;
    /** @maxLength 100 */
    city?: string | null;
    /** @maxLength 100 */
    state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    postal_code?: string | null;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUserBankAccount {
    id?: number;
    user?: ReducedUserInfo;
    /** @maxLength 200 */
    name?: string | null;
    owner?: BankOwner | null;
    /** @maxLength 200 */
    number?: string | null;
    /** @maxLength 200 */
    type?: string | null;
    /**
     * * `individual` - Individual
     * * `business` - Business
     */
    beneficiary_type?: "individual" | "business" | null;
    /** @maxLength 20 */
    clabe?: string | null;
    /** @maxLength 200 */
    bank_name?: string | null;
    /** @maxLength 50 */
    bank_code?: string | null;
    /** @maxLength 3 */
    bank_currency?: string | null;
    /** @maxLength 50 */
    branch_code?: string | null;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    branch_address?: AdminUserBankBranchAddress;
    /** @maxLength 255 */
    branch_address_text?: string | null;
    /** @maxLength 50 */
    routing_number?: string | null;
    /** @maxLength 16 */
    swift?: string | null;
    /** @maxLength 50 */
    iban?: string | null;
    /** @maxLength 16 */
    bic?: string | null;
    code?: string | null;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    metadata?: Record<string, any>;
    /** @default false */
    archived?: boolean;
    currencies?: ReducedAsset[];
    account_currencies?: ReducedAccountAsset[];
    /**
     * * `withdraw` - Withdraw
     * * `deposit` - Deposit
     * @default "withdraw"
     */
    action?: "withdraw" | "deposit" | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUserPermission {
    id?: number;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section?: "system" | "admin" | "user";
    /**
     * * `accesscontrolrule` - Access Control Rule
     * * `account` - Account
     * * `accountdefinition` - Account Definition
     * * `address` - Address
     * * `currency` - Currency
     * * `bankaccount` - Bank Account
     * * `company` - Company
     * * `cryptoaccount` - Crypto Account
     * * `device` - Device
     * * `document` - Document
     * * `email` - Email
     * * `group` - Group
     * * `jwt` - Jwt
     * * `legalterm` - Legal Term
     * * `mfa` - Mfa
     * * `mfarule` - Mfa Rule
     * * `mobile` - Mobile
     * * `notification` - Notification
     * * `oauthclient` - Oauth Client
     * * `permission` - Permission
     * * `request` - Request
     * * `service` - Service
     * * `token` - Token
     * * `transaction` - Transaction
     * * `transactionsubtypes` - Transaction Subtypes
     * * `user` - User
     * * `webhook` - Webhook
     */
    type?: "accesscontrolrule" | "account" | "accountdefinition" | "address" | "currency" | "bankaccount" | "company" | "cryptoaccount" | "device" | "document" | "email" | "group" | "jwt" | "legalterm" | "mfa" | "mfarule" | "mobile" | "notification" | "oauthclient" | "permission" | "request" | "service" | "token" | "transaction" | "transactionsubtypes" | "user" | "webhook";
    /**
     * * `view` - View
     * * `add` - Add
     * * `change` - Change
     * * `delete` - Delete
     */
    level?: "view" | "add" | "change" | "delete";
    properties?: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUserWalletAccount {
    id?: number;
    user?: ReducedUserInfo;
    /** @maxLength 200 */
    username?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    email?: string | null;
    /** @maxLength 24 */
    mobile?: string | null;
    /** @maxLength 50 */
    name?: string | null;
    code?: string | null;
    /**
     * * `paypal` - Paypal
     * * `venmo` - Venmo
     * * `other` - Other
     */
    type?: "paypal" | "venmo" | "other";
    metadata?: Record<string, any>;
    /**
     * * `obsolete` - Obsolete
     * * `declined` - Declined
     * * `pending` - Pending
     * * `incomplete` - Incomplete
     * * `verified` - Verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    currencies?: ReducedAsset[];
    /** @default false */
    archived?: boolean;
    /**
     * * `withdraw` - Withdraw
     * * `deposit` - Deposit
     * @default "withdraw"
     */
    action?: "withdraw" | "deposit" | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminWebhook$1 {
    id?: number;
    /** @format uri */
    url?: string;
    /**
     * * `company.link.create` - Company Link Create
     * * `company.link.update` - Company Link Update
     * * `company.update` - Company Update
     * * `currency.create` - Currency Create
     * * `currency.update` - Currency Update
     * * `user.create` - User Create
     * * `user.update` - User Update
     * * `user.password.reset` - User Password Reset
     * * `user.password.set` - User Password Set
     * * `user.deactivate.verify` - User Deactivate Verify
     * * `user.request_delete.verify` - User Request Delete Verify
     * * `user.email.verify` - User Email Verify
     * * `user.mobile.verify` - User Mobile Verify
     * * `email.create` - Email Create
     * * `email.update` - Email Update
     * * `mobile.create` - Mobile Create
     * * `mobile.update` - Mobile Update
     * * `address.create` - Address Create
     * * `address.update` - Address Update
     * * `document.create` - Document Create
     * * `document.update` - Document Update
     * * `bank_account.create` - Bank Account Create
     * * `bank_account.update` - Bank Account Update
     * * `crypto_account.create` - Crypto Account Create
     * * `crypto_account.update` - Crypto Account Update
     * * `account.create` - Account Create
     * * `account.update` - Account Update
     * * `account.currency.create` - Account Currency Create
     * * `transaction.create` - Transaction Create
     * * `transaction.update` - Transaction Update
     * * `transaction.initiate` - Transaction Initiate
     * * `transaction.execute` - Transaction Execute
     * * `transaction.transition.create` - Transaction Transition Create
     * * `transaction.transition.update` - Transaction Transition Update
     * * `mfa.sms.verify` - Mfa Sms Verify
     */
    event?: "company.link.create" | "company.link.update" | "company.update" | "currency.create" | "currency.update" | "user.create" | "user.update" | "user.password.reset" | "user.password.set" | "user.deactivate.verify" | "user.request_delete.verify" | "user.email.verify" | "user.mobile.verify" | "email.create" | "email.update" | "mobile.create" | "mobile.update" | "address.create" | "address.update" | "document.create" | "document.update" | "bank_account.create" | "bank_account.update" | "crypto_account.create" | "crypto_account.update" | "account.create" | "account.update" | "account.currency.create" | "transaction.create" | "transaction.update" | "transaction.initiate" | "transaction.execute" | "transaction.transition.create" | "transaction.transition.update" | "mfa.sms.verify";
    /** @maxLength 250 */
    secret?: string;
    /** @maxLength 250 */
    condition?: string | null;
    enabled?: boolean;
    service?: ReducedService | null;
    /** @default false */
    archived?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedCreateUpdateGroupTierRequirementSet {
    id?: number;
    parent?: number | null;
    /** @maxLength 50 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * * `all` - All
     * * `any` - Any
     */
    condition?: "all" | "any";
    /**
     * @min 1
     * @max 24
     */
    min_condition_matches?: number | null;
    items?: GroupTierRequirementSetItem[];
    /**
     * @min 0
     * @max 2147483647
     */
    weight?: number | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedGroupTierRequirementSetItem {
    id?: number;
    /** * `resource` - Resource */
    type?: "resource";
    rule?: GroupTierRequirementSetItemRule;
    /** @maxLength 50 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * @min 0
     * @max 2147483647
     */
    weight?: number | null;
    created?: number;
    updated?: number;
}
/**
 * Generic permission handling (No properties support).
 *     - Services
 *     - Auth tokens
 */
interface Permission {
    id: number;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
    /**
     * * `accesscontrolrule` - Access Control Rule
     * * `account` - Account
     * * `accountdefinition` - Account Definition
     * * `address` - Address
     * * `currency` - Currency
     * * `bankaccount` - Bank Account
     * * `company` - Company
     * * `cryptoaccount` - Crypto Account
     * * `device` - Device
     * * `document` - Document
     * * `email` - Email
     * * `group` - Group
     * * `jwt` - Jwt
     * * `legalterm` - Legal Term
     * * `mfa` - Mfa
     * * `mfarule` - Mfa Rule
     * * `mobile` - Mobile
     * * `notification` - Notification
     * * `oauthclient` - Oauth Client
     * * `permission` - Permission
     * * `request` - Request
     * * `service` - Service
     * * `token` - Token
     * * `transaction` - Transaction
     * * `transactionsubtypes` - Transaction Subtypes
     * * `user` - User
     * * `webhook` - Webhook
     */
    type: "accesscontrolrule" | "account" | "accountdefinition" | "address" | "currency" | "bankaccount" | "company" | "cryptoaccount" | "device" | "document" | "email" | "group" | "jwt" | "legalterm" | "mfa" | "mfarule" | "mobile" | "notification" | "oauthclient" | "permission" | "request" | "service" | "token" | "transaction" | "transactionsubtypes" | "user" | "webhook";
    /**
     * * `view` - View
     * * `add` - Add
     * * `change` - Change
     * * `delete` - Delete
     */
    level: "view" | "add" | "change" | "delete";
}
interface PermissionResponse {
    status: string;
    /**
     * Generic permission handling (No properties support).
     *     - Services
     *     - Auth tokens
     */
    data: Permission;
}
/**
 * A reduced user serializer showing only the necessary information for post
 * login serialization.
 */
interface ProtectedUserInfo {
    id: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedAccount {
    reference: string;
    /** @maxLength 200 */
    name?: string;
    /** @maxLength 200 */
    label?: string | null;
    definition: string | null;
    primary: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedAccountAsset {
    id: string;
    balance: number;
    available_balance: number;
    account: ReducedAccount;
    currency: ReducedAsset;
    active: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedAccountDefinition {
    /** @maxLength 200 */
    name: string;
    /** @maxLength 200 */
    label?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedAsset {
    /** @maxLength 30 */
    code?: string | null;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
    /** @format uri */
    icon: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedCompany {
    id: string;
    name: string | null;
    /** @format uri */
    icon: string | null;
    /**
     * * `test` - Test
     * * `production` - Production
     */
    mode: "test" | "production";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedDeviceApp {
    id: number;
    /** @maxLength 30 */
    name?: string | null;
    /** * `expo` - Expo */
    type: "expo";
    token: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedDocumentType {
    id: number;
    name: string | null;
    description: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedGroup {
    /** @maxLength 80 */
    name: string;
    /** @maxLength 80 */
    label?: string | null;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedGroupTier {
    id: number;
    level: number;
    name: string | null;
    description: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedService {
    id: number;
    slug: string | null;
    name: string;
    url: string;
    /**
     * * `system` - System
     * * `public` - Public
     * * `private` - Private
     */
    type: "system" | "public" | "private";
}
interface ReducedTransactionSubtype {
    id: number;
    /** @maxLength 50 */
    name: string;
    /** @maxLength 50 */
    label?: string | null;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
}
/**
 * A condensed user serializer showing only the necessary user information
 * in order to identifiy the user.
 */
interface ReducedUserInfo {
    id: string;
    username: string | null;
    /** @format email */
    email: string | null;
    mobile: string | null;
    first_name: string | null;
    middle_name: string | null;
    last_name: string | null;
    /** @format uri */
    profile?: string | null;
    groups: ReducedGroup[];
    temporary: boolean | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ResourceRequirementRule {
    /**
     * * `address` - Address
     * * `bank_account` - Bank Account
     * * `document` - Document
     * * `email` - Email
     * * `mobile` - Mobile
     * * `user` - User
     */
    resource: "address" | "bank_account" | "document" | "email" | "mobile" | "user";
    condition: Record<string, any>;
}
interface TotalTransaction {
    total_amount: number;
    amount: number;
    fees: number;
    count: number;
    currency: string;
}
interface TotalTransactionResponse {
    status: string;
    data: TotalTransaction;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface TransactionAccountAsset {
    id: string;
    account: ReducedAccount;
    currency: ReducedAsset;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface TransactionFee {
    description: string;
    amount: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface TransactionSubtype {
    id: number;
    name: string;
    label: string | null;
    description: string | null;
    /**
     * * `credit` - Credit
     * * `debit` - Debit
     */
    tx_type: "credit" | "debit";
    /**
     * * `partner` - Partner
     * * `single` - Single
     * @deprecated
     */
    usage_type: "partner" | "single" | null;
    partner: ReducedTransactionSubtype;
    created: number;
    updated: number;
}
interface UpdateCompanyDisallowedTransactionSubtype {
    subtype: number;
    currency?: string | null;
}
interface UpdateGroupDisallowedTransactionSubtype {
    subtype: number;
    currency?: string | null;
    account_definition?: string | null;
}
interface UpdateGroupTierDisallowedTransactionSubtype {
    subtype: number;
    currency?: string | null;
    account_definition?: string | null;
}
interface UpdateUserDisallowedTransactionSubtype {
    subtype: number;
    currency?: string;
}
interface UserDisallowedTransactionSubtype {
    subtype: ReducedTransactionSubtype;
    currency: ReducedAsset;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserPermission {
    id: number;
    /**
     * * `system` - System
     * * `admin` - Admin
     * * `user` - User
     */
    section: "system" | "admin" | "user";
    /**
     * * `accesscontrolrule` - Access Control Rule
     * * `account` - Account
     * * `accountdefinition` - Account Definition
     * * `address` - Address
     * * `currency` - Currency
     * * `bankaccount` - Bank Account
     * * `company` - Company
     * * `cryptoaccount` - Crypto Account
     * * `device` - Device
     * * `document` - Document
     * * `email` - Email
     * * `group` - Group
     * * `jwt` - Jwt
     * * `legalterm` - Legal Term
     * * `mfa` - Mfa
     * * `mfarule` - Mfa Rule
     * * `mobile` - Mobile
     * * `notification` - Notification
     * * `oauthclient` - Oauth Client
     * * `permission` - Permission
     * * `request` - Request
     * * `service` - Service
     * * `token` - Token
     * * `transaction` - Transaction
     * * `transactionsubtypes` - Transaction Subtypes
     * * `user` - User
     * * `webhook` - Webhook
     */
    type: "accesscontrolrule" | "account" | "accountdefinition" | "address" | "currency" | "bankaccount" | "company" | "cryptoaccount" | "device" | "document" | "email" | "group" | "jwt" | "legalterm" | "mfa" | "mfarule" | "mobile" | "notification" | "oauthclient" | "permission" | "request" | "service" | "token" | "transaction" | "transactionsubtypes" | "user" | "webhook";
    /**
     * * `view` - View
     * * `add` - Add
     * * `change` - Change
     * * `delete` - Delete
     */
    level: "view" | "add" | "change" | "delete";
    properties: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserSettings$1 {
    allow_transactions?: boolean;
    allow_debit_transactions?: boolean;
    allow_credit_transactions?: boolean;
    disallowed_transaction_subtypes: UserDisallowedTransactionSubtype[];
}
interface UserSettingsResponse$1 {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: UserSettings$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserVerification {
    email: boolean;
    mobile: boolean;
}
interface VerifyDeactivate {
    key: string;
}
interface VerifyRequestDelete {
    key: string;
}
interface AccessControlRulesListParams {
    action?: string;
    group?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    type?: string;
    user?: string;
}
interface AccountCurrenciesListParams {
    account?: string;
    account__definition?: string;
    account__name?: string;
    account__name__contains?: string;
    active?: boolean;
    archived?: boolean;
    available_balance?: number;
    available_balance__gt?: number;
    available_balance__lt?: number;
    balance?: number;
    balance__gt?: number;
    balance__lt?: number;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    /** @format date-time */
    exclude__transactions__created__gt?: string;
    /** @format date-time */
    exclude__transactions__created__lt?: string;
    group?: string;
    historic?: string;
    orderby?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @format date-time */
    transactions__created__gt?: string;
    /** @format date-time */
    transactions__created__lt?: string;
    /** @format date-time */
    updated?: string;
    /** @format date-time */
    updated__gt?: string;
    /** @format date-time */
    updated__gte?: string;
    /** @format date-time */
    updated__lt?: string;
    /** @format date-time */
    updated__lte?: string;
    user?: string;
    user__isnull?: boolean;
}
interface AccountDefinitionsListParams {
    archived?: boolean;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    group?: string;
    /**
     * Ordering
     *
     * * `created` - Created
     * * `-created` - Created (descending)
     * * `name` - Name
     * * `-name` - Name (descending)
     */
    orderby?: ("-created" | "-name" | "created" | "name")[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AccountDefinitionsGroupsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    definitionName: string;
}
interface AccountDefinitionsGroupsCurrenciesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    definitionGroupName: string;
    /** @pattern ^\w+$ */
    definitionName: string;
}
interface AccountsListParams {
    active?: boolean;
    archived?: boolean;
    available_balance?: number;
    available_balance__gt?: number;
    available_balance__lt?: number;
    balance?: number;
    balance__gt?: number;
    balance__lt?: number;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    definition?: string;
    group?: string;
    name?: string;
    orderby?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    primary?: boolean;
    recon?: boolean;
    reference?: string;
    reference__contains?: string;
    search?: string;
    /** @format date-time */
    updated?: string;
    /** @format date-time */
    updated__gt?: string;
    /** @format date-time */
    updated__gte?: string;
    /** @format date-time */
    updated__lt?: string;
    /** @format date-time */
    updated__lte?: string;
    user?: string;
    user__isnull?: boolean;
}
interface AccountsCurrenciesListParams {
    account?: string;
    account__definition?: string;
    account__name?: string;
    account__name__contains?: string;
    active?: boolean;
    archived?: boolean;
    available_balance?: number;
    available_balance__gt?: number;
    available_balance__lt?: number;
    balance?: number;
    balance__gt?: number;
    balance__lt?: number;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    /** @format date-time */
    exclude__transactions__created__gt?: string;
    /** @format date-time */
    exclude__transactions__created__lt?: string;
    group?: string;
    historic?: string;
    orderby?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @format date-time */
    transactions__created__gt?: string;
    /** @format date-time */
    transactions__created__lt?: string;
    /** @format date-time */
    updated?: string;
    /** @format date-time */
    updated__gt?: string;
    /** @format date-time */
    updated__gte?: string;
    /** @format date-time */
    updated__lt?: string;
    /** @format date-time */
    updated__lte?: string;
    user?: string;
    user__isnull?: boolean;
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    reference: string;
}
interface AccountsCurrenciesLimitsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    code: string;
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    reference: string;
}
interface AuthenticatorRulesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface BankAccountsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface BankAccountsCurrenciesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\d+$ */
    id: string;
}
interface CompanyLinksListParams {
    key?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
}
interface CurrenciesListParams {
    archived?: boolean;
    code?: string;
    code__in?: string;
    display_code?: string;
    /**
     * Ordering
     *
     * * `created` - Created
     * * `-created` - Created (descending)
     * * `code` - Code
     * * `-code` - Code (descending)
     * * `display_code` - Display code
     * * `-display_code` - Display code (descending)
     */
    orderby?: ("-code" | "-created" | "-display_code" | "code" | "created" | "display_code")[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    unit?: string;
}
interface DocumentTypesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface ExportsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    resource?: string;
    section?: string;
    status?: string;
    user?: string;
}
interface GroupsListParams {
    archived?: boolean;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__lt?: string;
    default?: boolean;
    name?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    public?: boolean;
    section?: string;
    /** @format date-time */
    updated?: string;
    /** @format date-time */
    updated__gt?: string;
    /** @format date-time */
    updated__lt?: string;
}
interface GroupsPermissionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    groupName: string;
}
interface GroupsTiersListParams {
    active?: boolean;
    level?: number;
    requirement?: string;
    /** @pattern ^\w+$ */
    groupName: string;
}
interface GroupsTiersRequirementSetsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    groupName: string;
    /** @pattern ^\d+$ */
    tierId: string;
}
interface GroupsTiersRequirementSetsItemsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    groupName: string;
    /** @pattern ^\d+$ */
    reqSetId: string;
    /** @pattern ^\d+$ */
    tierId: string;
}
interface LegalTermsListParams {
    group?: string;
    name?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    type?: string;
}
interface LegalTermsVersionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\d+$ */
    id: string;
}
interface MetricsListParams {
    archived?: boolean;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    section?: string;
    slug?: string;
    slug__in?: string;
    type?: string;
    user?: string;
}
interface MetricsPointsListParams {
    /** @format date-time */
    date?: string;
    /** @format date-time */
    date__gt?: string;
    /** @format date-time */
    date__gte?: string;
    /** @format date-time */
    date__lt?: string;
    /** @format date-time */
    date__lte?: string;
    interval?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    identifier: string;
}
interface OauthClientsListParams {
    application?: string;
    client_id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    provider?: string;
}
interface PermissionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface RequestsListParams {
    content_type?: string;
    key?: string;
    method?: string;
    method__in?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    path?: string;
    path__contains?: string;
    resource?: string;
    resource_id?: string;
    scheme?: string;
    status_code?: number;
    user?: string;
}
interface SearchRetrieveParams {
    page?: number;
    page_size?: number;
    query?: string;
    resources?: string;
}
interface SearchRetrieveData {
    highest_count?: number;
    overall_total?: number;
    next?: string;
    previous?: string;
    results?: {
        users?: object[];
        accounts?: object[];
        transactions?: object[];
    };
}
interface ServicesListParams {
    active?: boolean;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    slug?: string;
    type?: string;
    /** Multiple values may be separated by commas. */
    type__in?: string[];
}
interface ServicesPermissionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\d+$ */
    serviceId: string;
}
interface StatementsListParams {
    account?: string;
    archived?: boolean;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    user?: string;
}
interface SubtypesListParams {
    archived?: boolean;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    name?: string;
    partner__isnull?: boolean;
    tx_type?: string;
    usage_type?: string;
}
interface TransactionCollectionsListParams {
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    transactions__account?: string;
    transactions__amount?: string;
    transactions__amount__abs?: string;
    transactions__amount__abs__gt?: string;
    transactions__amount__abs__gte?: string;
    transactions__amount__abs__lt?: string;
    transactions__amount__abs__lte?: string;
    transactions__amount__gt?: string;
    transactions__amount__gte?: string;
    transactions__amount__lt?: string;
    transactions__amount__lte?: string;
    transactions__currency?: string;
    transactions__status?: string;
    transactions__subtype?: string;
    transactions__tx_type?: string;
    /** @format date-time */
    updated?: string;
    /** @format date-time */
    updated__gt?: string;
    /** @format date-time */
    updated__gte?: string;
    /** @format date-time */
    updated__lt?: string;
    /** @format date-time */
    updated__lte?: string;
    user?: string;
}
interface TransactionCollectionsTransactionsListParams {
    account?: string;
    account__definition?: string;
    account__exclude?: string;
    account__name?: string;
    account__recon?: boolean;
    amount?: string;
    amount__abs?: string;
    amount__abs__gt?: string;
    amount__abs__gte?: string;
    amount__abs__lt?: string;
    amount__abs__lte?: string;
    amount__gt?: string;
    amount__gte?: string;
    amount__lt?: string;
    amount__lte?: string;
    collection?: string;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    /** @format date-time */
    executed?: string | null;
    /** @format date-time */
    executed__gt?: string | null;
    /** @format date-time */
    executed__gte?: string | null;
    /** @format date-time */
    executed__lt?: string | null;
    /** @format date-time */
    executed__lte?: string | null;
    group?: string;
    group__isnull?: boolean;
    id?: string;
    id__in?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    parent?: string;
    partner?: string;
    partner__isnull?: boolean;
    reference?: string;
    reference__gt?: string;
    reference__gte?: string;
    reference__lt?: string;
    reference__lte?: string;
    search?: string;
    status?: string;
    /** Multiple values may be separated by commas. */
    status__in?: string[];
    subtype?: string;
    subtype__exclude?: string;
    subtype__in?: string;
    tx_type?: string;
    /** @format date-time */
    updated?: string;
    /** @format date-time */
    updated__gt?: string;
    /** @format date-time */
    updated__gte?: string;
    /** @format date-time */
    updated__lt?: string;
    /** @format date-time */
    updated__lte?: string;
    user?: string;
    user__exclude?: string;
    user__isnull?: boolean;
    user__temporary?: boolean;
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    identifier: string;
}
interface TransactionTransitionsListParams {
    collection?: string;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    set?: string;
    status?: string;
    /** Multiple values may be separated by commas. */
    status__in?: string[];
    transaction?: string;
    /** @format date-time */
    updated?: string;
    /** @format date-time */
    updated__gt?: string;
    /** @format date-time */
    updated__gte?: string;
    /** @format date-time */
    updated__lt?: string;
    /** @format date-time */
    updated__lte?: string;
}
interface TransactionsListParams$2 {
    account?: string;
    account__definition?: string;
    account__exclude?: string;
    account__name?: string;
    account__recon?: boolean;
    amount?: string;
    amount__abs?: string;
    amount__abs__gt?: string;
    amount__abs__gte?: string;
    amount__abs__lt?: string;
    amount__abs__lte?: string;
    amount__gt?: string;
    amount__gte?: string;
    amount__lt?: string;
    amount__lte?: string;
    collection?: string;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    /** @format date-time */
    executed?: string | null;
    /** @format date-time */
    executed__gt?: string | null;
    /** @format date-time */
    executed__gte?: string | null;
    /** @format date-time */
    executed__lt?: string | null;
    /** @format date-time */
    executed__lte?: string | null;
    group?: string;
    group__isnull?: boolean;
    id?: string;
    id__in?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    parent?: string;
    partner?: string;
    partner__isnull?: boolean;
    reference?: string;
    reference__gt?: string;
    reference__gte?: string;
    reference__lt?: string;
    reference__lte?: string;
    search?: string;
    status?: string;
    /** Multiple values may be separated by commas. */
    status__in?: string[];
    subtype?: string;
    subtype__exclude?: string;
    subtype__in?: string;
    tx_type?: string;
    /** @format date-time */
    updated?: string;
    /** @format date-time */
    updated__gt?: string;
    /** @format date-time */
    updated__gte?: string;
    /** @format date-time */
    updated__lt?: string;
    /** @format date-time */
    updated__lte?: string;
    user?: string;
    user__exclude?: string;
    user__isnull?: boolean;
    user__temporary?: boolean;
}
interface TransactionsMessagesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    txCode: string;
}
interface UsersListParams {
    account?: string;
    account__label?: string;
    account__name?: string;
    archived?: boolean;
    balance?: string;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__lt?: string;
    currency?: string;
    currency__code?: string;
    deactivated?: boolean;
    email?: string;
    email__contains?: string;
    first_name?: string;
    first_name__contains?: string;
    group?: string;
    group__isnull?: boolean;
    id?: string;
    id__contains?: string;
    id__in?: string;
    id_number?: string;
    id_number__contains?: string;
    language?: string;
    /** @format date-time */
    last_login?: string | null;
    /** @format date-time */
    last_login__gt?: string | null;
    /** @format date-time */
    last_login__lt?: string | null;
    last_name?: string;
    last_name__contains?: string;
    middle_name?: string;
    middle_name__contains?: string;
    mobile?: string;
    mobile__contains?: string;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    nationality?: "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AS" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CC" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CU" | "CV" | "CW" | "CX" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FM" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HM" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IR" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KP" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MH" | "MK" | "ML" | "MM" | "MN" | "MO" | "MP" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NF" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PW" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SD" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SY" | "SZ" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "UM" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VI" | "VN" | "VU" | "WF" | "WS" | "YE" | "YT" | "ZA" | "ZM" | "ZW" | null;
    /**
     * Ordering
     *
     * * `last_login` - Last login
     * * `-last_login` - Last login (descending)
     * * `updated` - Updated
     * * `-updated` - Updated (descending)
     * * `created` - Created
     * * `-created` - Created (descending)
     */
    orderby?: ("-created" | "-last_login" | "-updated" | "created" | "last_login" | "updated")[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Türkiye
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    residency?: "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AS" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CC" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CU" | "CV" | "CW" | "CX" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FM" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HM" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IR" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KP" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MH" | "MK" | "ML" | "MM" | "MN" | "MO" | "MP" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NF" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PW" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SD" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SY" | "SZ" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "UM" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VI" | "VN" | "VU" | "WF" | "WS" | "YE" | "YT" | "ZA" | "ZM" | "ZW" | null;
    retention_state?: string;
    search?: string;
    service?: string;
    status?: string;
    /** Multiple values may be separated by commas. */
    status__in?: string[];
    temporary?: boolean;
    /** @format date-time */
    updated?: string;
    /** @format date-time */
    updated__gt?: string;
    /** @format date-time */
    updated__lt?: string;
    user?: string;
    username?: string;
    username__contains?: string;
}
interface UsersGroupsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    identifier: string;
}
interface UsersLegalTermsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    identifier: string;
}
interface UsersLegalTermsVersionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    identifier: string;
    /** @pattern ^\d+$ */
    termId: string;
}
interface UsersMessagesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    identifier: string;
}
interface UsersPermissionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    identifier: string;
}
interface UsersAddressesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
    user?: string;
}
interface UsersBankAccountsListParams {
    account_currency?: string;
    action?: string;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    name?: string;
    name__contains?: string;
    number?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
    user?: string;
}
interface UsersCryptoAccountsListParams {
    account_currency?: string;
    action?: string;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    crypto_type?: string;
    currency?: string;
    name?: string;
    name__contains?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
    user?: string;
}
interface UsersDevicesListParams {
    imei?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    user?: string;
}
interface UsersDevicesAppsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\d+$ */
    id: string;
}
interface UsersDocumentsListParams {
    /**
     * Ordering
     *
     * * `created` - Created
     * * `-created` - Created (descending)
     * * `updated` - Updated
     * * `-updated` - Updated (descending)
     * * `expires` - Expires
     * * `-expires` - Expires (descending)
     */
    orderby?: ("-created" | "-expires" | "-updated" | "created" | "expires" | "updated")[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
    user?: string;
}
interface UsersEmailsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    temporary?: boolean;
    user?: string;
}
interface UsersMfaAuthenticatorsListParams {
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    type?: string;
    user?: string;
    verified?: boolean;
}
interface UsersMobilesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    temporary?: boolean;
    user?: string;
}
interface UsersTokensListParams {
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    expires__isnull?: boolean;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    token_key?: string;
    token_key__exclude?: string;
    token_key__in?: string;
    user?: string;
}
interface UsersWalletAccountsListParams {
    account_currency?: string;
    action?: string;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    currency?: string;
    name?: string;
    name__contains?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
    user?: string;
}
interface WalletAccountsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface WalletAccountsCurrenciesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\d+$ */
    id: string;
}
interface WebhookTasksListParams {
    /** @format date-time */
    completed?: string | null;
    /** @format date-time */
    completed__gt?: string | null;
    /** @format date-time */
    completed__gte?: string | null;
    completed__isnull?: boolean;
    /** @format date-time */
    completed__lt?: string | null;
    /** @format date-time */
    completed__lte?: string | null;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    /** @format date-time */
    failed?: string | null;
    /** @format date-time */
    failed__gt?: string | null;
    /** @format date-time */
    failed__gte?: string | null;
    failed__isnull?: boolean;
    /** @format date-time */
    failed__lt?: string | null;
    /** @format date-time */
    failed__lte?: string | null;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @format date-time */
    updated?: string;
    /** @format date-time */
    updated__gt?: string;
    /** @format date-time */
    updated__gte?: string;
    /** @format date-time */
    updated__lt?: string;
    /** @format date-time */
    updated__lte?: string;
    webhook?: number;
    webhook__event?: string;
    webhook__secret?: string;
    webhook__url?: string;
}
interface WebhookTasksRequestsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    response_code?: number;
    /** @pattern ^\d+$ */
    webhhookTaskId: string;
}
interface WebhooksListParams {
    event?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    secret?: string;
    url?: string;
}
type QueryParamsType$a = Record<string | number, any>;
type ResponseFormat$a = keyof Omit<Body, "body" | "bodyUsed">;
interface FullRequestParams$a extends Omit<RequestInit, "body"> {
    /** set parameter to `true` for call `securityWorker` for this request */
    secure?: boolean;
    /** request path */
    path: string;
    /** content type of request body */
    type?: ContentType$a;
    /** query params */
    query?: QueryParamsType$a;
    /** format of response (i.e. response.json() -> format: "json") */
    format?: ResponseFormat$a;
    /** request body */
    body?: unknown;
    /** base url */
    baseUrl?: string;
    /** request cancellation token */
    cancelToken?: CancelToken$a;
}
type RequestParams$b = Omit<FullRequestParams$a, "body" | "method" | "query" | "path">;
interface ApiConfig$a<SecurityDataType = unknown> {
    baseUrl?: string;
    baseApiParams?: Omit<RequestParams$b, "baseUrl" | "cancelToken" | "signal">;
    securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams$b | void> | RequestParams$b | void;
    customFetch?: typeof fetch;
}
interface HttpResponse$a<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}
type CancelToken$a = Symbol | string | number;
declare enum ContentType$a {
    Json = "application/json",
    JsonApi = "application/vnd.api+json",
    FormData = "multipart/form-data",
    UrlEncoded = "application/x-www-form-urlencoded",
    Text = "text/plain"
}
declare class HttpClient$a<SecurityDataType = unknown> {
    baseUrl: string;
    private securityData;
    private securityWorker?;
    private abortControllers;
    private customFetch;
    private baseApiParams;
    constructor(apiConfig?: ApiConfig$a<SecurityDataType>);
    setSecurityData: (data: SecurityDataType | null) => void;
    protected encodeQueryParam(key: string, value: any): string;
    protected addQueryParam(query: QueryParamsType$a, key: string): string;
    protected addArrayQueryParam(query: QueryParamsType$a, key: string): any;
    protected toQueryString(rawQuery?: QueryParamsType$a): string;
    protected addQueryParams(rawQuery?: QueryParamsType$a): string;
    private contentFormatters;
    protected mergeRequestParams(params1: RequestParams$b, params2?: RequestParams$b): RequestParams$b;
    protected createAbortSignal: (cancelToken: CancelToken$a) => AbortSignal | undefined;
    abortRequest: (cancelToken: CancelToken$a) => void;
    request: <T = any, E = any>({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }: FullRequestParams$a) => Promise<HttpResponse$a<T, E>>;
}
/**
 * @title Platform Admin API
 * @version 3 (3)
 * @termsOfService https://rehive.com/terms/
 * @baseUrl https://api.rehive.com
 * @externalDocs https://docs.rehive.com
 * @contact Rehive Support <support@rehive.com> (https://rehive.com/support/)
 *
 *
 * The **Platform Admin API** is the core management component of the Rehive ecosystem. It provides adminsitrative access to platform resources.
 *
 * User authentication (login) must still be performed via the **Platform API** because the Admin API only provides an interface for authenticating on behalf of users. The documentation for this can be found below:
 *
 * - [API specification](https://api.rehive.com/?api=rehive-platform-api)
 * - [Swagger specification](https://api.rehive.com/swagger)
 *
 * For general usage, help, and recommendations please take a look at the [platform docs](https://docs.rehive.com/platform/get-started/introduction/).
 *
 */
declare class Api$b<SecurityDataType extends unknown> extends HttpClient$a<SecurityDataType> {
    v3: {
        /**
         * No description
         *
         * @tags access-control-rules
         * @name AccessControlRulesList
         * @summary List access control rules
         * @request GET:/3/admin/access-control-rules/
         * @secure
         */
        accessControlRulesList: (query: AccessControlRulesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminAccessControlRuleListResponse, any>>;
        /**
         * No description
         *
         * @tags access-control-rules
         * @name AccessControlRulesCreate
         * @summary Create access control rule
         * @request POST:/3/admin/access-control-rules/
         * @secure
         */
        accessControlRulesCreate: (data: AdminCreateAccessControlRule, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccessControlRuleResponse, any>>;
        /**
         * No description
         *
         * @tags access-control-rules
         * @name AccessControlRulesRetrieve
         * @summary Retrieve access control rule
         * @request GET:/3/admin/access-control-rules/{id}/
         * @secure
         */
        accessControlRulesRetrieve: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccessControlRuleResponse, any>>;
        /**
         * No description
         *
         * @tags access-control-rules
         * @name AccessControlRulesUpdate
         * @summary Updated access control rule
         * @request PUT:/3/admin/access-control-rules/{id}/
         * @secure
         */
        accessControlRulesUpdate: (id: string, data: AdminCreateAccessControlRule, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccessControlRuleResponse, any>>;
        /**
         * No description
         *
         * @tags access-control-rules
         * @name AccessControlRulesPartialUpdate
         * @summary Prtially upadate access control rule
         * @request PATCH:/3/admin/access-control-rules/{id}/
         * @secure
         */
        accessControlRulesPartialUpdate: (id: string, data: PatchedAdminCreateAccessControlRule, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccessControlRuleResponse, any>>;
        /**
         * No description
         *
         * @tags access-control-rules
         * @name AccessControlRulesDestroy
         * @summary Delete access control rule
         * @request DELETE:/3/admin/access-control-rules/{id}/
         * @secure
         */
        accessControlRulesDestroy: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags account-currencies
         * @name AccountCurrenciesList
         * @summary List account asset
         * @request GET:/3/admin/account-currencies/
         * @secure
         */
        accountCurrenciesList: (query: AccountCurrenciesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminAccountAssetListResponse, any>>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsList
         * @summary List account definitions
         * @request GET:/3/admin/account-definitions/
         * @secure
         */
        accountDefinitionsList: (query: AccountDefinitionsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminAccountDefinitionListResponse, any>>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsCreate
         * @summary Create account definitions
         * @request POST:/3/admin/account-definitions/
         * @secure
         */
        accountDefinitionsCreate: (data: AdminCreateUpdateAccountDefinition, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountDefinitionResponse, any>>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsRetrieve
         * @summary Retrieve account definition
         * @request GET:/3/admin/account-definitions/{definition_name}/
         * @secure
         */
        accountDefinitionsRetrieve: (definitionName: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountDefinitionResponse, any>>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsUpdate
         * @summary Updated account definition
         * @request PUT:/3/admin/account-definitions/{definition_name}/
         * @secure
         */
        accountDefinitionsUpdate: (definitionName: string, data: AdminCreateUpdateAccountDefinition, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountDefinitionResponse, any>>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsPartialUpdate
         * @summary Partially update account definition
         * @request PATCH:/3/admin/account-definitions/{definition_name}/
         * @secure
         */
        accountDefinitionsPartialUpdate: (definitionName: string, data: PatchedAdminCreateUpdateAccountDefinition, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountDefinitionResponse, any>>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsGroupsList
         * @summary List account definitions groups
         * @request GET:/3/admin/account-definitions/{definition_name}/groups/
         * @secure
         */
        accountDefinitionsGroupsList: ({ definitionName, ...query }: AccountDefinitionsGroupsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminAccountDefinitionGroupListResponse, any>>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsGroupsCreate
         * @summary Create account definitions
         * @request POST:/3/admin/account-definitions/{definition_name}/groups/
         * @secure
         */
        accountDefinitionsGroupsCreate: (definitionName: string, data: AdminCreateAccountDefinitionGroup, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountDefinitionGroupResponse, any>>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsGroupsRetrieve
         * @summary Retrieve account definitions group
         * @request GET:/3/admin/account-definitions/{definition_name}/groups/{definition_group_name}/
         * @secure
         */
        accountDefinitionsGroupsRetrieve: (definitionGroupName: string, definitionName: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountDefinitionGroupResponse, any>>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsGroupsUpdate
         * @summary Update account definitions group
         * @request PUT:/3/admin/account-definitions/{definition_name}/groups/{definition_group_name}/
         * @secure
         */
        accountDefinitionsGroupsUpdate: (definitionGroupName: string, definitionName: string, data: AdminUpdateAccountDefinitionGroup, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountDefinitionGroupResponse, any>>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsGroupsPartialUpdate
         * @summary Partially update account definitions group
         * @request PATCH:/3/admin/account-definitions/{definition_name}/groups/{definition_group_name}/
         * @secure
         */
        accountDefinitionsGroupsPartialUpdate: (definitionGroupName: string, definitionName: string, data: PatchedAdminUpdateAccountDefinitionGroup, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountDefinitionGroupResponse, any>>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsGroupsCurrenciesList
         * @summary List account definition group currencies
         * @request GET:/3/admin/account-definitions/{definition_name}/groups/{definition_group_name}/currencies/
         * @secure
         */
        accountDefinitionsGroupsCurrenciesList: ({ definitionGroupName, definitionName, ...query }: AccountDefinitionsGroupsCurrenciesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminAccountDefinitionGroupAssetListResponse, any>>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsGroupsCurrenciesCreate
         * @summary Create account deffinition group currency
         * @request POST:/3/admin/account-definitions/{definition_name}/groups/{definition_group_name}/currencies/
         * @secure
         */
        accountDefinitionsGroupsCurrenciesCreate: (definitionGroupName: string, definitionName: string, data: AdminCreateAccountDefinitionGroupAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountDefinitionGroupAssetResponse, any>>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsGroupsCurrenciesRetrieve
         * @summary Retrieve account definition group currency
         * @request GET:/3/admin/account-definitions/{definition_name}/groups/{definition_group_name}/currencies/{currency_code}/
         * @secure
         */
        accountDefinitionsGroupsCurrenciesRetrieve: (currencyCode: string, definitionGroupName: string, definitionName: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountDefinitionGroupAssetResponse, any>>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsGroupsCurrenciesUpdate
         * @summary Update account definition group currency
         * @request PUT:/3/admin/account-definitions/{definition_name}/groups/{definition_group_name}/currencies/{currency_code}/
         * @secure
         */
        accountDefinitionsGroupsCurrenciesUpdate: (currencyCode: string, definitionGroupName: string, definitionName: string, data: AdminUpdateAccountDefinitionGroupAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountDefinitionGroupAssetResponse, any>>;
        /**
         * No description
         *
         * @tags account-definitions
         * @name AccountDefinitionsGroupsCurrenciesPartialUpdate
         * @summary Partially update account definition group currency
         * @request PATCH:/3/admin/account-definitions/{definition_name}/groups/{definition_group_name}/currencies/{currency_code}/
         * @secure
         */
        accountDefinitionsGroupsCurrenciesPartialUpdate: (currencyCode: string, definitionGroupName: string, definitionName: string, data: PatchedAdminUpdateAccountDefinitionGroupAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountDefinitionGroupAssetResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsList
         * @summary List accounts
         * @request GET:/3/admin/accounts/
         * @secure
         */
        accountsList: (query: AccountsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminAccountListResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCreate
         * @summary Create accounts
         * @request POST:/3/admin/accounts/
         * @secure
         */
        accountsCreate: (data: AdminCreateAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsRetrieve
         * @summary Retrieve account
         * @request GET:/3/admin/accounts/{reference}/
         * @secure
         */
        accountsRetrieve: (reference: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedAccountResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsUpdate
         * @summary Update account
         * @request PUT:/3/admin/accounts/{reference}/
         * @secure
         */
        accountsUpdate: (reference: string, data: AdminUpdateExtendedAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedAccountResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsPartialUpdate
         * @summary Update account
         * @request PATCH:/3/admin/accounts/{reference}/
         * @secure
         */
        accountsPartialUpdate: (reference: string, data: PatchedAdminUpdateExtendedAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedAccountResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesList
         * @summary List account currencies
         * @request GET:/3/admin/accounts/{reference}/currencies/
         * @secure
         */
        accountsCurrenciesList: ({ reference, ...query }: AccountsCurrenciesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminAccountAccountAssetListResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesCreate
         * @summary Create account currency
         * @request POST:/3/admin/accounts/{reference}/currencies/
         * @secure
         */
        accountsCurrenciesCreate: (reference: string, data: AdminCreateAccountAccountAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesRetrieve
         * @summary Retrieve account currency
         * @request GET:/3/admin/accounts/{reference}/currencies/{code}/
         * @secure
         */
        accountsCurrenciesRetrieve: (code: string, reference: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesUpdate
         * @summary Update account currency
         * @request PUT:/3/admin/accounts/{reference}/currencies/{code}/
         * @secure
         */
        accountsCurrenciesUpdate: (code: string, reference: string, data: AdminAccountAccountAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesPartialUpdate
         * @summary Partially update account currency
         * @request PATCH:/3/admin/accounts/{reference}/currencies/{code}/
         * @secure
         */
        accountsCurrenciesPartialUpdate: (code: string, reference: string, data: PatchedAdminAccountAccountAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesFeesList
         * @summary List account currency fees
         * @request GET:/3/admin/accounts/{reference}/currencies/{code}/fees/
         * @secure
         */
        accountsCurrenciesFeesList: (code: string, reference: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountAssetFeeListResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesFeesCreate
         * @summary Create account currency fees
         * @request POST:/3/admin/accounts/{reference}/currencies/{code}/fees/
         * @secure
         */
        accountsCurrenciesFeesCreate: (code: string, reference: string, data: AdminCreateAccountAccountAssetFee, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountAssetFeeResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesFeesRetrieve
         * @summary Retrieve account currency fee
         * @request GET:/3/admin/accounts/{reference}/currencies/{code}/fees/{fee_id}/
         * @secure
         */
        accountsCurrenciesFeesRetrieve: (code: string, feeId: string, reference: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountAssetFeeResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesFeesUpdate
         * @summary Update account currency fee
         * @request PUT:/3/admin/accounts/{reference}/currencies/{code}/fees/{fee_id}/
         * @secure
         */
        accountsCurrenciesFeesUpdate: (code: string, feeId: string, reference: string, data: AdminCreateAccountAccountAssetFee, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountAssetFeeResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesFeesPartialUpdate
         * @summary Partially update account currency fee
         * @request PATCH:/3/admin/accounts/{reference}/currencies/{code}/fees/{fee_id}/
         * @secure
         */
        accountsCurrenciesFeesPartialUpdate: (code: string, feeId: string, reference: string, data: PatchedAdminCreateAccountAccountAssetFee, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountAssetFeeResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesFeesDestroy
         * @summary Delete account currency fee
         * @request DELETE:/3/admin/accounts/{reference}/currencies/{code}/fees/{fee_id}/
         * @secure
         */
        accountsCurrenciesFeesDestroy: (code: string, feeId: string, reference: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesLimitsList
         * @summary List account currency limits
         * @request GET:/3/admin/accounts/{reference}/currencies/{code}/limits/
         * @secure
         */
        accountsCurrenciesLimitsList: ({ code, reference, ...query }: AccountsCurrenciesLimitsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminAccountAssetLimitListResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesLimitsCreate
         * @summary List account currency limits
         * @request POST:/3/admin/accounts/{reference}/currencies/{code}/limits/
         * @secure
         */
        accountsCurrenciesLimitsCreate: (code: string, reference: string, data: AdminCreateAccountAccountAssetLimit, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountAssetLimitResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesLimitsRetrieve
         * @summary Retrieve account asset limit
         * @request GET:/3/admin/accounts/{reference}/currencies/{code}/limits/{limit_id}/
         * @secure
         */
        accountsCurrenciesLimitsRetrieve: (code: string, limitId: string, reference: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountAssetLimitResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesLimitsUpdate
         * @summary Update account currency limits
         * @request PUT:/3/admin/accounts/{reference}/currencies/{code}/limits/{limit_id}/
         * @secure
         */
        accountsCurrenciesLimitsUpdate: (code: string, limitId: string, reference: string, data: AdminCreateAccountAccountAssetLimit, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountAssetLimitResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesLimitsPartialUpdate
         * @summary Partially update account currency limits
         * @request PATCH:/3/admin/accounts/{reference}/currencies/{code}/limits/{limit_id}/
         * @secure
         */
        accountsCurrenciesLimitsPartialUpdate: (code: string, limitId: string, reference: string, data: PatchedAdminCreateAccountAccountAssetLimit, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAccountAssetLimitResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesLimitsDestroy
         * @summary Delete account currency limits
         * @request DELETE:/3/admin/accounts/{reference}/currencies/{code}/limits/{limit_id}/
         * @secure
         */
        accountsCurrenciesLimitsDestroy: (code: string, limitId: string, reference: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesSettingsRetrieve
         * @summary List account currency settings
         * @request GET:/3/admin/accounts/{reference}/currencies/{code}/settings/
         * @secure
         */
        accountsCurrenciesSettingsRetrieve: (code: string, reference: string, params?: RequestParams$b) => Promise<HttpResponse$a<AccountAssetSettingsResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesSettingsUpdate
         * @summary Update account currency settings
         * @request PUT:/3/admin/accounts/{reference}/currencies/{code}/settings/
         * @secure
         */
        accountsCurrenciesSettingsUpdate: (code: string, reference: string, data: AdminAccountAccountAssetSettingsUpdate, params?: RequestParams$b) => Promise<HttpResponse$a<AccountAssetSettingsResponse, any>>;
        /**
         * No description
         *
         * @tags accounts
         * @name AccountsCurrenciesSettingsPartialUpdate
         * @summary Partially update account currency settings
         * @request PATCH:/3/admin/accounts/{reference}/currencies/{code}/settings/
         * @secure
         */
        accountsCurrenciesSettingsPartialUpdate: (code: string, reference: string, data: PatchedAdminAccountAccountAssetSettingsUpdate, params?: RequestParams$b) => Promise<HttpResponse$a<AccountAssetSettingsResponse, any>>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthDeactivateCreate
         * @summary Admin deactivate on behalf of a user
         * @request POST:/3/admin/auth/deactivate/
         * @secure
         */
        authDeactivateCreate: (data: AdminDeactivate, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthDeactivateVerifyCreate
         * @summary Admin verify deactivation on behalf of a user
         * @request POST:/3/admin/auth/deactivate/verify/
         * @secure
         */
        authDeactivateVerifyCreate: (data: VerifyDeactivate, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthLoginCreate
         * @summary Admin login on behalf of a user
         * @request POST:/3/admin/auth/login/
         * @secure
         */
        authLoginCreate: (data: AdminLogin, params?: RequestParams$b) => Promise<HttpResponse$a<AuthenticatedResponse, any>>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthPasswordResetCreate
         * @summary Admin reset password on behalf of a user
         * @request POST:/3/admin/auth/password/reset/
         * @secure
         */
        authPasswordResetCreate: (data: AdminPasswordReset, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthPasswordResetConfirmCreate
         * @summary Admin confirmation for reset password on behalf of a user
         * @request POST:/3/admin/auth/password/reset/confirm/
         * @secure
         */
        authPasswordResetConfirmCreate: (data: PasswordResetConfirm, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthRegisterCreate
         * @summary Admin register a new user on behalf of a user
         * @request POST:/3/admin/auth/register/
         * @secure
         */
        authRegisterCreate: (data: AdminRegister, params?: RequestParams$b) => Promise<HttpResponse$a<ExtendedAuthenticatedResponse, any>>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthRequestDeleteCreate
         * @summary Admin request delete on behalf of a user
         * @request POST:/3/admin/auth/request-delete/
         * @secure
         */
        authRequestDeleteCreate: (data: AdminRequestDelete, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags auth
         * @name AuthRequestDeleteVerifyCreate
         * @summary Admin request delete on behalf of a user
         * @request POST:/3/admin/auth/request-delete/verify/
         * @secure
         */
        authRequestDeleteVerifyCreate: (data: VerifyRequestDelete, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags authenticator-rules
         * @name AuthenticatorRulesList
         * @summary List authenticator rules
         * @request GET:/3/admin/authenticator-rules/
         * @secure
         */
        authenticatorRulesList: (query: AuthenticatorRulesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminAuthenticatorRuleListResponse, any>>;
        /**
         * No description
         *
         * @tags authenticator-rules
         * @name AuthenticatorRulesCreate
         * @summary Create authenticator rule
         * @request POST:/3/admin/authenticator-rules/
         * @secure
         */
        authenticatorRulesCreate: (data: AdminCreateAuthenticatorRule, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAuthenticatorRuleResponse, any>>;
        /**
         * No description
         *
         * @tags authenticator-rules
         * @name AuthenticatorRulesRetrieve
         * @summary Retrieve authenticator rule
         * @request GET:/3/admin/authenticator-rules/{identifier}/
         * @secure
         */
        authenticatorRulesRetrieve: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAuthenticatorRuleResponse, any>>;
        /**
         * No description
         *
         * @tags authenticator-rules
         * @name AuthenticatorRulesUpdate
         * @summary Update athenticator rule
         * @request PUT:/3/admin/authenticator-rules/{identifier}/
         * @secure
         */
        authenticatorRulesUpdate: (identifier: string, data: AdminUpdateAuthenticatorRule, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAuthenticatorRuleResponse, any>>;
        /**
         * No description
         *
         * @tags authenticator-rules
         * @name AuthenticatorRulesPartialUpdate
         * @summary Partially update athenticator rule
         * @request PATCH:/3/admin/authenticator-rules/{identifier}/
         * @secure
         */
        authenticatorRulesPartialUpdate: (identifier: string, data: PatchedAdminUpdateAuthenticatorRule, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAuthenticatorRuleResponse, any>>;
        /**
         * No description
         *
         * @tags authenticator-rules
         * @name AuthenticatorRulesDestroy
         * @summary Delete authenticator rule
         * @request DELETE:/3/admin/authenticator-rules/{identifier}/
         * @secure
         */
        authenticatorRulesDestroy: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags bank-accounts
         * @name BankAccountsList
         * @summary List company bank accounts
         * @request GET:/3/admin/bank-accounts/
         * @secure
         */
        bankAccountsList: (query: BankAccountsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminCompanyBankAccountListResponse, any>>;
        /**
         * No description
         *
         * @tags bank-accounts
         * @name BankAccountsCreate
         * @summary Create company bank account
         * @request POST:/3/admin/bank-accounts/
         * @secure
         */
        bankAccountsCreate: (data: AdminCompanyBankAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyBankAccountResponse, any>>;
        /**
         * No description
         *
         * @tags bank-accounts
         * @name BankAccountsRetrieve
         * @summary Retrieve company bank account
         * @request GET:/3/admin/bank-accounts/{id}/
         * @secure
         */
        bankAccountsRetrieve: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyBankAccountResponse, any>>;
        /**
         * No description
         *
         * @tags bank-accounts
         * @name BankAccountsUpdate
         * @summary Update company bank account
         * @request PUT:/3/admin/bank-accounts/{id}/
         * @secure
         */
        bankAccountsUpdate: (id: string, data: AdminCompanyBankAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyBankAccountResponse, any>>;
        /**
         * No description
         *
         * @tags bank-accounts
         * @name BankAccountsPartialUpdate
         * @summary Partially update company bank account
         * @request PATCH:/3/admin/bank-accounts/{id}/
         * @secure
         */
        bankAccountsPartialUpdate: (id: string, data: PatchedAdminCompanyBankAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyBankAccountResponse, any>>;
        /**
         * No description
         *
         * @tags bank-accounts
         * @name BankAccountsDestroy
         * @summary Delete company bank account
         * @request DELETE:/3/admin/bank-accounts/{id}/
         * @secure
         */
        bankAccountsDestroy: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags bank-accounts
         * @name BankAccountsCurrenciesList
         * @summary List company bank account currencies
         * @request GET:/3/admin/bank-accounts/{id}/currencies/
         * @secure
         */
        bankAccountsCurrenciesList: ({ id, ...query }: BankAccountsCurrenciesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminCompanyBankAccountAssetListResponse, any>>;
        /**
         * No description
         *
         * @tags bank-accounts
         * @name BankAccountsCurrenciesCreate
         * @summary Create company bank account currency
         * @request POST:/3/admin/bank-accounts/{id}/currencies/
         * @secure
         */
        bankAccountsCurrenciesCreate: (id: string, data: AdminCreateCompanyBankAccountAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyBankAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags bank-accounts
         * @name BankAccountsCurrenciesRetrieve
         * @summary Retrieve company bank account currency
         * @request GET:/3/admin/bank-accounts/{id}/currencies/{code}/
         * @secure
         */
        bankAccountsCurrenciesRetrieve: (code: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyBankAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags bank-accounts
         * @name BankAccountsCurrenciesDestroy
         * @summary Delete company bank account currency
         * @request DELETE:/3/admin/bank-accounts/{id}/currencies/{code}/
         * @secure
         */
        bankAccountsCurrenciesDestroy: (code: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyRetrieve
         * @summary Retrieve company
         * @request GET:/3/admin/company/
         * @secure
         */
        companyRetrieve: (params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyResponse$9, any>>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyUpdate
         * @summary Update company
         * @request PUT:/3/admin/company/
         * @secure
         */
        companyUpdate: (data: AdminCompany$9, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyResponse$9, any>>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyPartialUpdate
         * @summary Partilly update company
         * @request PATCH:/3/admin/company/
         * @secure
         */
        companyPartialUpdate: (data: PatchedAdminCompany$7, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyResponse$9, any>>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyAddressRetrieve
         * @summary Retrieve company address
         * @request GET:/3/admin/company/address/
         * @secure
         */
        companyAddressRetrieve: (params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyAddressResponse, any>>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyAddressUpdate
         * @summary Update company addresses
         * @request PUT:/3/admin/company/address/
         * @secure
         */
        companyAddressUpdate: (data: AdminCompanyAddress, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyAddressResponse, any>>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyAddressPartialUpdate
         * @summary Partially update company addresses
         * @request PATCH:/3/admin/company/address/
         * @secure
         */
        companyAddressPartialUpdate: (data: PatchedAdminCompanyAddress, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyAddressResponse, any>>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyLinksList
         * @summary List company links
         * @request GET:/3/admin/company/links/
         * @secure
         */
        companyLinksList: (query: CompanyLinksListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminCompanyLinkListResponse, any>>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyLinksCreate
         * @summary Create company link
         * @request POST:/3/admin/company/links/
         * @secure
         */
        companyLinksCreate: (data: AdminCreateCompanyLink, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyLinkResponse, any>>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyLinksRetrieve
         * @summary Retrieve company link
         * @request GET:/3/admin/company/links/{id}/
         * @secure
         */
        companyLinksRetrieve: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyLinkResponse, any>>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyLinksUpdate
         * @summary Update company link
         * @request PUT:/3/admin/company/links/{id}/
         * @secure
         */
        companyLinksUpdate: (id: string, data: AdminUpdateCompanyLink, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyLinkResponse, any>>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyLinksPartialUpdate
         * @summary Partially update company link
         * @request PATCH:/3/admin/company/links/{id}/
         * @secure
         */
        companyLinksPartialUpdate: (id: string, data: PatchedAdminUpdateCompanyLink, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyLinkResponse, any>>;
        /**
         * No description
         *
         * @tags company
         * @name CompanyLinksDestroy
         * @summary Delete company link
         * @request DELETE:/3/admin/company/links/{id}/
         * @secure
         */
        companyLinksDestroy: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags company
         * @name CompanySettingsRetrieve
         * @summary Retrieve company settings
         * @request GET:/3/admin/company/settings/
         * @secure
         */
        companySettingsRetrieve: (params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanySettingsResponse, any>>;
        /**
         * No description
         *
         * @tags company
         * @name CompanySettingsUpdate
         * @summary Update company settings
         * @request PUT:/3/admin/company/settings/
         * @secure
         */
        companySettingsUpdate: (data: AdminUpdateCompanySettings, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanySettingsResponse, any>>;
        /**
         * No description
         *
         * @tags company
         * @name CompanySettingsPartialUpdate
         * @summary Partially update company settings
         * @request PATCH:/3/admin/company/settings/
         * @secure
         */
        companySettingsPartialUpdate: (data: PatchedAdminUpdateCompanySettings, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanySettingsResponse, any>>;
        /**
         * No description
         *
         * @tags currencies
         * @name CurrenciesList
         * @summary List currencies
         * @request GET:/3/admin/currencies/
         * @secure
         */
        currenciesList: (query: CurrenciesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminAssetListResponse, any>>;
        /**
         * No description
         *
         * @tags currencies
         * @name CurrenciesCreate
         * @summary Create currency
         * @request POST:/3/admin/currencies/
         * @secure
         */
        currenciesCreate: (data: AdminCreateAsset$2, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAssetResponse, any>>;
        /**
         * No description
         *
         * @tags currencies
         * @name CurrenciesRetrieve
         * @summary Retrieve currency
         * @request GET:/3/admin/currencies/{code}/
         * @secure
         */
        currenciesRetrieve: (code: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAssetResponse, any>>;
        /**
         * No description
         *
         * @tags currencies
         * @name CurrenciesUpdate
         * @summary Update currency
         * @request PUT:/3/admin/currencies/{code}/
         * @secure
         */
        currenciesUpdate: (code: string, data: AdminUpdateAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAssetResponse, any>>;
        /**
         * No description
         *
         * @tags currencies
         * @name CurrenciesPartialUpdate
         * @summary Partially update currency
         * @request PATCH:/3/admin/currencies/{code}/
         * @secure
         */
        currenciesPartialUpdate: (code: string, data: PatchedAdminUpdateAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAssetResponse, any>>;
        /**
         * No description
         *
         * @tags currencies
         * @name CurrenciesOverviewRetrieve
         * @summary Retrive currency overview
         * @request GET:/3/admin/currencies/{code}/overview/
         * @secure
         */
        currenciesOverviewRetrieve: (code: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminOverviewAssetResponse, any>>;
        /**
         * No description
         *
         * @tags document-types
         * @name DocumentTypesList
         * @summary List document types
         * @request GET:/3/admin/document-types/
         * @secure
         */
        documentTypesList: (query: DocumentTypesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminDocumentTypeListResponse, any>>;
        /**
         * No description
         *
         * @tags document-types
         * @name DocumentTypesCreate
         * @summary Create document type
         * @request POST:/3/admin/document-types/
         * @secure
         */
        documentTypesCreate: (data: AdminDocumentType, params?: RequestParams$b) => Promise<HttpResponse$a<AdminDocumentTypeResponse, any>>;
        /**
         * No description
         *
         * @tags document-types
         * @name DocumentTypesRetrieve
         * @summary Retrieve document type
         * @request GET:/3/admin/document-types/{id}/
         * @secure
         */
        documentTypesRetrieve: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminDocumentTypeResponse, any>>;
        /**
         * No description
         *
         * @tags document-types
         * @name DocumentTypesUpdate
         * @summary Update document type
         * @request PUT:/3/admin/document-types/{id}/
         * @secure
         */
        documentTypesUpdate: (id: string, data: AdminDocumentType, params?: RequestParams$b) => Promise<HttpResponse$a<AdminDocumentTypeResponse, any>>;
        /**
         * No description
         *
         * @tags document-types
         * @name DocumentTypesPartialUpdate
         * @summary Partially update document type
         * @request PATCH:/3/admin/document-types/{id}/
         * @secure
         */
        documentTypesPartialUpdate: (id: string, data: PatchedAdminDocumentType, params?: RequestParams$b) => Promise<HttpResponse$a<AdminDocumentTypeResponse, any>>;
        /**
         * No description
         *
         * @tags document-types
         * @name DocumentTypesDestroy
         * @summary Delete document type
         * @request DELETE:/3/admin/document-types/{id}/
         * @secure
         */
        documentTypesDestroy: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags exports
         * @name ExportsList
         * @summary List exports
         * @request GET:/3/admin/exports/
         * @secure
         */
        exportsList: (query: ExportsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminExportListResponse, any>>;
        /**
         * No description
         *
         * @tags exports
         * @name ExportsCreate
         * @summary Create export
         * @request POST:/3/admin/exports/
         * @secure
         */
        exportsCreate: (data: AdminCreateExport, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExportResponse, any>>;
        /**
         * No description
         *
         * @tags exports
         * @name ExportsRetrieve
         * @summary Retrieve export
         * @request GET:/3/admin/exports/{identifier}/
         * @secure
         */
        exportsRetrieve: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedExportResponse, any>>;
        /**
         * No description
         *
         * @tags exports
         * @name ExportsDestroy
         * @summary Delete export
         * @request DELETE:/3/admin/exports/{identifier}/
         * @secure
         */
        exportsDestroy: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsList
         * @summary List groups
         * @request GET:/3/admin/groups/
         * @secure
         */
        groupsList: (query: GroupsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminGroupListResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsCreate
         * @summary Create group
         * @request POST:/3/admin/groups/
         * @secure
         */
        groupsCreate: (data: AdminCreateGroup, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsRetrieve
         * @summary Retrieve group
         * @request GET:/3/admin/groups/{group_name}/
         * @secure
         */
        groupsRetrieve: (groupName: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUpdateGroupResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsUpdate
         * @summary Update group
         * @request PUT:/3/admin/groups/{group_name}/
         * @secure
         */
        groupsUpdate: (groupName: string, data: AdminUpdateGroup, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUpdateGroupResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsPartialUpdate
         * @summary Partially update group
         * @request PATCH:/3/admin/groups/{group_name}/
         * @secure
         */
        groupsPartialUpdate: (groupName: string, data: PatchedAdminUpdateGroup, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUpdateGroupResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsFeesList
         * @summary List group fees
         * @request GET:/3/admin/groups/{group_name}/fees/
         * @secure
         */
        groupsFeesList: (groupName: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupFeeListResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsFeesCreate
         * @summary Create group fee
         * @request POST:/3/admin/groups/{group_name}/fees/
         * @secure
         */
        groupsFeesCreate: (groupName: string, data: AdminCreateGroupFee, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupFeeResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsFeesRetrieve
         * @summary Retrieve group fee
         * @request GET:/3/admin/groups/{group_name}/fees/{fee_id}/
         * @secure
         */
        groupsFeesRetrieve: (feeId: string, groupName: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupFeeResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsFeesUpdate
         * @summary update group fee
         * @request PUT:/3/admin/groups/{group_name}/fees/{fee_id}/
         * @secure
         */
        groupsFeesUpdate: (feeId: string, groupName: string, data: AdminUpdateGroupFee, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupFeeResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsFeesPartialUpdate
         * @summary Partially group fee
         * @request PATCH:/3/admin/groups/{group_name}/fees/{fee_id}/
         * @secure
         */
        groupsFeesPartialUpdate: (feeId: string, groupName: string, data: PatchedAdminUpdateGroupFee, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupFeeResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsFeesDestroy
         * @summary Delete group fee
         * @request DELETE:/3/admin/groups/{group_name}/fees/{fee_id}/
         * @secure
         */
        groupsFeesDestroy: (feeId: string, groupName: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsPermissionsList
         * @summary List group permissions
         * @request GET:/3/admin/groups/{group_name}/permissions/
         * @secure
         */
        groupsPermissionsList: ({ groupName, ...query }: GroupsPermissionsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedGroupPermissionListResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsPermissionsCreate
         * @summary Create group permission
         * @request POST:/3/admin/groups/{group_name}/permissions/
         * @secure
         */
        groupsPermissionsCreate: (groupName: string, data: AdminCreateMultiGroupPermission, params?: RequestParams$b) => Promise<HttpResponse$a<AdminMultiGroupPermissionResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsPermissionsRetrieve
         * @summary Retrieve group permission
         * @request GET:/3/admin/groups/{group_name}/permissions/{permission_id}/
         * @secure
         */
        groupsPermissionsRetrieve: (groupName: string, permissionId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupPermissionResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsPermissionsUpdate
         * @summary Update group permission
         * @request PUT:/3/admin/groups/{group_name}/permissions/{permission_id}/
         * @secure
         */
        groupsPermissionsUpdate: (groupName: string, permissionId: string, data: AdminGroupPermission, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupPermissionResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsPermissionsPartialUpdate
         * @summary Partially update group permission
         * @request PATCH:/3/admin/groups/{group_name}/permissions/{permission_id}/
         * @secure
         */
        groupsPermissionsPartialUpdate: (groupName: string, permissionId: string, data: PatchedAdminGroupPermission, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupPermissionResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsPermissionsDestroy
         * @summary Delete group permission
         * @request DELETE:/3/admin/groups/{group_name}/permissions/{permission_id}/
         * @secure
         */
        groupsPermissionsDestroy: (groupName: string, permissionId: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsSettingsRetrieve
         * @summary Retrieve group settings
         * @request GET:/3/admin/groups/{group_name}/settings/
         * @secure
         */
        groupsSettingsRetrieve: (groupName: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupSettingsResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsSettingsUpdate
         * @summary Update group settings
         * @request PUT:/3/admin/groups/{group_name}/settings/
         * @secure
         */
        groupsSettingsUpdate: (groupName: string, data: AdminUpdateGroupSettings, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupSettingsResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsSettingsPartialUpdate
         * @summary Partially update group settings
         * @request PATCH:/3/admin/groups/{group_name}/settings/
         * @secure
         */
        groupsSettingsPartialUpdate: (groupName: string, data: PatchedAdminUpdateGroupSettings, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupSettingsResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersList
         * @summary List group tiers
         * @request GET:/3/admin/groups/{group_name}/tiers/
         * @secure
         */
        groupsTiersList: ({ groupName, ...query }: GroupsTiersListParams, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupTierListResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersCreate
         * @summary Create group tiers
         * @request POST:/3/admin/groups/{group_name}/tiers/
         * @secure
         */
        groupsTiersCreate: (groupName: string, data: AdminGroupTier, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupTierResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRetrieve
         * @summary Retrieve group tiers
         * @request GET:/3/admin/groups/{group_name}/tiers/{tier_id}/
         * @secure
         */
        groupsTiersRetrieve: (groupName: string, tierId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedGroupTierResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersUpdate
         * @summary Update group tiers
         * @request PUT:/3/admin/groups/{group_name}/tiers/{tier_id}/
         * @secure
         */
        groupsTiersUpdate: (groupName: string, tierId: string, data: AdminExtendedGroupTier, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedGroupTierResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersPartialUpdate
         * @summary Partially update group tiers
         * @request PATCH:/3/admin/groups/{group_name}/tiers/{tier_id}/
         * @secure
         */
        groupsTiersPartialUpdate: (groupName: string, tierId: string, data: PatchedAdminExtendedGroupTier, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedGroupTierResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersDestroy
         * @summary Delete group tiers
         * @request DELETE:/3/admin/groups/{group_name}/tiers/{tier_id}/
         * @secure
         */
        groupsTiersDestroy: (groupName: string, tierId: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersFeesList
         * @summary List group tier fees
         * @request GET:/3/admin/groups/{group_name}/tiers/{tier_id}/fees/
         * @secure
         */
        groupsTiersFeesList: (groupName: string, tierId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupTierFeeListResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersFeesCreate
         * @summary Create group tier fees
         * @request POST:/3/admin/groups/{group_name}/tiers/{tier_id}/fees/
         * @secure
         */
        groupsTiersFeesCreate: (groupName: string, tierId: string, data: AdminCreateGroupTierFee, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupTierFeeResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersFeesRetrieve
         * @summary Retrieve group tier fee
         * @request GET:/3/admin/groups/{group_name}/tiers/{tier_id}/fees/{fee_id}/
         * @secure
         */
        groupsTiersFeesRetrieve: (feeId: string, groupName: string, tierId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupTierFeeResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersFeesUpdate
         * @summary Update group tier fee
         * @request PUT:/3/admin/groups/{group_name}/tiers/{tier_id}/fees/{fee_id}/
         * @secure
         */
        groupsTiersFeesUpdate: (feeId: string, groupName: string, tierId: string, data: AdminUpdateGroupTierFee, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupTierFeeResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersFeesPartialUpdate
         * @summary Partially update group tier fee
         * @request PATCH:/3/admin/groups/{group_name}/tiers/{tier_id}/fees/{fee_id}/
         * @secure
         */
        groupsTiersFeesPartialUpdate: (feeId: string, groupName: string, tierId: string, data: PatchedAdminUpdateGroupTierFee, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupTierFeeResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersFeesDestroy
         * @summary Delete group tier fee
         * @request DELETE:/3/admin/groups/{group_name}/tiers/{tier_id}/fees/{fee_id}/
         * @secure
         */
        groupsTiersFeesDestroy: (feeId: string, groupName: string, tierId: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersLimitsList
         * @summary List group tier limits
         * @request GET:/3/admin/groups/{group_name}/tiers/{tier_id}/limits/
         * @secure
         */
        groupsTiersLimitsList: (groupName: string, tierId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupTierLimitListResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersLimitsCreate
         * @summary Create group tier limits
         * @request POST:/3/admin/groups/{group_name}/tiers/{tier_id}/limits/
         * @secure
         */
        groupsTiersLimitsCreate: (groupName: string, tierId: string, data: AdminCreateGroupTierLimit, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupTierLimitResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersLimitsRetrieve
         * @summary Retrieve group tier limit
         * @request GET:/3/admin/groups/{group_name}/tiers/{tier_id}/limits/{limit_id}/
         * @secure
         */
        groupsTiersLimitsRetrieve: (groupName: string, limitId: string, tierId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupTierLimitResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersLimitsUpdate
         * @summary Update group tier limit
         * @request PUT:/3/admin/groups/{group_name}/tiers/{tier_id}/limits/{limit_id}/
         * @secure
         */
        groupsTiersLimitsUpdate: (groupName: string, limitId: string, tierId: string, data: AdminUpdateGroupTierLimit, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupTierLimitResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersLimitsPartialUpdate
         * @summary Partially update group tier limit
         * @request PATCH:/3/admin/groups/{group_name}/tiers/{tier_id}/limits/{limit_id}/
         * @secure
         */
        groupsTiersLimitsPartialUpdate: (groupName: string, limitId: string, tierId: string, data: PatchedAdminUpdateGroupTierLimit, params?: RequestParams$b) => Promise<HttpResponse$a<AdminGroupTierLimitResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersLimitsDestroy
         * @summary Delete group tier limit
         * @request DELETE:/3/admin/groups/{group_name}/tiers/{tier_id}/limits/{limit_id}/
         * @secure
         */
        groupsTiersLimitsDestroy: (groupName: string, limitId: string, tierId: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsList
         * @summary List tier requirement sets
         * @request GET:/3/admin/groups/{group_name}/tiers/{tier_id}/requirement-sets/
         * @secure
         */
        groupsTiersRequirementSetsList: ({ groupName, tierId, ...query }: GroupsTiersRequirementSetsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedGroupTierRequirementSetListResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsCreate
         * @summary Create tier requirement set
         * @request POST:/3/admin/groups/{group_name}/tiers/{tier_id}/requirement-sets/
         * @secure
         */
        groupsTiersRequirementSetsCreate: (groupName: string, tierId: string, data: CreateUpdateGroupTierRequirementSet, params?: RequestParams$b) => Promise<HttpResponse$a<GroupTierRequirementSetResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsRetrieve
         * @summary Retrieve tier requirement set
         * @request GET:/3/admin/groups/{group_name}/tiers/{tier_id}/requirement-sets/{req_set_id}/
         * @secure
         */
        groupsTiersRequirementSetsRetrieve: (groupName: string, reqSetId: string, tierId: string, params?: RequestParams$b) => Promise<HttpResponse$a<GroupTierRequirementSetResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsUpdate
         * @summary Update tier requirement set
         * @request PUT:/3/admin/groups/{group_name}/tiers/{tier_id}/requirement-sets/{req_set_id}/
         * @secure
         */
        groupsTiersRequirementSetsUpdate: (groupName: string, reqSetId: string, tierId: string, data: CreateUpdateGroupTierRequirementSet, params?: RequestParams$b) => Promise<HttpResponse$a<GroupTierRequirementSetResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsPartialUpdate
         * @summary Partially update tier requirement set
         * @request PATCH:/3/admin/groups/{group_name}/tiers/{tier_id}/requirement-sets/{req_set_id}/
         * @secure
         */
        groupsTiersRequirementSetsPartialUpdate: (groupName: string, reqSetId: string, tierId: string, data: PatchedCreateUpdateGroupTierRequirementSet, params?: RequestParams$b) => Promise<HttpResponse$a<GroupTierRequirementSetResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsDestroy
         * @summary Delete tier requirement set
         * @request DELETE:/3/admin/groups/{group_name}/tiers/{tier_id}/requirement-sets/{req_set_id}/
         * @secure
         */
        groupsTiersRequirementSetsDestroy: (groupName: string, reqSetId: string, tierId: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsItemsList
         * @summary List tier requirement set items
         * @request GET:/3/admin/groups/{group_name}/tiers/{tier_id}/requirement-sets/{req_set_id}/items/
         * @secure
         */
        groupsTiersRequirementSetsItemsList: ({ groupName, reqSetId, tierId, ...query }: GroupsTiersRequirementSetsItemsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedGroupTierRequirementSetItemListResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsItemsCreate
         * @summary Create tier requirement set item
         * @request POST:/3/admin/groups/{group_name}/tiers/{tier_id}/requirement-sets/{req_set_id}/items/
         * @secure
         */
        groupsTiersRequirementSetsItemsCreate: (groupName: string, reqSetId: string, tierId: string, data: CreateGroupTierRequirementSetItem, params?: RequestParams$b) => Promise<HttpResponse$a<GroupTierRequirementSetItemResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsItemsRetrieve
         * @summary Retrieve tier requirement set item
         * @request GET:/3/admin/groups/{group_name}/tiers/{tier_id}/requirement-sets/{req_set_id}/items/{req_item_id}/
         * @secure
         */
        groupsTiersRequirementSetsItemsRetrieve: (groupName: string, reqItemId: string, reqSetId: string, tierId: string, params?: RequestParams$b) => Promise<HttpResponse$a<GroupTierRequirementSetItemResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsItemsUpdate
         * @summary Update tier requirement set item
         * @request PUT:/3/admin/groups/{group_name}/tiers/{tier_id}/requirement-sets/{req_set_id}/items/{req_item_id}/
         * @secure
         */
        groupsTiersRequirementSetsItemsUpdate: (groupName: string, reqItemId: string, reqSetId: string, tierId: string, data: GroupTierRequirementSetItem, params?: RequestParams$b) => Promise<HttpResponse$a<GroupTierRequirementSetItemResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsItemsPartialUpdate
         * @summary Partially update tier requirement set item
         * @request PATCH:/3/admin/groups/{group_name}/tiers/{tier_id}/requirement-sets/{req_set_id}/items/{req_item_id}/
         * @secure
         */
        groupsTiersRequirementSetsItemsPartialUpdate: (groupName: string, reqItemId: string, reqSetId: string, tierId: string, data: PatchedGroupTierRequirementSetItem, params?: RequestParams$b) => Promise<HttpResponse$a<GroupTierRequirementSetItemResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersRequirementSetsItemsDestroy
         * @summary Delete tier requirement set item
         * @request DELETE:/3/admin/groups/{group_name}/tiers/{tier_id}/requirement-sets/{req_set_id}/items/{req_item_id}/
         * @secure
         */
        groupsTiersRequirementSetsItemsDestroy: (groupName: string, reqItemId: string, reqSetId: string, tierId: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersSettingsRetrieve
         * @summary Retrieve group tier settings
         * @request GET:/3/admin/groups/{group_name}/tiers/{tier_id}/settings/
         * @secure
         */
        groupsTiersSettingsRetrieve: (groupName: string, tierId: string, params?: RequestParams$b) => Promise<HttpResponse$a<GroupTierSettingsResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersSettingsUpdate
         * @summary Update group tier settings
         * @request PUT:/3/admin/groups/{group_name}/tiers/{tier_id}/settings/
         * @secure
         */
        groupsTiersSettingsUpdate: (groupName: string, tierId: string, data: AdminUpdateGroupTierSettings, params?: RequestParams$b) => Promise<HttpResponse$a<GroupTierSettingsResponse, any>>;
        /**
         * No description
         *
         * @tags groups
         * @name GroupsTiersSettingsPartialUpdate
         * @summary Partially update group tier settings
         * @request PATCH:/3/admin/groups/{group_name}/tiers/{tier_id}/settings/
         * @secure
         */
        groupsTiersSettingsPartialUpdate: (groupName: string, tierId: string, data: PatchedAdminUpdateGroupTierSettings, params?: RequestParams$b) => Promise<HttpResponse$a<GroupTierSettingsResponse, any>>;
        /**
         * No description
         *
         * @tags legal-terms
         * @name LegalTermsList
         * @summary List legal terms
         * @request GET:/3/admin/legal-terms/
         * @secure
         */
        legalTermsList: (query: LegalTermsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminLegalTermListResponse, any>>;
        /**
         * No description
         *
         * @tags legal-terms
         * @name LegalTermsCreate
         * @summary Create legal terms
         * @request POST:/3/admin/legal-terms/
         * @secure
         */
        legalTermsCreate: (data: AdminCreateUpdateLegalTerm, params?: RequestParams$b) => Promise<HttpResponse$a<AdminLegalTermResponse, any>>;
        /**
         * No description
         *
         * @tags legal-terms
         * @name LegalTermsRetrieve
         * @summary Retrieve legal terms
         * @request GET:/3/admin/legal-terms/{id}/
         * @secure
         */
        legalTermsRetrieve: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminLegalTermResponse, any>>;
        /**
         * No description
         *
         * @tags legal-terms
         * @name LegalTermsUpdate
         * @summary Update legal terms
         * @request PUT:/3/admin/legal-terms/{id}/
         * @secure
         */
        legalTermsUpdate: (id: string, data: AdminCreateUpdateLegalTerm, params?: RequestParams$b) => Promise<HttpResponse$a<AdminLegalTermResponse, any>>;
        /**
         * No description
         *
         * @tags legal-terms
         * @name LegalTermsPartialUpdate
         * @summary Partially update legal terms
         * @request PATCH:/3/admin/legal-terms/{id}/
         * @secure
         */
        legalTermsPartialUpdate: (id: string, data: PatchedAdminCreateUpdateLegalTerm, params?: RequestParams$b) => Promise<HttpResponse$a<AdminLegalTermResponse, any>>;
        /**
         * No description
         *
         * @tags legal-terms
         * @name LegalTermsDestroy
         * @summary Delete legal terms
         * @request DELETE:/3/admin/legal-terms/{id}/
         * @secure
         */
        legalTermsDestroy: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags legal-terms
         * @name LegalTermsVersionsList
         * @summary List legal terms versions
         * @request GET:/3/admin/legal-terms/{id}/versions/
         * @secure
         */
        legalTermsVersionsList: ({ id, ...query }: LegalTermsVersionsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminLegalTermVersionListResponse, any>>;
        /**
         * No description
         *
         * @tags legal-terms
         * @name LegalTermsVersionsCreate
         * @summary Create legal terms version
         * @request POST:/3/admin/legal-terms/{id}/versions/
         * @secure
         */
        legalTermsVersionsCreate: (id: string, data: AdminLegalTermVersion, params?: RequestParams$b) => Promise<HttpResponse$a<AdminLegalTermVersionResponse, any>>;
        /**
         * No description
         *
         * @tags legal-terms
         * @name LegalTermsVersionsRetrieve
         * @summary Retrieve legal terms version
         * @request GET:/3/admin/legal-terms/{term_id}/versions/{version_id}/
         * @secure
         */
        legalTermsVersionsRetrieve: (termId: string, versionId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminLegalTermVersionResponse, any>>;
        /**
         * No description
         *
         * @tags legal-terms
         * @name LegalTermsVersionsUpdate
         * @summary Update legal terms version
         * @request PUT:/3/admin/legal-terms/{term_id}/versions/{version_id}/
         * @secure
         */
        legalTermsVersionsUpdate: (termId: string, versionId: string, data: AdminLegalTermVersion, params?: RequestParams$b) => Promise<HttpResponse$a<AdminLegalTermVersionResponse, any>>;
        /**
         * No description
         *
         * @tags legal-terms
         * @name LegalTermsVersionsPartialUpdate
         * @summary Partially update legal terms version
         * @request PATCH:/3/admin/legal-terms/{term_id}/versions/{version_id}/
         * @secure
         */
        legalTermsVersionsPartialUpdate: (termId: string, versionId: string, data: PatchedAdminLegalTermVersion, params?: RequestParams$b) => Promise<HttpResponse$a<AdminLegalTermVersionResponse, any>>;
        /**
         * No description
         *
         * @tags legal-terms
         * @name LegalTermsVersionsDestroy
         * @summary Delete legal terms version
         * @request DELETE:/3/admin/legal-terms/{term_id}/versions/{version_id}/
         * @secure
         */
        legalTermsVersionsDestroy: (termId: string, versionId: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags metrics
         * @name MetricsList
         * @summary List metrics
         * @request GET:/3/admin/metrics/
         * @secure
         */
        metricsList: (query: MetricsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminMetricListResponse, any>>;
        /**
         * No description
         *
         * @tags metrics
         * @name MetricsCreate
         * @summary Create metric
         * @request POST:/3/admin/metrics/
         * @secure
         */
        metricsCreate: (data: AdminCreateMetric, params?: RequestParams$b) => Promise<HttpResponse$a<AdminMetricResponse, any>>;
        /**
         * No description
         *
         * @tags metrics
         * @name MetricsRetrieve
         * @summary Retrieve metric
         * @request GET:/3/admin/metrics/{identifier}/
         * @secure
         */
        metricsRetrieve: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminMetricResponse, any>>;
        /**
         * No description
         *
         * @tags metrics
         * @name MetricsDestroy
         * @summary Delete metric
         * @request DELETE:/3/admin/metrics/{identifier}/
         * @secure
         */
        metricsDestroy: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags metrics
         * @name MetricsPointsList
         * @summary List metric points
         * @request GET:/3/admin/metrics/{identifier}/points/
         * @secure
         */
        metricsPointsList: ({ identifier, ...query }: MetricsPointsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminMetricPointListResponse, any>>;
        /**
         * No description
         *
         * @tags oauth-clients
         * @name OauthClientsList
         * @request GET:/3/admin/oauth-clients/
         * @secure
         */
        oauthClientsList: (query: OauthClientsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminOauthClientListResponse, any>>;
        /**
         * No description
         *
         * @tags oauth-clients
         * @name OauthClientsCreate
         * @request POST:/3/admin/oauth-clients/
         * @secure
         */
        oauthClientsCreate: (data: AdminOauthClient, params?: RequestParams$b) => Promise<HttpResponse$a<AdminOauthClientResponse, any>>;
        /**
         * No description
         *
         * @tags oauth-clients
         * @name OauthClientsRetrieve
         * @request GET:/3/admin/oauth-clients/{identifier}/
         * @secure
         */
        oauthClientsRetrieve: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminOauthClientResponse, any>>;
        /**
         * No description
         *
         * @tags oauth-clients
         * @name OauthClientsUpdate
         * @request PUT:/3/admin/oauth-clients/{identifier}/
         * @secure
         */
        oauthClientsUpdate: (identifier: string, data: AdminUpdateOauthClient, params?: RequestParams$b) => Promise<HttpResponse$a<AdminOauthClientResponse, any>>;
        /**
         * No description
         *
         * @tags oauth-clients
         * @name OauthClientsPartialUpdate
         * @request PATCH:/3/admin/oauth-clients/{identifier}/
         * @secure
         */
        oauthClientsPartialUpdate: (identifier: string, data: PatchedAdminUpdateOauthClient, params?: RequestParams$b) => Promise<HttpResponse$a<AdminOauthClientResponse, any>>;
        /**
         * No description
         *
         * @tags oauth-clients
         * @name OauthClientsDestroy
         * @request DELETE:/3/admin/oauth-clients/{identifier}/
         * @secure
         */
        oauthClientsDestroy: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags permissions
         * @name PermissionsList
         * @summary List permissions
         * @request GET:/3/admin/permissions/
         * @secure
         */
        permissionsList: (query: PermissionsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedPermissionListResponse, any>>;
        /**
         * No description
         *
         * @tags permissions
         * @name PermissionsRetrieve
         * @summary Retrive permission
         * @request GET:/3/admin/permissions/{permission_id}/
         * @secure
         */
        permissionsRetrieve: (permissionId: string, params?: RequestParams$b) => Promise<HttpResponse$a<PermissionResponse, any>>;
        /**
         * No description
         *
         * @tags requests
         * @name RequestsList
         * @summary List requests
         * @request GET:/3/admin/requests/
         * @secure
         */
        requestsList: (query: RequestsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminRequestListResponse, any>>;
        /**
         * No description
         *
         * @tags requests
         * @name RequestsRetrieve
         * @summary Retrieve request
         * @request GET:/3/admin/requests/{request_id}/
         * @secure
         */
        requestsRetrieve: (requestId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedRequestResponse, any>>;
        /**
         * No description
         *
         * @tags search
         * @name SearchRetrieve
         * @summary Retrieve search
         * @request GET:/3/admin/search/
         * @secure
         */
        searchRetrieve: (query: SearchRetrieveParams, params?: RequestParams$b) => Promise<HttpResponse$a<SearchRetrieveData, any>>;
        /**
         * No description
         *
         * @tags services
         * @name ServicesList
         * @summary List services
         * @request GET:/3/admin/services/
         * @secure
         */
        servicesList: (query: ServicesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminServiceListResponse, any>>;
        /**
         * No description
         *
         * @tags services
         * @name ServicesCreate
         * @summary Create service
         * @request POST:/3/admin/services/
         * @secure
         */
        servicesCreate: (data: AdminService, params?: RequestParams$b) => Promise<HttpResponse$a<AdminServiceResponse, any>>;
        /**
         * No description
         *
         * @tags services
         * @name ServicesRetrieve
         * @summary Retrieve service
         * @request GET:/3/admin/services/{service_id}/
         * @secure
         */
        servicesRetrieve: (serviceId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminServiceResponse, any>>;
        /**
         * No description
         *
         * @tags services
         * @name ServicesUpdate
         * @summary Update service
         * @request PUT:/3/admin/services/{service_id}/
         * @secure
         */
        servicesUpdate: (serviceId: string, data: AdminUpdateService, params?: RequestParams$b) => Promise<HttpResponse$a<AdminServiceResponse, any>>;
        /**
         * No description
         *
         * @tags services
         * @name ServicesPartialUpdate
         * @summary Partially update service
         * @request PATCH:/3/admin/services/{service_id}/
         * @secure
         */
        servicesPartialUpdate: (serviceId: string, data: PatchedAdminUpdateService, params?: RequestParams$b) => Promise<HttpResponse$a<AdminServiceResponse, any>>;
        /**
         * No description
         *
         * @tags services
         * @name ServicesDestroy
         * @summary Delete service
         * @request DELETE:/3/admin/services/{service_id}/
         * @secure
         */
        servicesDestroy: (serviceId: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags services
         * @name ServicesPermissionsList
         * @summary List service permissions
         * @request GET:/3/admin/services/{service_id}/permissions/
         * @secure
         */
        servicesPermissionsList: ({ serviceId, ...query }: ServicesPermissionsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedPermissionListResponse, any>>;
        /**
         * No description
         *
         * @tags services
         * @name ServicesPermissionsCreate
         * @summary Create service permissions
         * @request POST:/3/admin/services/{service_id}/permissions/
         * @secure
         */
        servicesPermissionsCreate: (serviceId: string, data: AdminCreateServicePermission, params?: RequestParams$b) => Promise<HttpResponse$a<AdminMultiPermissionResponse, any>>;
        /**
         * No description
         *
         * @tags services
         * @name ServicesPermissionsRetrieve
         * @summary Retrieve service permission
         * @request GET:/3/admin/services/{service_id}/permissions/{permission_id}/
         * @secure
         */
        servicesPermissionsRetrieve: (permissionId: string, serviceId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUpdateServicePermissionResponse, any>>;
        /**
         * No description
         *
         * @tags services
         * @name ServicesPermissionsDestroy
         * @summary Delete service permission
         * @request DELETE:/3/admin/services/{service_id}/permissions/{permission_id}/
         * @secure
         */
        servicesPermissionsDestroy: (permissionId: string, serviceId: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags statements
         * @name StatementsList
         * @request GET:/3/admin/statements/
         * @secure
         */
        statementsList: (query: StatementsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminStatementListResponse, any>>;
        /**
         * No description
         *
         * @tags statements
         * @name StatementsCreate
         * @request POST:/3/admin/statements/
         * @secure
         */
        statementsCreate: (data: AdminCreateStatement, params?: RequestParams$b) => Promise<HttpResponse$a<AdminStatementResponse, any>>;
        /**
         * No description
         *
         * @tags statements
         * @name StatementsRetrieve
         * @request GET:/3/admin/statements/{identifier}/
         * @secure
         */
        statementsRetrieve: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminStatementResponse, any>>;
        /**
         * No description
         *
         * @tags statements
         * @name StatementsDestroy
         * @request DELETE:/3/admin/statements/{identifier}/
         * @secure
         */
        statementsDestroy: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags subtypes
         * @name SubtypesList
         * @summary List subtypes
         * @request GET:/3/admin/subtypes/
         * @secure
         */
        subtypesList: (query: SubtypesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<AdminTransactionSubtypeListResponse, any>>;
        /**
         * No description
         *
         * @tags subtypes
         * @name SubtypesCreate
         * @summary Create subtype
         * @request POST:/3/admin/subtypes/
         * @secure
         */
        subtypesCreate: (data: AdminCreateTransactionSubtype, params?: RequestParams$b) => Promise<HttpResponse$a<AdminTransactionSubtypeResponse, any>>;
        /**
         * No description
         *
         * @tags subtypes
         * @name SubtypesRetrieve
         * @summary Retrieve subtype
         * @request GET:/3/admin/subtypes/{id}/
         * @secure
         */
        subtypesRetrieve: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminTransactionSubtypeResponse, any>>;
        /**
         * No description
         *
         * @tags subtypes
         * @name SubtypesUpdate
         * @summary Update subtype
         * @request PUT:/3/admin/subtypes/{id}/
         * @secure
         */
        subtypesUpdate: (id: string, data: AdminUpdateTransactionSubtype, params?: RequestParams$b) => Promise<HttpResponse$a<AdminTransactionSubtypeResponse, any>>;
        /**
         * No description
         *
         * @tags subtypes
         * @name SubtypesPartialUpdate
         * @summary Partially update subtype
         * @request PATCH:/3/admin/subtypes/{id}/
         * @secure
         */
        subtypesPartialUpdate: (id: string, data: PatchedAdminUpdateTransactionSubtype, params?: RequestParams$b) => Promise<HttpResponse$a<AdminTransactionSubtypeResponse, any>>;
        /**
         * No description
         *
         * @tags subtypes
         * @name SubtypesDestroy
         * @summary Delete subtype
         * @request DELETE:/3/admin/subtypes/{id}/
         * @secure
         */
        subtypesDestroy: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags transaction-collections
         * @name TransactionCollectionsList
         * @summary List transaction-collections
         * @request GET:/3/admin/transaction-collections/
         * @secure
         */
        transactionCollectionsList: (query: TransactionCollectionsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminTransactionCollectionListResponse, any>>;
        /**
         * No description
         *
         * @tags transaction-collections
         * @name TransactionCollectionsCreate
         * @summary Create transaction-collections
         * @request POST:/3/admin/transaction-collections/
         * @secure
         */
        transactionCollectionsCreate: (data: AdminCreateTransactionCollection, params?: RequestParams$b) => Promise<HttpResponse$a<AdminTransactionCollectionResponse, any>>;
        /**
         * No description
         *
         * @tags transaction-collections
         * @name TransactionCollectionsRetrieve
         * @summary Retrieve transaction-collection
         * @request GET:/3/admin/transaction-collections/{identifier}/
         * @secure
         */
        transactionCollectionsRetrieve: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminTransactionCollectionResponse, any>>;
        /**
         * No description
         *
         * @tags transaction-collections
         * @name TransactionCollectionsUpdate
         * @summary Update transaction-collection
         * @request PUT:/3/admin/transaction-collections/{identifier}/
         * @secure
         */
        transactionCollectionsUpdate: (identifier: string, data: AdminUpdateTransactionCollection, params?: RequestParams$b) => Promise<HttpResponse$a<AdminTransactionCollectionResponse, any>>;
        /**
         * No description
         *
         * @tags transaction-collections
         * @name TransactionCollectionsPartialUpdate
         * @summary Partially update transaction-collection
         * @request PATCH:/3/admin/transaction-collections/{identifier}/
         * @secure
         */
        transactionCollectionsPartialUpdate: (identifier: string, data: PatchedAdminUpdateTransactionCollection, params?: RequestParams$b) => Promise<HttpResponse$a<AdminTransactionCollectionResponse, any>>;
        /**
         * No description
         *
         * @tags transaction-collections
         * @name TransactionCollectionsTransactionsList
         * @summary List transaction-collection transactions
         * @request GET:/3/admin/transaction-collections/{identifier}/transactions/
         * @secure
         */
        transactionCollectionsTransactionsList: ({ identifier, ...query }: TransactionCollectionsTransactionsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminTransactionCollectionTransactionListResponse, any>>;
        /**
         * No description
         *
         * @tags transaction-collections
         * @name TransactionCollectionsTransactionsCreate
         * @summary Create transaction-collection transaction
         * @request POST:/3/admin/transaction-collections/{identifier}/transactions/
         * @secure
         */
        transactionCollectionsTransactionsCreate: (identifier: string, data: AdminAppendTransactionCollectionMultiTransaction, params?: RequestParams$b) => Promise<HttpResponse$a<AdminTransactionCollectionTransactionResponse, any>>;
        /**
         * No description
         *
         * @tags transaction-transitions
         * @name TransactionTransitionsList
         * @summary List transaction transitions
         * @request GET:/3/admin/transaction-transitions/
         * @secure
         */
        transactionTransitionsList: (query: TransactionTransitionsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminTransactionTransitionListResponse, any>>;
        /**
         * No description
         *
         * @tags transaction-transitions
         * @name TransactionTransitionsRetrieve
         * @summary Retrieve transaction transition
         * @request GET:/3/admin/transaction-transitions/{identifier}/
         * @secure
         */
        transactionTransitionsRetrieve: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedTransactionTransitionResponse, any>>;
        /**
         * No description
         *
         * @tags transaction-transitions
         * @name TransactionTransitionsUpdate
         * @summary Update transaction transition
         * @request PUT:/3/admin/transaction-transitions/{identifier}/
         * @secure
         */
        transactionTransitionsUpdate: (identifier: string, data: AdminUpdateTransactionTransition, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedTransactionTransitionResponse, any>>;
        /**
         * No description
         *
         * @tags transaction-transitions
         * @name TransactionTransitionsPartialUpdate
         * @summary Partially update transaction transition
         * @request PATCH:/3/admin/transaction-transitions/{identifier}/
         * @secure
         */
        transactionTransitionsPartialUpdate: (identifier: string, data: PatchedAdminUpdateTransactionTransition, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedTransactionTransitionResponse, any>>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsList
         * @summary List transactions
         * @request GET:/3/admin/transactions/
         * @secure
         */
        transactionsList: (query: TransactionsListParams$2, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminTransactionListResponse, any>>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsCreate
         * @summary Create transaction
         * @request POST:/3/admin/transactions/
         * @secure
         */
        transactionsCreate: (data: AdminCreateMultiTransaction, params?: RequestParams$b) => Promise<HttpResponse$a<AdminMultiTransactionResponse, any>>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsRetrieve
         * @summary Retrieve transaction
         * @request GET:/3/admin/transactions/{tx_code}/
         * @secure
         */
        transactionsRetrieve: (txCode: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedTransactionResponse, any>>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsUpdate
         * @summary Update transaction
         * @request PUT:/3/admin/transactions/{tx_code}/
         * @secure
         */
        transactionsUpdate: (txCode: string, data: AdminUpdateExtendedTransaction, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedTransactionResponse, any>>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsPartialUpdate
         * @summary Partially update transaction
         * @request PATCH:/3/admin/transactions/{tx_code}/
         * @secure
         */
        transactionsPartialUpdate: (txCode: string, data: PatchedAdminUpdateExtendedTransaction, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedTransactionResponse, any>>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsMessagesList
         * @summary List tansaction messages
         * @request GET:/3/admin/transactions/{tx_code}/messages/
         * @secure
         */
        transactionsMessagesList: ({ txCode, ...query }: TransactionsMessagesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminTransactionMessageListResponse, any>>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsMessagesCreate
         * @summary Create transaction message
         * @request POST:/3/admin/transactions/{tx_code}/messages/
         * @secure
         */
        transactionsMessagesCreate: (txCode: string, data: AdminCreateTransactionMessage, params?: RequestParams$b) => Promise<HttpResponse$a<AdminTransactionMessageResponse, any>>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsMessagesRetrieve
         * @summary Retrieve transaction message
         * @request GET:/3/admin/transactions/{tx_code}/messages/{id}/
         * @secure
         */
        transactionsMessagesRetrieve: (id: string, txCode: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminTransactionMessageResponse, any>>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsCreditCreate
         * @summary Create transaction credit
         * @request POST:/3/admin/transactions/credit/
         * @secure
         */
        transactionsCreditCreate: (data: AdminCreateCreditTransaction, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedTransactionResponse, any>>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsDebitCreate
         * @summary Create transaction debit
         * @request POST:/3/admin/transactions/debit/
         * @secure
         */
        transactionsDebitCreate: (data: AdminCreateDebitTransaction, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedTransactionResponse, any>>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsTotalsRetrieve
         * @summary List transaction totals
         * @request GET:/3/admin/transactions/totals/
         * @secure
         */
        transactionsTotalsRetrieve: (params?: RequestParams$b) => Promise<HttpResponse$a<TotalTransactionResponse, any>>;
        /**
         * No description
         *
         * @tags transactions
         * @name TransactionsTransferCreate
         * @summary Create transaction debit
         * @request POST:/3/admin/transactions/transfer/
         * @secure
         */
        transactionsTransferCreate: (data: AdminCreateTransferTransaction, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedTransactionResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersList
         * @summary List users
         * @request GET:/3/admin/users/
         * @secure
         */
        usersList: (query: UsersListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminUserInfoListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersCreate
         * @summary Create user
         * @request POST:/3/admin/users/
         * @secure
         */
        usersCreate: (data: AdminCreateUserInfo, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedUserInfoResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersRetrieve
         * @summary Retrieve user
         * @request GET:/3/admin/users/{identifier}/
         * @secure
         */
        usersRetrieve: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedUserInfoResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersUpdate
         * @summary Update user
         * @request PUT:/3/admin/users/{identifier}/
         * @secure
         */
        usersUpdate: (identifier: string, data: AdminUpdateUserInfo, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedUserInfoResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersPartialUpdate
         * @summary Patially update user
         * @request PATCH:/3/admin/users/{identifier}/
         * @secure
         */
        usersPartialUpdate: (identifier: string, data: PatchedAdminUpdateUserInfo, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedUserInfoResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersGroupsList
         * @summary List user groups
         * @request GET:/3/admin/users/{identifier}/groups/
         * @secure
         */
        usersGroupsList: ({ identifier, ...query }: UsersGroupsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminUserGroupListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersGroupsCreate
         * @summary Create account definitions
         * @request POST:/3/admin/users/{identifier}/groups/
         * @secure
         */
        usersGroupsCreate: (identifier: string, data: AdminCreateUserGroup, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserGroupResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersGroupsRetrieve
         * @summary Retrieve user group
         * @request GET:/3/admin/users/{identifier}/groups/{group_name}/
         * @secure
         */
        usersGroupsRetrieve: (groupName: string, identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserGroupResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersGroupsDestroy
         * @summary Delete user group
         * @request DELETE:/3/admin/users/{identifier}/groups/{group_name}/
         * @secure
         */
        usersGroupsDestroy: (groupName: string, identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersLegalTermsList
         * @summary List user legal-terms
         * @request GET:/3/admin/users/{identifier}/legal-terms/
         * @secure
         */
        usersLegalTermsList: ({ identifier, ...query }: UsersLegalTermsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminUserLegalTermListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersLegalTermsRetrieve
         * @summary Retrieve user legal-term
         * @request GET:/3/admin/users/{identifier}/legal-terms/{term_id}/
         * @secure
         */
        usersLegalTermsRetrieve: (identifier: string, termId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserLegalTermResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersLegalTermsVersionsList
         * @summary List user legal-term versions
         * @request GET:/3/admin/users/{identifier}/legal-terms/{term_id}/versions/
         * @secure
         */
        usersLegalTermsVersionsList: ({ identifier, termId, ...query }: UsersLegalTermsVersionsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminUserLegalTermVersionListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersLegalTermsVersionsRetrieve
         * @summary Retrieve legal-term version
         * @request GET:/3/admin/users/{identifier}/legal-terms/{term_id}/versions/{version_id}/
         * @secure
         */
        usersLegalTermsVersionsRetrieve: (identifier: string, termId: string, versionId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserLegalTermVersionResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersMessagesList
         * @summary List user messages
         * @request GET:/3/admin/users/{identifier}/messages/
         * @secure
         */
        usersMessagesList: ({ identifier, ...query }: UsersMessagesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminUserMessageListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersMessagesCreate
         * @summary Create user message
         * @request POST:/3/admin/users/{identifier}/messages/
         * @secure
         */
        usersMessagesCreate: (identifier: string, data: AdminCreateUserMessage, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserMessageResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersMessagesRetrieve
         * @summary Retrieve user message
         * @request GET:/3/admin/users/{identifier}/messages/{id}/
         * @secure
         */
        usersMessagesRetrieve: (id: string, identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserMessageResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersPermissionsList
         * @summary List user permissions
         * @request GET:/3/admin/users/{identifier}/permissions/
         * @secure
         */
        usersPermissionsList: ({ identifier, ...query }: UsersPermissionsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedUserPermissionListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersPermissionsCreate
         * @summary Create user permission
         * @request POST:/3/admin/users/{identifier}/permissions/
         * @secure
         */
        usersPermissionsCreate: (identifier: string, data: AdminCreateMultiUserPermission, params?: RequestParams$b) => Promise<HttpResponse$a<AdminMultiUserPermissionResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersPermissionsRetrieve
         * @summary Retrieve user permission
         * @request GET:/3/admin/users/{identifier}/permissions/{permission_id}/
         * @secure
         */
        usersPermissionsRetrieve: (identifier: string, permissionId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserPermissionResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersPermissionsUpdate
         * @summary Update user permission
         * @request PUT:/3/admin/users/{identifier}/permissions/{permission_id}/
         * @secure
         */
        usersPermissionsUpdate: (identifier: string, permissionId: string, data: AdminUserPermission, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserPermissionResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersPermissionsPartialUpdate
         * @summary Partially update user permission
         * @request PATCH:/3/admin/users/{identifier}/permissions/{permission_id}/
         * @secure
         */
        usersPermissionsPartialUpdate: (identifier: string, permissionId: string, data: PatchedAdminUserPermission, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserPermissionResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersPermissionsDestroy
         * @summary Delete user permission
         * @request DELETE:/3/admin/users/{identifier}/permissions/{permission_id}/
         * @secure
         */
        usersPermissionsDestroy: (identifier: string, permissionId: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersSettingsRetrieve
         * @summary Retrieve user settings
         * @request GET:/3/admin/users/{identifier}/settings/
         * @secure
         */
        usersSettingsRetrieve: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<UserSettingsResponse$1, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersSettingsUpdate
         * @summary Update user settings
         * @request PUT:/3/admin/users/{identifier}/settings/
         * @secure
         */
        usersSettingsUpdate: (identifier: string, data: AdminUpdateUserSettings, params?: RequestParams$b) => Promise<HttpResponse$a<UserSettingsResponse$1, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersSettingsPartialUpdate
         * @summary Partially update user settings
         * @request PATCH:/3/admin/users/{identifier}/settings/
         * @secure
         */
        usersSettingsPartialUpdate: (identifier: string, data: PatchedAdminUpdateUserSettings, params?: RequestParams$b) => Promise<HttpResponse$a<UserSettingsResponse$1, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersAddressesList
         * @summary List users addresses
         * @request GET:/3/admin/users/addresses/
         * @secure
         */
        usersAddressesList: (query: UsersAddressesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminUserAddressListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersAddressesCreate
         * @summary Create user address
         * @request POST:/3/admin/users/addresses/
         * @secure
         */
        usersAddressesCreate: (data: AdminCreateUserAddress, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserAddressResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersAddressesRetrieve
         * @summary Retrieve user address
         * @request GET:/3/admin/users/addresses/{id}/
         * @secure
         */
        usersAddressesRetrieve: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserAddressResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersAddressesUpdate
         * @summary Update user address
         * @request PUT:/3/admin/users/addresses/{id}/
         * @secure
         */
        usersAddressesUpdate: (id: string, data: AdminUserAddress, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserAddressResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersAddressesPartialUpdate
         * @summary Partially update user address
         * @request PATCH:/3/admin/users/addresses/{id}/
         * @secure
         */
        usersAddressesPartialUpdate: (id: string, data: PatchedAdminUserAddress, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserAddressResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersAddressesDestroy
         * @summary Delete user address
         * @request DELETE:/3/admin/users/addresses/{id}/
         * @secure
         */
        usersAddressesDestroy: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersBankAccountsList
         * @summary List users bank-accounts
         * @request GET:/3/admin/users/bank-accounts/
         * @secure
         */
        usersBankAccountsList: (query: UsersBankAccountsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminUserBankAccountListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersBankAccountsCreate
         * @summary Create user bank-account
         * @request POST:/3/admin/users/bank-accounts/
         * @secure
         */
        usersBankAccountsCreate: (data: AdminCreateUserBankAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserBankAccountResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersBankAccountsRetrieve
         * @summary Retrieve users bank-account
         * @request GET:/3/admin/users/bank-accounts/{id}/
         * @secure
         */
        usersBankAccountsRetrieve: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserBankAccountResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersBankAccountsUpdate
         * @summary Update user bank-account
         * @request PUT:/3/admin/users/bank-accounts/{id}/
         * @secure
         */
        usersBankAccountsUpdate: (id: string, data: AdminUserBankAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserBankAccountResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersBankAccountsPartialUpdate
         * @summary Partially update user bank-account
         * @request PATCH:/3/admin/users/bank-accounts/{id}/
         * @secure
         */
        usersBankAccountsPartialUpdate: (id: string, data: PatchedAdminUserBankAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserBankAccountResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersBankAccountsDestroy
         * @summary Delete user bank-account
         * @request DELETE:/3/admin/users/bank-accounts/{id}/
         * @secure
         */
        usersBankAccountsDestroy: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersBankAccountsAccountCurrenciesList
         * @summary List users bank-accounts account currencies
         * @request GET:/3/admin/users/bank-accounts/{id}/account-currencies/
         * @secure
         */
        usersBankAccountsAccountCurrenciesList: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminReducedAccountAssetListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersBankAccountsAccountCurrenciesCreate
         * @summary Create users bank-accounts account currency
         * @request POST:/3/admin/users/bank-accounts/{id}/account-currencies/
         * @secure
         */
        usersBankAccountsAccountCurrenciesCreate: (id: string, data: AdminCreateUserBankAccountAccountAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminReducedAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersBankAccountsAccountCurrenciesRetrieve
         * @summary Retrieve users bank-account account currency
         * @request GET:/3/admin/users/bank-accounts/{id}/account-currencies/{account_currency_id}/
         * @secure
         */
        usersBankAccountsAccountCurrenciesRetrieve: (accountCurrencyId: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersBankAccountsAccountCurrenciesDestroy
         * @summary Delete users bank-account account currency
         * @request DELETE:/3/admin/users/bank-accounts/{id}/account-currencies/{account_currency_id}/
         * @secure
         */
        usersBankAccountsAccountCurrenciesDestroy: (accountCurrencyId: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersBankAccountsCurrenciesList
         * @summary List user bank-account currencies
         * @request GET:/3/admin/users/bank-accounts/{id}/currencies/
         * @deprecated
         * @secure
         */
        usersBankAccountsCurrenciesList: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserBankAccountAssetListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersBankAccountsCurrenciesCreate
         * @summary Create user bank-account currency
         * @request POST:/3/admin/users/bank-accounts/{id}/currencies/
         * @deprecated
         * @secure
         */
        usersBankAccountsCurrenciesCreate: (id: string, data: AdminCreateUserBankAccountAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserBankAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersBankAccountsCurrenciesRetrieve
         * @summary Retrieve user bank-account currency
         * @request GET:/3/admin/users/bank-accounts/{id}/currencies/{code}/
         * @deprecated
         * @secure
         */
        usersBankAccountsCurrenciesRetrieve: (code: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserBankAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersBankAccountsCurrenciesDestroy
         * @summary Delete user bank-account currency
         * @request DELETE:/3/admin/users/bank-accounts/{id}/currencies/{code}/
         * @deprecated
         * @secure
         */
        usersBankAccountsCurrenciesDestroy: (code: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersCryptoAccountsList
         * @summary List users crypto-accounts
         * @request GET:/3/admin/users/crypto-accounts/
         * @secure
         */
        usersCryptoAccountsList: (query: UsersCryptoAccountsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminCryptoAccountListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersCryptoAccountsCreate
         * @summary Create user crypto-account
         * @request POST:/3/admin/users/crypto-accounts/
         * @secure
         */
        usersCryptoAccountsCreate: (data: AdminCreateCryptoAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCryptoAccountResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersCryptoAccountsRetrieve
         * @summary Retrieve users crypto-account
         * @request GET:/3/admin/users/crypto-accounts/{id}/
         * @secure
         */
        usersCryptoAccountsRetrieve: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCryptoAccountResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersCryptoAccountsUpdate
         * @summary Update user crypto-account
         * @request PUT:/3/admin/users/crypto-accounts/{id}/
         * @secure
         */
        usersCryptoAccountsUpdate: (id: string, data: AdminCryptoAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCryptoAccountResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersCryptoAccountsPartialUpdate
         * @summary Partially update user crypto-account
         * @request PATCH:/3/admin/users/crypto-accounts/{id}/
         * @secure
         */
        usersCryptoAccountsPartialUpdate: (id: string, data: PatchedAdminCryptoAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCryptoAccountResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersCryptoAccountsDestroy
         * @summary Delete user crypto-account
         * @request DELETE:/3/admin/users/crypto-accounts/{id}/
         * @secure
         */
        usersCryptoAccountsDestroy: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersCryptoAccountsAccountCurrenciesList
         * @summary List users crypto-accounts account currencies
         * @request GET:/3/admin/users/crypto-accounts/{id}/account-currencies/
         * @secure
         */
        usersCryptoAccountsAccountCurrenciesList: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminReducedAccountAssetListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersCryptoAccountsAccountCurrenciesCreate
         * @summary Create users crypto-accounts account currency
         * @request POST:/3/admin/users/crypto-accounts/{id}/account-currencies/
         * @secure
         */
        usersCryptoAccountsAccountCurrenciesCreate: (id: string, data: AdminCreateCryptoAccountAccountAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminReducedAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersCryptoAccountsAccountCurrenciesRetrieve
         * @summary Retrieve users crypto-account account currency
         * @request GET:/3/admin/users/crypto-accounts/{id}/account-currencies/{account_currency_id}/
         * @secure
         */
        usersCryptoAccountsAccountCurrenciesRetrieve: (accountCurrencyId: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersCryptoAccountsAccountCurrenciesDestroy
         * @summary Delete users crypto-account account currency
         * @request DELETE:/3/admin/users/crypto-accounts/{id}/account-currencies/{account_currency_id}/
         * @secure
         */
        usersCryptoAccountsAccountCurrenciesDestroy: (accountCurrencyId: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersCryptoAccountsCurrenciesList
         * @summary List user crypto-account currencies
         * @request GET:/3/admin/users/crypto-accounts/{id}/currencies/
         * @deprecated
         * @secure
         */
        usersCryptoAccountsCurrenciesList: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCryptoAccountAssetListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersCryptoAccountsCurrenciesCreate
         * @summary Create user crypto-account currency
         * @request POST:/3/admin/users/crypto-accounts/{id}/currencies/
         * @deprecated
         * @secure
         */
        usersCryptoAccountsCurrenciesCreate: (id: string, data: AdminCreateCryptoAccountAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCryptoAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersCryptoAccountsCurrenciesRetrieve
         * @summary Retrieve user crypto-account currency
         * @request GET:/3/admin/users/crypto-accounts/{id}/currencies/{code}/
         * @deprecated
         * @secure
         */
        usersCryptoAccountsCurrenciesRetrieve: (code: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCryptoAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersCryptoAccountsCurrenciesDestroy
         * @summary Delete user crypto-account currency
         * @request DELETE:/3/admin/users/crypto-accounts/{id}/currencies/{code}/
         * @deprecated
         * @secure
         */
        usersCryptoAccountsCurrenciesDestroy: (code: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDevicesList
         * @summary List users devices
         * @request GET:/3/admin/users/devices/
         * @secure
         */
        usersDevicesList: (query: UsersDevicesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminDeviceListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDevicesCreate
         * @summary Create user device
         * @request POST:/3/admin/users/devices/
         * @secure
         */
        usersDevicesCreate: (data: AdminCreateDevice, params?: RequestParams$b) => Promise<HttpResponse$a<AdminDeviceResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDevicesAppsRetrieve
         * @summary Retrieve users device app
         * @request GET:/3/admin/users/devices/{device_id}/apps/{app_id}/
         * @secure
         */
        usersDevicesAppsRetrieve: (appId: string, deviceId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminDeviceAppResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDevicesAppsUpdate
         * @summary Update user device app
         * @request PUT:/3/admin/users/devices/{device_id}/apps/{app_id}/
         * @secure
         */
        usersDevicesAppsUpdate: (appId: string, deviceId: string, data: AdminDeviceApp, params?: RequestParams$b) => Promise<HttpResponse$a<AdminDeviceAppResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDevicesAppsPartialUpdate
         * @summary Partially update user device app
         * @request PATCH:/3/admin/users/devices/{device_id}/apps/{app_id}/
         * @secure
         */
        usersDevicesAppsPartialUpdate: (appId: string, deviceId: string, data: PatchedAdminDeviceApp, params?: RequestParams$b) => Promise<HttpResponse$a<AdminDeviceAppResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDevicesAppsDestroy
         * @summary Delete user device
         * @request DELETE:/3/admin/users/devices/{device_id}/apps/{app_id}/
         * @secure
         */
        usersDevicesAppsDestroy: (appId: string, deviceId: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDevicesRetrieve
         * @summary Retrieve users device
         * @request GET:/3/admin/users/devices/{id}/
         * @secure
         */
        usersDevicesRetrieve: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminDeviceResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDevicesUpdate
         * @summary Update user device
         * @request PUT:/3/admin/users/devices/{id}/
         * @secure
         */
        usersDevicesUpdate: (id: string, data: AdminDevice, params?: RequestParams$b) => Promise<HttpResponse$a<AdminDeviceResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDevicesPartialUpdate
         * @summary Partially update user device
         * @request PATCH:/3/admin/users/devices/{id}/
         * @secure
         */
        usersDevicesPartialUpdate: (id: string, data: PatchedAdminDevice, params?: RequestParams$b) => Promise<HttpResponse$a<AdminDeviceResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDevicesDestroy
         * @summary Delete user device
         * @request DELETE:/3/admin/users/devices/{id}/
         * @secure
         */
        usersDevicesDestroy: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDevicesAppsList
         * @summary List users device apps
         * @request GET:/3/admin/users/devices/{id}/apps/
         * @secure
         */
        usersDevicesAppsList: ({ id, ...query }: UsersDevicesAppsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminDeviceAppListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDevicesAppsCreate
         * @summary Create users device apps
         * @request POST:/3/admin/users/devices/{id}/apps/
         * @secure
         */
        usersDevicesAppsCreate: (id: string, data: AdminCreateDeviceApp, params?: RequestParams$b) => Promise<HttpResponse$a<AdminDeviceAppResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDocumentsList
         * @summary List users documents
         * @request GET:/3/admin/users/documents/
         * @secure
         */
        usersDocumentsList: (query: UsersDocumentsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminUserDocumentListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDocumentsCreate
         * @summary Create users document
         * @request POST:/3/admin/users/documents/
         * @secure
         */
        usersDocumentsCreate: (data: AdminCreateUserDocument, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserDocumentResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDocumentsRetrieve
         * @summary Retrieve users document
         * @request GET:/3/admin/users/documents/{id}/
         * @secure
         */
        usersDocumentsRetrieve: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserDocumentResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDocumentsUpdate
         * @summary Update user document
         * @request PUT:/3/admin/users/documents/{id}/
         * @secure
         */
        usersDocumentsUpdate: (id: string, data: AdminUpdateUserDocument, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserDocumentResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDocumentsPartialUpdate
         * @summary Partially update user document
         * @request PATCH:/3/admin/users/documents/{id}/
         * @secure
         */
        usersDocumentsPartialUpdate: (id: string, data: PatchedAdminUpdateUserDocument, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserDocumentResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersDocumentsDestroy
         * @summary Delete user document
         * @request DELETE:/3/admin/users/documents/{id}/
         * @secure
         */
        usersDocumentsDestroy: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersEmailsList
         * @summary List users emails
         * @request GET:/3/admin/users/emails/
         * @secure
         */
        usersEmailsList: (query: UsersEmailsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminEmailListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersEmailsCreate
         * @summary Create users email
         * @request POST:/3/admin/users/emails/
         * @secure
         */
        usersEmailsCreate: (data: AdminCreateEmail, params?: RequestParams$b) => Promise<HttpResponse$a<AdminEmailResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersEmailsRetrieve
         * @summary Retrieve users email
         * @request GET:/3/admin/users/emails/{id}/
         * @secure
         */
        usersEmailsRetrieve: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminEmailResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersEmailsUpdate
         * @summary Update users email
         * @request PUT:/3/admin/users/emails/{id}/
         * @secure
         */
        usersEmailsUpdate: (id: string, data: AdminEmail, params?: RequestParams$b) => Promise<HttpResponse$a<AdminEmailResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersEmailsPartialUpdate
         * @summary Partially update users email
         * @request PATCH:/3/admin/users/emails/{id}/
         * @secure
         */
        usersEmailsPartialUpdate: (id: string, data: PatchedAdminEmail, params?: RequestParams$b) => Promise<HttpResponse$a<AdminEmailResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersEmailsDestroy
         * @summary Delete users email
         * @request DELETE:/3/admin/users/emails/{id}/
         * @secure
         */
        usersEmailsDestroy: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersMfaAuthenticatorsList
         * @summary List mfa authenticators
         * @request GET:/3/admin/users/mfa/authenticators/
         * @secure
         */
        usersMfaAuthenticatorsList: (query: UsersMfaAuthenticatorsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminMFAAuthenticatorListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersMfaAuthenticatorsRetrieve
         * @summary Retrieve mfa authenticator
         * @request GET:/3/admin/users/mfa/authenticators/{identifier}/
         * @secure
         */
        usersMfaAuthenticatorsRetrieve: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminMFAAuthenticatorResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersMfaAuthenticatorsDestroy
         * @summary Delete mfa authenticator
         * @request DELETE:/3/admin/users/mfa/authenticators/{identifier}/
         * @secure
         */
        usersMfaAuthenticatorsDestroy: (identifier: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersMobilesList
         * @summary List users mobiles
         * @request GET:/3/admin/users/mobiles/
         * @secure
         */
        usersMobilesList: (query: UsersMobilesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminMobileListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersMobilesCreate
         * @summary Create users mobile
         * @request POST:/3/admin/users/mobiles/
         * @secure
         */
        usersMobilesCreate: (data: AdminCreateMobile, params?: RequestParams$b) => Promise<HttpResponse$a<AdminMobileResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersMobilesRetrieve
         * @summary Retrieve users mobile
         * @request GET:/3/admin/users/mobiles/{id}/
         * @secure
         */
        usersMobilesRetrieve: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminMobileResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersMobilesUpdate
         * @summary Update users mobile
         * @request PUT:/3/admin/users/mobiles/{id}/
         * @secure
         */
        usersMobilesUpdate: (id: string, data: AdminMobile, params?: RequestParams$b) => Promise<HttpResponse$a<AdminMobileResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersMobilesPartialUpdate
         * @summary Partially update users mobile
         * @request PATCH:/3/admin/users/mobiles/{id}/
         * @secure
         */
        usersMobilesPartialUpdate: (id: string, data: PatchedAdminMobile, params?: RequestParams$b) => Promise<HttpResponse$a<AdminMobileResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersMobilesDestroy
         * @summary Delete users mobile
         * @request DELETE:/3/admin/users/mobiles/{id}/
         * @secure
         */
        usersMobilesDestroy: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersOverviewRetrieve
         * @summary Retrieve users overview
         * @request GET:/3/admin/users/overview/
         * @secure
         */
        usersOverviewRetrieve: (params?: RequestParams$b) => Promise<HttpResponse$a<AdminOverviewUserResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersTokensList
         * @summary List users tokens
         * @request GET:/3/admin/users/tokens/
         * @secure
         */
        usersTokensList: (query: UsersTokensListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminAuthTokenListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersTokensCreate
         * @summary Create users token
         * @request POST:/3/admin/users/tokens/
         * @secure
         */
        usersTokensCreate: (data: AdminCreateAuthToken, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedAuthTokenResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name AdminUsersTokensListDestroy
         * @summary Delete tokens
         * @request DELETE:/3/admin/users/tokens/
         * @secure
         */
        adminUsersTokensListDestroy: (params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersTokensRetrieve
         * @summary Retrieve users token
         * @request GET:/3/admin/users/tokens/{token_key}/
         * @secure
         */
        usersTokensRetrieve: (tokenKey: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAuthTokenResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersTokensUpdate
         * @summary Update users token
         * @request PUT:/3/admin/users/tokens/{token_key}/
         * @secure
         */
        usersTokensUpdate: (tokenKey: string, data: AdminUpdateAuthToken, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAuthTokenResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersTokensPartialUpdate
         * @summary Patially update users token
         * @request PATCH:/3/admin/users/tokens/{token_key}/
         * @secure
         */
        usersTokensPartialUpdate: (tokenKey: string, data: PatchedAdminUpdateAuthToken, params?: RequestParams$b) => Promise<HttpResponse$a<AdminAuthTokenResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersTokensDestroy
         * @summary Delete users token
         * @request DELETE:/3/admin/users/tokens/{token_key}/
         * @secure
         */
        usersTokensDestroy: (tokenKey: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersWalletAccountsList
         * @summary List users wallet-accounts
         * @request GET:/3/admin/users/wallet-accounts/
         * @secure
         */
        usersWalletAccountsList: (query: UsersWalletAccountsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminUserWalletAccountListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersWalletAccountsCreate
         * @summary Create users wallet-accounts
         * @request POST:/3/admin/users/wallet-accounts/
         * @secure
         */
        usersWalletAccountsCreate: (data: AdminCreateUserWalletAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserWalletAccountResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersWalletAccountsRetrieve
         * @summary Retrieve users wallet-account
         * @request GET:/3/admin/users/wallet-accounts/{id}/
         * @secure
         */
        usersWalletAccountsRetrieve: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserWalletAccountResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersWalletAccountsUpdate
         * @summary Update users wallet-account
         * @request PUT:/3/admin/users/wallet-accounts/{id}/
         * @secure
         */
        usersWalletAccountsUpdate: (id: string, data: AdminUserWalletAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserWalletAccountResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersWalletAccountsPartialUpdate
         * @summary Partially update users wallte-account
         * @request PATCH:/3/admin/users/wallet-accounts/{id}/
         * @secure
         */
        usersWalletAccountsPartialUpdate: (id: string, data: PatchedAdminUserWalletAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserWalletAccountResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersWalletAccountsDestroy
         * @summary Delete users wallet-account
         * @request DELETE:/3/admin/users/wallet-accounts/{id}/
         * @secure
         */
        usersWalletAccountsDestroy: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersWalletAccountsAccountCurrenciesList
         * @summary List users wallet-accounts account currencies
         * @request GET:/3/admin/users/wallet-accounts/{id}/account-currencies/
         * @secure
         */
        usersWalletAccountsAccountCurrenciesList: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminReducedAccountAssetListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersWalletAccountsAccountCurrenciesCreate
         * @summary Create users wallet-accounts account currency
         * @request POST:/3/admin/users/wallet-accounts/{id}/account-currencies/
         * @secure
         */
        usersWalletAccountsAccountCurrenciesCreate: (id: string, data: AdminCreateUserWalletAccountAccountAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminReducedAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersWalletAccountsAccountCurrenciesRetrieve
         * @summary Retrieve users wallet-account account currency
         * @request GET:/3/admin/users/wallet-accounts/{id}/account-currencies/{account_currency_id}/
         * @secure
         */
        usersWalletAccountsAccountCurrenciesRetrieve: (accountCurrencyId: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersWalletAccountsAccountCurrenciesDestroy
         * @summary Delete users wallet-account account currency
         * @request DELETE:/3/admin/users/wallet-accounts/{id}/account-currencies/{account_currency_id}/
         * @secure
         */
        usersWalletAccountsAccountCurrenciesDestroy: (accountCurrencyId: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersWalletAccountsCurrenciesList
         * @summary List users wallet-accounts currencies
         * @request GET:/3/admin/users/wallet-accounts/{id}/currencies/
         * @deprecated
         * @secure
         */
        usersWalletAccountsCurrenciesList: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserWalletAccountAssetListResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersWalletAccountsCurrenciesCreate
         * @summary Create users wallet-accounts currency
         * @request POST:/3/admin/users/wallet-accounts/{id}/currencies/
         * @deprecated
         * @secure
         */
        usersWalletAccountsCurrenciesCreate: (id: string, data: AdminCreateUserWalletAccountAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserWalletAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersWalletAccountsCurrenciesRetrieve
         * @summary Retrieve users wallet-account currency
         * @request GET:/3/admin/users/wallet-accounts/{id}/currencies/{code}/
         * @deprecated
         * @secure
         */
        usersWalletAccountsCurrenciesRetrieve: (code: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminUserWalletAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags users
         * @name UsersWalletAccountsCurrenciesDestroy
         * @summary Delete users wallet-account currency
         * @request DELETE:/3/admin/users/wallet-accounts/{id}/currencies/{code}/
         * @deprecated
         * @secure
         */
        usersWalletAccountsCurrenciesDestroy: (code: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags wallet-accounts
         * @name WalletAccountsList
         * @summary List company wallet-accounts
         * @request GET:/3/admin/wallet-accounts/
         * @secure
         */
        walletAccountsList: (query: WalletAccountsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminCompanyWalletAccountListResponse, any>>;
        /**
         * No description
         *
         * @tags wallet-accounts
         * @name WalletAccountsCreate
         * @summary Create company wallet-account
         * @request POST:/3/admin/wallet-accounts/
         * @secure
         */
        walletAccountsCreate: (data: AdminCompanyWalletAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyWalletAccountResponse, any>>;
        /**
         * No description
         *
         * @tags wallet-accounts
         * @name WalletAccountsRetrieve
         * @summary Retrieve company wallet-account
         * @request GET:/3/admin/wallet-accounts/{id}/
         * @secure
         */
        walletAccountsRetrieve: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyWalletAccountResponse, any>>;
        /**
         * No description
         *
         * @tags wallet-accounts
         * @name WalletAccountsUpdate
         * @summary Update company wallet-account
         * @request PUT:/3/admin/wallet-accounts/{id}/
         * @secure
         */
        walletAccountsUpdate: (id: string, data: AdminCompanyWalletAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyWalletAccountResponse, any>>;
        /**
         * No description
         *
         * @tags wallet-accounts
         * @name WalletAccountsPartialUpdate
         * @summary Partially update company wallet-account
         * @request PATCH:/3/admin/wallet-accounts/{id}/
         * @secure
         */
        walletAccountsPartialUpdate: (id: string, data: PatchedAdminCompanyWalletAccount, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyWalletAccountResponse, any>>;
        /**
         * No description
         *
         * @tags wallet-accounts
         * @name WalletAccountsDestroy
         * @summary Delete company wallet-account
         * @request DELETE:/3/admin/wallet-accounts/{id}/
         * @secure
         */
        walletAccountsDestroy: (id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags wallet-accounts
         * @name WalletAccountsCurrenciesList
         * @summary List company wallet-account currencies
         * @request GET:/3/admin/wallet-accounts/{id}/currencies/
         * @secure
         */
        walletAccountsCurrenciesList: ({ id, ...query }: WalletAccountsCurrenciesListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminCompanyWalletAccountAssetListResponse, any>>;
        /**
         * No description
         *
         * @tags wallet-accounts
         * @name WalletAccountsCurrenciesCreate
         * @summary Create company wallet-account currency
         * @request POST:/3/admin/wallet-accounts/{id}/currencies/
         * @secure
         */
        walletAccountsCurrenciesCreate: (id: string, data: AdminCreateCompanyWalletAccountAsset, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyWalletAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags wallet-accounts
         * @name WalletAccountsCurrenciesRetrieve
         * @summary Retrieve company wallet-account currency
         * @request GET:/3/admin/wallet-accounts/{id}/currencies/{code}/
         * @secure
         */
        walletAccountsCurrenciesRetrieve: (code: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminCompanyWalletAccountAssetResponse, any>>;
        /**
         * No description
         *
         * @tags wallet-accounts
         * @name WalletAccountsCurrenciesDestroy
         * @summary Delete company wallet-account currency
         * @request DELETE:/3/admin/wallet-accounts/{id}/currencies/{code}/
         * @secure
         */
        walletAccountsCurrenciesDestroy: (code: string, id: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
        /**
         * No description
         *
         * @tags webhook-tasks
         * @name WebhookTasksList
         * @summary List webhook tasks
         * @request GET:/3/admin/webhook-tasks/
         * @secure
         */
        webhookTasksList: (query: WebhookTasksListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminWebhookTaskListResponse, any>>;
        /**
         * No description
         *
         * @tags webhook-tasks
         * @name WebhookTasksRetrieve
         * @summary Retrieve webhook task
         * @request GET:/3/admin/webhook-tasks/{webhhook_task_id}/
         * @secure
         */
        webhookTasksRetrieve: (webhhookTaskId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminExtendedWebhookTaskResponse, any>>;
        /**
         * No description
         *
         * @tags webhook-tasks
         * @name WebhookTasksRequestsList
         * @summary List webhook task requests
         * @request GET:/3/admin/webhook-tasks/{webhhook_task_id}/requests/
         * @secure
         */
        webhookTasksRequestsList: ({ webhhookTaskId, ...query }: WebhookTasksRequestsListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminWebhookRequestListResponse, any>>;
        /**
         * No description
         *
         * @tags webhook-tasks
         * @name WebhookTasksRequestsRetrieve
         * @summary Retrieve webhook task request
         * @request GET:/3/admin/webhook-tasks/{webhhook_task_id}/requests/{webhook_request_id}/
         * @secure
         */
        webhookTasksRequestsRetrieve: (webhhookTaskId: string, webhookRequestId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminWebhookRequestResponse, any>>;
        /**
         * No description
         *
         * @tags webhooks
         * @name WebhooksList
         * @summary List webhooks
         * @request GET:/3/admin/webhooks/
         * @secure
         */
        webhooksList: (query: WebhooksListParams, params?: RequestParams$b) => Promise<HttpResponse$a<PaginatedAdminWebhookListResponse$1, any>>;
        /**
         * No description
         *
         * @tags webhooks
         * @name WebhooksCreate
         * @summary Create webhook
         * @request POST:/3/admin/webhooks/
         * @secure
         */
        webhooksCreate: (data: AdminWebhook$1, params?: RequestParams$b) => Promise<HttpResponse$a<AdminWebhookResponse$1, any>>;
        /**
         * No description
         *
         * @tags webhooks
         * @name WebhooksRetrieve
         * @summary Retrieve webhook
         * @request GET:/3/admin/webhooks/{webhhook_id}/
         * @secure
         */
        webhooksRetrieve: (webhhookId: string, params?: RequestParams$b) => Promise<HttpResponse$a<AdminWebhookResponse$1, any>>;
        /**
         * No description
         *
         * @tags webhooks
         * @name WebhooksUpdate
         * @summary Update webhook
         * @request PUT:/3/admin/webhooks/{webhhook_id}/
         * @secure
         */
        webhooksUpdate: (webhhookId: string, data: AdminWebhook$1, params?: RequestParams$b) => Promise<HttpResponse$a<AdminWebhookResponse$1, any>>;
        /**
         * No description
         *
         * @tags webhooks
         * @name WebhooksPartialUpdate
         * @summary Partially update webhook
         * @request PATCH:/3/admin/webhooks/{webhhook_id}/
         * @secure
         */
        webhooksPartialUpdate: (webhhookId: string, data: PatchedAdminWebhook$1, params?: RequestParams$b) => Promise<HttpResponse$a<AdminWebhookResponse$1, any>>;
        /**
         * No description
         *
         * @tags webhooks
         * @name WebhooksDestroy
         * @summary Delete webhook
         * @request DELETE:/3/admin/webhooks/{webhhook_id}/
         * @secure
         */
        webhooksDestroy: (webhhookId: string, params?: RequestParams$b) => Promise<HttpResponse$a<ActionResponse$9, any>>;
    };
}

/**
 * Rehive Platform Admin API with improved Developer Experience (DX).
 *
 * This wrapper class addresses a common DX issue with the generated Platform APIs.
 * The swagger-typescript-api generator creates APIs with nested namespaces based on the
 * OpenAPI paths. Since Rehive platform endpoints start with "/3/", they get grouped
 * under a "v3" namespace, requiring developers to write:
 *
 *   await adminApi.v3.adminUsersCreate(data)
 *
 * This wrapper automatically proxies all v3 methods to the root level, allowing:
 *
 *   await adminApi.adminUsersCreate(data)  // Much cleaner!
 *
 * The proxying happens dynamically at construction time, so all generated methods
 * are available without the v3 prefix while maintaining full TypeScript support.
 */
declare class RehivePlatformAdminApi<SecurityDataType = unknown> extends Api$b<SecurityDataType> {
    [key: string]: any;
    constructor(config?: any);
}

/** This serializer can be used if only a `status` is required in the response. */
interface ActionResponse$8 {
    /** @default "sucess" */
    status?: string;
}
interface Activate$a {
    token: string;
    identifier: string;
    name: string;
    /** @format uuid */
    secret: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompany$8 {
    id: string;
    /** @format uuid */
    secret: string;
    name: string;
    display_currency?: string;
    operational_account?: string | null;
}
interface AdminCompanyResponse$8 {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminCompany$8;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminConversion {
    id: string;
    user: string;
    key: string;
    from_amount: number;
    from_fee: number;
    from_total_amount: number;
    to_amount: number;
    to_fee: number;
    to_total_amount: number;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate?: string;
    debit_account: string | null;
    credit_account: string | null;
    operational_account: string;
    /**
     * * `quoted` - Quoted
     * * `pending` - Pending
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status?: "quoted" | "pending" | "complete" | "failed";
    collection: string | null;
    txns: string[];
    metadata: Record<string, any>;
    expires: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminConversionPair {
    id: string;
    key: string;
    path?: string | null;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate?: string | null;
    operational_account?: string | null;
    /** @min 1 */
    quote_duration?: number;
    enabled?: boolean;
    created: number;
    updated: number;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    integration?: AdminIntegration$1;
    /**
     * * `operational` - Operational
     * * `non_operational` - Non Operational
     */
    transaction_type?: "operational" | "non_operational";
}
interface AdminConversionPairResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminConversionPair;
}
interface AdminConversionResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminConversion;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateConversion {
    id: string;
    user: string;
    key: string;
    from_amount?: number | null;
    from_fee: number;
    from_total_amount: number;
    to_amount?: number | null;
    to_fee: number;
    to_total_amount: number;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate?: string | null;
    /** @maxLength 64 */
    debit_account?: string | null;
    /** @maxLength 64 */
    credit_account?: string | null;
    operational_account: string;
    /**
     * * `quoted` - Quoted
     * * `pending` - Pending
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "quoted" | "pending" | "complete" | "failed";
    collection: string | null;
    txns: string[];
    metadata?: Record<string, any>;
    quote_duration?: number | null;
    expires: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateConversionPair {
    id: string;
    key: string;
    path?: string | null;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate?: string | null;
    operational_account?: string | null;
    /** @min 1 */
    quote_duration?: number;
    enabled?: boolean;
    created: number;
    updated: number;
    integration?: string | null;
    /**
     * * `operational` - Operational
     * * `non_operational` - Non Operational
     */
    transaction_type?: "operational" | "non_operational";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateRatePair {
    id: string;
    key: string;
    path?: string | null;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate?: string | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCurrency$1 {
    /** @maxLength 30 */
    code: string;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
    archived?: boolean;
}
interface AdminCurrencyResponse$1 {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminCurrency$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminIntegration$1 {
    id: string;
    /** @maxLength 50 */
    slug: string;
    /** @maxLength 50 */
    name: string;
    /** @maxLength 255 */
    description?: string | null;
    created: number;
    updated: number;
    events: ("conversion.quote" | "conversion.execute")[];
}
interface AdminIntegrationResponse$1 {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminIntegration$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminIntegrationWebhook$1 {
    id: string;
    /** @format uri */
    url: string;
    /**
     * * `conversion.quote` - conversion.quote
     * * `conversion.execute` - conversion.execute
     */
    event: "conversion.quote" | "conversion.execute";
    /** @maxLength 250 */
    secret?: string;
    created: number;
    updated: number;
}
interface AdminIntegrationWebhookResponse$1 {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminIntegrationWebhook$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminRatePair {
    id: string;
    key: string;
    path?: string | null;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate?: string | null;
    created: number;
    updated: number;
}
interface AdminRatePairResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminRatePair;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateConversion {
    id: string;
    user: string;
    key: string;
    from_amount: number;
    from_fee: number;
    from_total_amount: number;
    to_amount: number;
    to_fee: number;
    to_total_amount: number;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate?: string;
    debit_account: string | null;
    credit_account: string | null;
    operational_account: string;
    /**
     * * `quoted` - Quoted
     * * `pending` - Pending
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "quoted" | "pending" | "complete" | "failed";
    collection: string | null;
    txns: string[];
    metadata: Record<string, any>;
    expires: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUser$4 {
    id: string;
    /** @maxLength 12 */
    display_currency?: string | null;
}
interface AdminUserResponse$2 {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminUser$4;
}
interface Deactivate$a {
    token: string;
    /** @default false */
    purge?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface NewSnapshotRate {
    key: string;
    date: number;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    rate: Rate;
}
type NewSnapshotRateList = NewSnapshotRate[];
interface NewSnapshotRateListResponse {
    /** @example "success" */
    status?: string;
    data?: NewSnapshotRateList;
}
interface PaginatedAdminConversionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminConversion[];
}
interface PaginatedAdminConversionListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminConversionList;
}
interface PaginatedAdminConversionPairList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminConversionPair[];
}
interface PaginatedAdminConversionPairListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminConversionPairList;
}
interface PaginatedAdminCurrencyList$1 {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminCurrency$1[];
}
interface PaginatedAdminCurrencyListResponse$1 {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminCurrencyList$1;
}
interface PaginatedAdminIntegrationList$1 {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminIntegration$1[];
}
interface PaginatedAdminIntegrationListResponse$1 {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminIntegrationList$1;
}
interface PaginatedAdminIntegrationWebhookList$1 {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminIntegrationWebhook$1[];
}
interface PaginatedAdminIntegrationWebhookListResponse$1 {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminIntegrationWebhookList$1;
}
interface PaginatedAdminRatePairList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminRatePair[];
}
interface PaginatedAdminRatePairListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminRatePairList;
}
interface PaginatedAdminUserList$2 {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminUser$4[];
}
interface PaginatedAdminUserListResponse$2 {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminUserList$2;
}
interface PaginatedUserConversionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: UserConversion[];
}
interface PaginatedUserConversionListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedUserConversionList;
}
interface PaginatedUserConversionPairList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: UserConversionPair[];
}
interface PaginatedUserConversionPairListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedUserConversionPairList;
}
interface PaginatedUserCurrencyList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: UserCurrency[];
}
interface PaginatedUserCurrencyListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedUserCurrencyList;
}
interface PaginatedUserRateList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: UserRate[];
}
interface PaginatedUserRateListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedUserRateList;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCompany$6 {
    id?: string;
    /** @format uuid */
    secret?: string;
    name?: string;
    display_currency?: string;
    operational_account?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCurrency$1 {
    /** @maxLength 30 */
    code?: string;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
    archived?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminIntegration$1 {
    id?: string;
    /** @maxLength 50 */
    slug?: string;
    /** @maxLength 50 */
    name?: string;
    /** @maxLength 255 */
    description?: string | null;
    created?: number;
    updated?: number;
    events?: ("conversion.quote" | "conversion.execute")[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminIntegrationWebhook$1 {
    id?: string;
    /** @format uri */
    url?: string;
    /**
     * * `conversion.quote` - conversion.quote
     * * `conversion.execute` - conversion.execute
     */
    event?: "conversion.quote" | "conversion.execute";
    /** @maxLength 250 */
    secret?: string;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminRatePair {
    id?: string;
    key?: string;
    path?: string | null;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate?: string | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateConversion {
    id?: string;
    user?: string;
    key?: string;
    from_amount?: number;
    from_fee?: number;
    from_total_amount?: number;
    to_amount?: number;
    to_fee?: number;
    to_total_amount?: number;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate?: string;
    debit_account?: string | null;
    credit_account?: string | null;
    operational_account?: string;
    /**
     * * `quoted` - Quoted
     * * `pending` - Pending
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status?: "quoted" | "pending" | "complete" | "failed";
    collection?: string | null;
    txns?: string[];
    metadata?: Record<string, any>;
    expires?: number;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateConversionPair {
    id?: string;
    key?: string;
    path?: string | null;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate?: string | null;
    operational_account?: string | null;
    /** @min 1 */
    quote_duration?: number;
    enabled?: boolean;
    created?: number;
    updated?: number;
    integration?: string | null;
    /**
     * * `operational` - Operational
     * * `non_operational` - Non Operational
     */
    transaction_type?: "operational" | "non_operational";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUser$1 {
    id?: string;
    /** @maxLength 12 */
    display_currency?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedUserUpdateConversion {
    id?: string;
    key?: string;
    from_amount?: number;
    from_fee?: number;
    from_total_amount?: number;
    to_amount?: number;
    to_fee?: number;
    to_total_amount?: number;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate?: string;
    debit_account?: string | null;
    credit_account?: string | null;
    /**
     * * `quoted` - Quoted
     * * `pending` - Pending
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status?: "quoted" | "pending" | "complete" | "failed";
    collection?: string | null;
    txns?: string[];
    metadata?: Record<string, any>;
    expires?: number;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedUserUpdateSettings {
    display_currency?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Rate {
    id: string;
    key: string;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate: string;
    created: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserConversion {
    id: string;
    key: string;
    from_amount: number;
    from_fee: number;
    from_total_amount: number;
    to_amount: number;
    to_fee: number;
    to_total_amount: number;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate: string;
    debit_account: string | null;
    credit_account: string | null;
    /**
     * * `quoted` - Quoted
     * * `pending` - Pending
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status?: "quoted" | "pending" | "complete" | "failed";
    collection: string | null;
    txns: string[];
    metadata: Record<string, any>;
    expires: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserConversionPair {
    id: string;
    key: string;
    created: number;
    updated: number;
}
interface UserConversionPairResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: UserConversionPair;
}
interface UserConversionResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: UserConversion;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserCreateConversion {
    id: string;
    key: string;
    from_amount?: number | null;
    from_fee: number;
    from_total_amount: number;
    to_amount?: number | null;
    to_fee: number;
    to_total_amount: number;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate: string;
    /** @maxLength 64 */
    debit_account?: string | null;
    /** @maxLength 64 */
    credit_account?: string | null;
    /**
     * * `quoted` - Quoted
     * * `pending` - Pending
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "quoted" | "pending" | "complete" | "failed";
    collection: string | null;
    txns: string[];
    metadata?: Record<string, any>;
    expires: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserCurrency {
    /** @maxLength 30 */
    code: string;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
}
interface UserCurrencyResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: UserCurrency;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserRate {
    id: string;
    key: string;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate: string;
    created: number;
}
interface UserRateResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: UserRate;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserSettings {
    display_currency: string;
}
interface UserSettingsResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: UserSettings;
}
interface UserSnapshotRate {
    rates: Record<string, {
        rate?: string;
        created?: number;
    }>;
}
interface UserSnapshotRateResponse {
    /** @example "success" */
    status?: string;
    data?: UserSnapshotRate;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserUpdateConversion {
    id: string;
    key: string;
    from_amount: number;
    from_fee: number;
    from_total_amount: number;
    to_amount: number;
    to_fee: number;
    to_total_amount: number;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate: string;
    debit_account: string | null;
    credit_account: string | null;
    /**
     * * `quoted` - Quoted
     * * `pending` - Pending
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "quoted" | "pending" | "complete" | "failed";
    collection: string | null;
    txns: string[];
    metadata: Record<string, any>;
    expires: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserUpdateSettings {
    display_currency?: string | null;
}
interface Webhook$7 {
    id: string;
    /**
     * * `currency.create` - currency.create
     * * `currency.update` - currency.update
     * * `transaction.execute` - transaction.execute
     */
    event: "currency.create" | "currency.update" | "transaction.execute";
    company: string;
    data: Record<string, any>;
}
interface AdminConversionPairsListParams {
    id?: number;
    key?: string;
    /** Multiple values may be separated by commas. */
    key__in?: string[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminConversionsListParams {
    created?: string;
    created__gt?: string;
    created__gte?: string;
    created__lt?: string;
    created__lte?: string;
    id?: number;
    key?: string;
    /** Multiple values may be separated by commas. */
    key__in?: string[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
    user?: string;
}
interface AdminCurrenciesListParams$4 {
    code?: string;
    /** Multiple values may be separated by commas. */
    code__in?: string[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    unit?: string;
}
interface AdminIntegrationsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminIntegrationsWebhooksListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    identifier: string;
}
interface AdminRatePairsListParams {
    id?: number;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminUsersListParams$4 {
    display_currency?: string;
    /** Multiple values may be separated by commas. */
    display_currency__in?: string[];
    id?: number;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface UserConversionPairsListParams {
    id?: number;
    key?: string;
    /** Multiple values may be separated by commas. */
    key__in?: string[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface UserConversionsListParams {
    created?: string;
    created__gt?: string;
    created__gte?: string;
    created__lt?: string;
    created__lte?: string;
    id?: number;
    key?: string;
    /** Multiple values may be separated by commas. */
    key__in?: string[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
}
interface UserCurrenciesListParams {
    code?: string;
    /** Multiple values may be separated by commas. */
    code__in?: string[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    unit?: string;
}
interface UserRatesListParams {
    created?: string;
    created__gt?: string;
    created__gte?: string;
    created__lt?: string;
    created__lte?: string;
    id?: number;
    key?: string;
    /** Multiple values may be separated by commas. */
    key__in?: string[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
type QueryParamsType$9 = Record<string | number, any>;
type ResponseFormat$9 = keyof Omit<Body, "body" | "bodyUsed">;
interface FullRequestParams$9 extends Omit<RequestInit, "body"> {
    /** set parameter to `true` for call `securityWorker` for this request */
    secure?: boolean;
    /** request path */
    path: string;
    /** content type of request body */
    type?: ContentType$9;
    /** query params */
    query?: QueryParamsType$9;
    /** format of response (i.e. response.json() -> format: "json") */
    format?: ResponseFormat$9;
    /** request body */
    body?: unknown;
    /** base url */
    baseUrl?: string;
    /** request cancellation token */
    cancelToken?: CancelToken$9;
}
type RequestParams$a = Omit<FullRequestParams$9, "body" | "method" | "query" | "path">;
interface ApiConfig$9<SecurityDataType = unknown> {
    baseUrl?: string;
    baseApiParams?: Omit<RequestParams$a, "baseUrl" | "cancelToken" | "signal">;
    securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams$a | void> | RequestParams$a | void;
    customFetch?: typeof fetch;
}
interface HttpResponse$9<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}
type CancelToken$9 = Symbol | string | number;
declare enum ContentType$9 {
    Json = "application/json",
    JsonApi = "application/vnd.api+json",
    FormData = "multipart/form-data",
    UrlEncoded = "application/x-www-form-urlencoded",
    Text = "text/plain"
}
declare class HttpClient$9<SecurityDataType = unknown> {
    baseUrl: string;
    private securityData;
    private securityWorker?;
    private abortControllers;
    private customFetch;
    private baseApiParams;
    constructor(apiConfig?: ApiConfig$9<SecurityDataType>);
    setSecurityData: (data: SecurityDataType | null) => void;
    protected encodeQueryParam(key: string, value: any): string;
    protected addQueryParam(query: QueryParamsType$9, key: string): string;
    protected addArrayQueryParam(query: QueryParamsType$9, key: string): any;
    protected toQueryString(rawQuery?: QueryParamsType$9): string;
    protected addQueryParams(rawQuery?: QueryParamsType$9): string;
    private contentFormatters;
    protected mergeRequestParams(params1: RequestParams$a, params2?: RequestParams$a): RequestParams$a;
    protected createAbortSignal: (cancelToken: CancelToken$9) => AbortSignal | undefined;
    abortRequest: (cancelToken: CancelToken$9) => void;
    request: <T = any, E = any>({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }: FullRequestParams$9) => Promise<HttpResponse$9<T, E>>;
}
/**
 * @title Conversion Service API
 * @version 1 (1)
 * @termsOfService https://rehive.com/terms/
 * @baseUrl https://conversion.services.rehive.com/api/
 * @externalDocs https://docs.rehive.com
 * @contact Rehive Support <support@rehive.com> (https://rehive.com/support/)
 *
 *
 * The **Conversion Service API** is used for currency rates and conversions in Rehive.
 *
 */
declare class Api$a<SecurityDataType extends unknown> extends HttpClient$9<SecurityDataType> {
    activate: {
        /**
         * No description
         *
         * @tags activate
         * @name ActivateCreate
         * @summary Activate service
         * @request POST:/activate/
         * @secure
         */
        activateCreate: (data: Activate$a, params?: RequestParams$a) => Promise<HttpResponse$9<ActionResponse$8, any>>;
    };
    admin: {
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyRetrieve
         * @summary Retrieve company
         * @request GET:/admin/company/
         * @secure
         */
        adminCompanyRetrieve: (params?: RequestParams$a) => Promise<HttpResponse$9<AdminCompanyResponse$8, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyUpdate
         * @summary Update company
         * @request PUT:/admin/company/
         * @secure
         */
        adminCompanyUpdate: (data: AdminCompany$8, params?: RequestParams$a) => Promise<HttpResponse$9<AdminCompanyResponse$8, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyPartialUpdate
         * @summary Partially update company
         * @request PATCH:/admin/company/
         * @secure
         */
        adminCompanyPartialUpdate: (data: PatchedAdminCompany$6, params?: RequestParams$a) => Promise<HttpResponse$9<AdminCompanyResponse$8, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminConversionPairsList
         * @summary List conversion pairs
         * @request GET:/admin/conversion-pairs/
         * @secure
         */
        adminConversionPairsList: (query: AdminConversionPairsListParams, params?: RequestParams$a) => Promise<HttpResponse$9<PaginatedAdminConversionPairListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminConversionPairsCreate
         * @summary Create conversion pair
         * @request POST:/admin/conversion-pairs/
         * @secure
         */
        adminConversionPairsCreate: (data: AdminCreateConversionPair, params?: RequestParams$a) => Promise<HttpResponse$9<AdminConversionPairResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminConversionPairsRetrieve
         * @summary Retrieve conversion pair
         * @request GET:/admin/conversion-pairs/{identifier}/
         * @secure
         */
        adminConversionPairsRetrieve: (identifier: string, params?: RequestParams$a) => Promise<HttpResponse$9<AdminConversionPairResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminConversionPairsUpdate
         * @summary Update conversion pair
         * @request PUT:/admin/conversion-pairs/{identifier}/
         * @secure
         */
        adminConversionPairsUpdate: (identifier: string, data: AdminConversionPair, params?: RequestParams$a) => Promise<HttpResponse$9<AdminConversionPairResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminConversionPairsPartialUpdate
         * @summary Partially update conversion pair
         * @request PATCH:/admin/conversion-pairs/{identifier}/
         * @secure
         */
        adminConversionPairsPartialUpdate: (identifier: string, data: PatchedAdminUpdateConversionPair, params?: RequestParams$a) => Promise<HttpResponse$9<AdminConversionPairResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminConversionPairsDestroy
         * @summary Delete conversion pair
         * @request DELETE:/admin/conversion-pairs/{identifier}/
         * @secure
         */
        adminConversionPairsDestroy: (identifier: string, params?: RequestParams$a) => Promise<HttpResponse$9<AdminConversionPairResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminConversionsList
         * @summary List conversions
         * @request GET:/admin/conversions/
         * @secure
         */
        adminConversionsList: (query: AdminConversionsListParams, params?: RequestParams$a) => Promise<HttpResponse$9<PaginatedAdminConversionListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminConversionsCreate
         * @summary Create conversion
         * @request POST:/admin/conversions/
         * @secure
         */
        adminConversionsCreate: (data: AdminCreateConversion, params?: RequestParams$a) => Promise<HttpResponse$9<AdminConversionResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminConversionsRetrieve
         * @summary Retrieve conversion
         * @request GET:/admin/conversions/{identifier}/
         * @secure
         */
        adminConversionsRetrieve: (identifier: string, params?: RequestParams$a) => Promise<HttpResponse$9<AdminConversionResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminConversionsUpdate
         * @summary Update conversion
         * @request PUT:/admin/conversions/{identifier}/
         * @secure
         */
        adminConversionsUpdate: (identifier: string, data: AdminUpdateConversion, params?: RequestParams$a) => Promise<HttpResponse$9<AdminConversionResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminConversionsPartialUpdate
         * @summary Partially update conversion
         * @request PATCH:/admin/conversions/{identifier}/
         * @secure
         */
        adminConversionsPartialUpdate: (identifier: string, data: PatchedAdminUpdateConversion, params?: RequestParams$a) => Promise<HttpResponse$9<AdminConversionResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCurrenciesList
         * @summary List currencies
         * @request GET:/admin/currencies/
         * @secure
         */
        adminCurrenciesList: (query: AdminCurrenciesListParams$4, params?: RequestParams$a) => Promise<HttpResponse$9<PaginatedAdminCurrencyListResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCurrenciesCreate
         * @summary Create currency
         * @request POST:/admin/currencies/
         * @secure
         */
        adminCurrenciesCreate: (data: AdminCurrency$1, params?: RequestParams$a) => Promise<HttpResponse$9<AdminCurrencyResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCurrenciesRetrieve
         * @summary Retrieve currency
         * @request GET:/admin/currencies/{code}/
         * @secure
         */
        adminCurrenciesRetrieve: (code: string, params?: RequestParams$a) => Promise<HttpResponse$9<AdminCurrencyResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCurrenciesUpdate
         * @summary Update currency
         * @request PUT:/admin/currencies/{code}/
         * @secure
         */
        adminCurrenciesUpdate: (code: string, data: AdminCurrency$1, params?: RequestParams$a) => Promise<HttpResponse$9<AdminCurrencyResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCurrenciesPartialUpdate
         * @summary Partially update currency
         * @request PATCH:/admin/currencies/{code}/
         * @secure
         */
        adminCurrenciesPartialUpdate: (code: string, data: PatchedAdminCurrency$1, params?: RequestParams$a) => Promise<HttpResponse$9<AdminCurrencyResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsList
         * @summary List integration
         * @request GET:/admin/integrations/
         * @secure
         */
        adminIntegrationsList: (query: AdminIntegrationsListParams$1, params?: RequestParams$a) => Promise<HttpResponse$9<PaginatedAdminIntegrationListResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsCreate
         * @summary Create integration
         * @request POST:/admin/integrations/
         * @secure
         */
        adminIntegrationsCreate: (data: AdminIntegration$1, params?: RequestParams$a) => Promise<HttpResponse$9<AdminIntegrationResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsRetrieve
         * @summary Retrieve integration
         * @request GET:/admin/integrations/{identifier}/
         * @secure
         */
        adminIntegrationsRetrieve: (identifier: string, params?: RequestParams$a) => Promise<HttpResponse$9<AdminIntegrationResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsUpdate
         * @summary Update integration
         * @request PUT:/admin/integrations/{identifier}/
         * @secure
         */
        adminIntegrationsUpdate: (identifier: string, data: AdminIntegration$1, params?: RequestParams$a) => Promise<HttpResponse$9<AdminIntegrationResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsPartialUpdate
         * @summary Partially update integration
         * @request PATCH:/admin/integrations/{identifier}/
         * @secure
         */
        adminIntegrationsPartialUpdate: (identifier: string, data: PatchedAdminIntegration$1, params?: RequestParams$a) => Promise<HttpResponse$9<AdminIntegrationResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsDestroy
         * @summary Delete integration
         * @request DELETE:/admin/integrations/{identifier}/
         * @secure
         */
        adminIntegrationsDestroy: (identifier: string, params?: RequestParams$a) => Promise<HttpResponse$9<AdminIntegrationResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsWebhooksList
         * @summary List integration webhooks
         * @request GET:/admin/integrations/{identifier}/webhooks/
         * @secure
         */
        adminIntegrationsWebhooksList: ({ identifier, ...query }: AdminIntegrationsWebhooksListParams$1, params?: RequestParams$a) => Promise<HttpResponse$9<PaginatedAdminIntegrationWebhookListResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsWebhooksCreate
         * @summary Create integration webhook
         * @request POST:/admin/integrations/{identifier}/webhooks/
         * @secure
         */
        adminIntegrationsWebhooksCreate: (identifier: string, data: AdminIntegrationWebhook$1, params?: RequestParams$a) => Promise<HttpResponse$9<AdminIntegrationWebhookResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsWebhooksRetrieve
         * @summary Retrieve integration webhook
         * @request GET:/admin/integrations/{integration_id}/webhooks/{webhook_id}/
         * @secure
         */
        adminIntegrationsWebhooksRetrieve: (integrationId: string, webhookId: string, params?: RequestParams$a) => Promise<HttpResponse$9<AdminIntegrationWebhookResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsWebhooksUpdate
         * @summary Update integration webhook
         * @request PUT:/admin/integrations/{integration_id}/webhooks/{webhook_id}/
         * @secure
         */
        adminIntegrationsWebhooksUpdate: (integrationId: string, webhookId: string, data: AdminIntegrationWebhook$1, params?: RequestParams$a) => Promise<HttpResponse$9<AdminIntegrationWebhookResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsWebhooksPartialUpdate
         * @summary Partially update integration webhook
         * @request PATCH:/admin/integrations/{integration_id}/webhooks/{webhook_id}/
         * @secure
         */
        adminIntegrationsWebhooksPartialUpdate: (integrationId: string, webhookId: string, data: PatchedAdminIntegrationWebhook$1, params?: RequestParams$a) => Promise<HttpResponse$9<AdminIntegrationWebhookResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsWebhooksDestroy
         * @summary Delete integration webhook
         * @request DELETE:/admin/integrations/{integration_id}/webhooks/{webhook_id}/
         * @secure
         */
        adminIntegrationsWebhooksDestroy: (integrationId: string, webhookId: string, params?: RequestParams$a) => Promise<HttpResponse$9<AdminIntegrationWebhookResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRatePairsList
         * @summary List rate pairs
         * @request GET:/admin/rate-pairs/
         * @secure
         */
        adminRatePairsList: (query: AdminRatePairsListParams, params?: RequestParams$a) => Promise<HttpResponse$9<PaginatedAdminRatePairListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRatePairsCreate
         * @summary Create rate pair
         * @request POST:/admin/rate-pairs/
         * @secure
         */
        adminRatePairsCreate: (data: AdminCreateRatePair, params?: RequestParams$a) => Promise<HttpResponse$9<AdminRatePairResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRatePairsRetrieve
         * @summary Retrieve rate pair
         * @request GET:/admin/rate-pairs/{identifier}/
         * @secure
         */
        adminRatePairsRetrieve: (identifier: string, params?: RequestParams$a) => Promise<HttpResponse$9<AdminRatePairResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRatePairsUpdate
         * @summary Update rate pair
         * @request PUT:/admin/rate-pairs/{identifier}/
         * @secure
         */
        adminRatePairsUpdate: (identifier: string, data: AdminRatePair, params?: RequestParams$a) => Promise<HttpResponse$9<AdminRatePairResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRatePairsPartialUpdate
         * @summary Partially update rate pair
         * @request PATCH:/admin/rate-pairs/{identifier}/
         * @secure
         */
        adminRatePairsPartialUpdate: (identifier: string, data: PatchedAdminRatePair, params?: RequestParams$a) => Promise<HttpResponse$9<AdminRatePairResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRatePairsDestroy
         * @summary Delete rate pair
         * @request DELETE:/admin/rate-pairs/{identifier}/
         * @secure
         */
        adminRatePairsDestroy: (identifier: string, params?: RequestParams$a) => Promise<HttpResponse$9<AdminRatePairResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUsersList
         * @summary List users
         * @request GET:/admin/users/
         * @secure
         */
        adminUsersList: (query: AdminUsersListParams$4, params?: RequestParams$a) => Promise<HttpResponse$9<PaginatedAdminUserListResponse$2, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUsersRetrieve
         * @summary Retrieve user
         * @request GET:/admin/users/{identifier}/
         * @secure
         */
        adminUsersRetrieve: (identifier: string, params?: RequestParams$a) => Promise<HttpResponse$9<AdminUserResponse$2, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUsersUpdate
         * @summary Update user
         * @request PUT:/admin/users/{identifier}/
         * @secure
         */
        adminUsersUpdate: (identifier: string, data: AdminUser$4, params?: RequestParams$a) => Promise<HttpResponse$9<AdminUserResponse$2, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUsersPartialUpdate
         * @summary Partially update user
         * @request PATCH:/admin/users/{identifier}/
         * @secure
         */
        adminUsersPartialUpdate: (identifier: string, data: PatchedAdminUser$1, params?: RequestParams$a) => Promise<HttpResponse$9<AdminUserResponse$2, any>>;
    };
    deactivate: {
        /**
         * No description
         *
         * @tags deactivate
         * @name DeactivateCreate
         * @summary Deactivate service
         * @request POST:/deactivate/
         * @secure
         */
        deactivateCreate: (data: Deactivate$a, params?: RequestParams$a) => Promise<HttpResponse$9<ActionResponse$8, any>>;
    };
    user: {
        /**
         * No description
         *
         * @tags user
         * @name UserConversionPairsList
         * @summary List conversion pairs
         * @request GET:/user/conversion-pairs/
         * @secure
         */
        userConversionPairsList: (query: UserConversionPairsListParams, params?: RequestParams$a) => Promise<HttpResponse$9<PaginatedUserConversionPairListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserConversionPairsRetrieve
         * @summary Retrieve conversion pair
         * @request GET:/user/conversion-pairs/{identifier}/
         * @secure
         */
        userConversionPairsRetrieve: (identifier: string, params?: RequestParams$a) => Promise<HttpResponse$9<UserConversionPairResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserConversionsList
         * @summary List conversions
         * @request GET:/user/conversions/
         * @secure
         */
        userConversionsList: (query: UserConversionsListParams, params?: RequestParams$a) => Promise<HttpResponse$9<PaginatedUserConversionListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserConversionsCreate
         * @summary Create conversion
         * @request POST:/user/conversions/
         * @secure
         */
        userConversionsCreate: (data: UserCreateConversion, params?: RequestParams$a) => Promise<HttpResponse$9<UserConversionResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserConversionsRetrieve
         * @summary Retrieve conversion
         * @request GET:/user/conversions/{identifier}/
         * @secure
         */
        userConversionsRetrieve: (identifier: string, params?: RequestParams$a) => Promise<HttpResponse$9<UserConversionResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserConversionsUpdate
         * @summary Update conversion
         * @request PUT:/user/conversions/{identifier}/
         * @secure
         */
        userConversionsUpdate: (identifier: string, data: UserUpdateConversion, params?: RequestParams$a) => Promise<HttpResponse$9<UserConversionResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserConversionsPartialUpdate
         * @summary Partially update conversion
         * @request PATCH:/user/conversions/{identifier}/
         * @secure
         */
        userConversionsPartialUpdate: (identifier: string, data: PatchedUserUpdateConversion, params?: RequestParams$a) => Promise<HttpResponse$9<UserConversionResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserCurrenciesList
         * @summary List currencies
         * @request GET:/user/currencies/
         * @secure
         */
        userCurrenciesList: (query: UserCurrenciesListParams, params?: RequestParams$a) => Promise<HttpResponse$9<PaginatedUserCurrencyListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserCurrenciesRetrieve
         * @summary Retrieve currency
         * @request GET:/user/currencies/{code}/
         * @secure
         */
        userCurrenciesRetrieve: (code: string, params?: RequestParams$a) => Promise<HttpResponse$9<UserCurrencyResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRatesList
         * @summary List rates
         * @request GET:/user/rates/
         * @secure
         */
        userRatesList: (query: UserRatesListParams, params?: RequestParams$a) => Promise<HttpResponse$9<PaginatedUserRateListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRatesRetrieve
         * @summary Retrieve rate
         * @request GET:/user/rates/{identifier}/
         * @secure
         */
        userRatesRetrieve: (identifier: string, params?: RequestParams$a) => Promise<HttpResponse$9<UserRateResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRatesSnapshotRetrieve
         * @summary Retrieve rate snapshot
         * @request GET:/user/rates/snapshot/
         * @secure
         */
        userRatesSnapshotRetrieve: (params?: RequestParams$a) => Promise<HttpResponse$9<UserSnapshotRateResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRatesSnapshotsList
         * @summary List rate snapshots
         * @request GET:/user/rates/snapshots/
         * @secure
         */
        userRatesSnapshotsList: (params?: RequestParams$a) => Promise<HttpResponse$9<NewSnapshotRateListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserSettingsRetrieve
         * @summary Retrieve user settings
         * @request GET:/user/settings/
         * @secure
         */
        userSettingsRetrieve: (params?: RequestParams$a) => Promise<HttpResponse$9<UserSettingsResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserSettingsUpdate
         * @summary Update user settings
         * @request PUT:/user/settings/
         * @secure
         */
        userSettingsUpdate: (data: UserUpdateSettings, params?: RequestParams$a) => Promise<HttpResponse$9<UserSettingsResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserSettingsPartialUpdate
         * @summary Partially update user settings
         * @request PATCH:/user/settings/
         * @secure
         */
        userSettingsPartialUpdate: (data: PatchedUserUpdateSettings, params?: RequestParams$a) => Promise<HttpResponse$9<UserSettingsResponse, any>>;
    };
    webhook: {
        /**
         * No description
         *
         * @tags webhook
         * @name WebhookCreate
         * @summary Receive Platform webhook
         * @request POST:/webhook/
         * @secure
         */
        webhookCreate: (data: Webhook$7, params?: RequestParams$a) => Promise<HttpResponse$9<ActionResponse$8, any>>;
    };
}

/** This serializer can be used if only a `status` is required in the response. */
interface ActionResponse$7 {
    /** @default "sucess" */
    status?: string;
}
/**
 * Serialize the activation data, should be a token that represents an admin
 * user.
 */
interface Activate$9 {
    token: string;
    id: string;
    name: string;
    /** @format uuid */
    secret: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompany$7 {
    id: string;
    /** @format uuid */
    secret: string;
    /** @maxLength 100 */
    name?: string | null;
}
interface AdminCompanyResponse$7 {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminCompany$7;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminListCreateTransactionBatch {
    id: string;
    /** @format uri */
    file: string;
    file_hash: string | null;
    transactions_total: number;
    transactions_failed: number;
    transactions_succeeded: number;
    created: number;
    updated: number;
    status: string;
    errors: string[];
    /** @default true */
    published?: boolean;
    /**
     * * `admin` - Admin
     * * `user` - User
     */
    section: "admin" | "user";
}
interface AdminListCreateTransactionBatchResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminListCreateTransactionBatch;
}
/**
 * Serialize the deactivation data, should be a token that represents an admin
 * user.
 */
interface Deactivate$9 {
    token: string;
    /** @default false */
    purge?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ListCreateTransactionBatch {
    id: string;
    /** @format uri */
    file: string;
    file_hash: string | null;
    transactions_total: number;
    transactions_failed: number;
    transactions_succeeded: number;
    created: number;
    updated: number;
    status: string;
    errors: string[];
    /** @default true */
    published?: boolean;
}
interface ListCreateTransactionBatchResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ListCreateTransactionBatch;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ListTransaction {
    id: number;
    /** @format date-time */
    updated: string;
    /** @format date-time */
    created: string;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    amount?: string | null;
    /** @maxLength 50 */
    currency?: string | null;
    /** @maxLength 100 */
    user?: string | null;
    /** @maxLength 100 */
    recipient?: string | null;
    /** @maxLength 100 */
    credit_account?: string | null;
    credit_metadata?: Record<string, any>;
    /** @maxLength 100 */
    credit_note?: string | null;
    /** @maxLength 100 */
    credit_reference?: string | null;
    /** @maxLength 100 */
    credit_subtype?: string | null;
    /** @maxLength 100 */
    debit_account?: string | null;
    debit_metadata?: Record<string, any>;
    /** @maxLength 100 */
    debit_note?: string | null;
    /** @maxLength 100 */
    debit_reference?: string | null;
    /** @maxLength 100 */
    debit_subtype?: string | null;
    uploaded_to_rehive?: boolean;
    rehive_error?: string | null;
    processed?: boolean;
    /** @maxLength 200 */
    idempotency_key?: string | null;
}
interface PaginatedAdminListCreateTransactionBatchList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminListCreateTransactionBatch[];
}
interface PaginatedAdminListCreateTransactionBatchListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminListCreateTransactionBatchList;
}
interface PaginatedListCreateTransactionBatchList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ListCreateTransactionBatch[];
}
interface PaginatedListCreateTransactionBatchListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedListCreateTransactionBatchList;
}
interface PaginatedListTransactionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ListTransaction[];
}
interface PaginatedListTransactionListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedListTransactionList;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCompany$5 {
    id?: string;
    /** @format uuid */
    secret?: string;
    /** @maxLength 100 */
    name?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedTransactionBatch {
    id?: string;
    /** @format uri */
    file?: string;
    file_hash?: string | null;
    transactions_total?: number;
    transactions_failed?: number;
    transactions_succeeded?: number;
    created?: number;
    updated?: number;
    status?: string;
    errors?: string[];
    /** @default true */
    published?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface TransactionBatch {
    id: string;
    /** @format uri */
    file: string;
    file_hash: string | null;
    transactions_total: number;
    transactions_failed: number;
    transactions_succeeded: number;
    created: number;
    updated: number;
    status: string;
    errors: string[];
    /** @default true */
    published?: boolean;
}
interface TransactionBatchResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: TransactionBatch;
}
interface Webhook$6 {
    id: string;
    /**
     * * `currency.create` - currency.create
     * * `currency.update` - currency.update
     */
    event: "currency.create" | "currency.update";
    company: string;
    data: Record<string, any>;
}
interface AdminUploadsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    section?: string;
    user?: string;
}
interface AdminUploadsTransactionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    batchId: string;
}
interface UploadsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface UploadsTransactionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    batchId: string;
}
type QueryParamsType$8 = Record<string | number, any>;
type ResponseFormat$8 = keyof Omit<Body, "body" | "bodyUsed">;
interface FullRequestParams$8 extends Omit<RequestInit, "body"> {
    /** set parameter to `true` for call `securityWorker` for this request */
    secure?: boolean;
    /** request path */
    path: string;
    /** content type of request body */
    type?: ContentType$8;
    /** query params */
    query?: QueryParamsType$8;
    /** format of response (i.e. response.json() -> format: "json") */
    format?: ResponseFormat$8;
    /** request body */
    body?: unknown;
    /** base url */
    baseUrl?: string;
    /** request cancellation token */
    cancelToken?: CancelToken$8;
}
type RequestParams$9 = Omit<FullRequestParams$8, "body" | "method" | "query" | "path">;
interface ApiConfig$8<SecurityDataType = unknown> {
    baseUrl?: string;
    baseApiParams?: Omit<RequestParams$9, "baseUrl" | "cancelToken" | "signal">;
    securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams$9 | void> | RequestParams$9 | void;
    customFetch?: typeof fetch;
}
interface HttpResponse$8<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}
type CancelToken$8 = Symbol | string | number;
declare enum ContentType$8 {
    Json = "application/json",
    JsonApi = "application/vnd.api+json",
    FormData = "multipart/form-data",
    UrlEncoded = "application/x-www-form-urlencoded",
    Text = "text/plain"
}
declare class HttpClient$8<SecurityDataType = unknown> {
    baseUrl: string;
    private securityData;
    private securityWorker?;
    private abortControllers;
    private customFetch;
    private baseApiParams;
    constructor(apiConfig?: ApiConfig$8<SecurityDataType>);
    setSecurityData: (data: SecurityDataType | null) => void;
    protected encodeQueryParam(key: string, value: any): string;
    protected addQueryParam(query: QueryParamsType$8, key: string): string;
    protected addArrayQueryParam(query: QueryParamsType$8, key: string): any;
    protected toQueryString(rawQuery?: QueryParamsType$8): string;
    protected addQueryParams(rawQuery?: QueryParamsType$8): string;
    private contentFormatters;
    protected mergeRequestParams(params1: RequestParams$9, params2?: RequestParams$9): RequestParams$9;
    protected createAbortSignal: (cancelToken: CancelToken$8) => AbortSignal | undefined;
    abortRequest: (cancelToken: CancelToken$8) => void;
    request: <T = any, E = any>({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }: FullRequestParams$8) => Promise<HttpResponse$8<T, E>>;
}
/**
 * @title Mass Send Service API
 * @version 1 (1)
 * @termsOfService https://rehive.com/terms/
 * @baseUrl https://mass-send.services.rehive.com/api/1/
 * @externalDocs https://docs.rehive.com
 * @contact Rehive Support <support@rehive.com> (https://rehive.com/support/)
 *
 *
 * The **Mass Send Service API** is used for sending baatches of transactions via CSV uploads in Rehive.
 *
 */
declare class Api$9<SecurityDataType extends unknown> extends HttpClient$8<SecurityDataType> {
    activate: {
        /**
         * No description
         *
         * @tags activate
         * @name ActivateCreate
         * @summary Activate service
         * @request POST:/activate/
         * @secure
         */
        activateCreate: (data: Activate$9, params?: RequestParams$9) => Promise<HttpResponse$8<ActionResponse$7, any>>;
    };
    admin: {
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyRetrieve
         * @summary Retrieve company
         * @request GET:/admin/company/
         * @secure
         */
        adminCompanyRetrieve: (params?: RequestParams$9) => Promise<HttpResponse$8<AdminCompanyResponse$7, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyUpdate
         * @summary Update company
         * @request PUT:/admin/company/
         * @secure
         */
        adminCompanyUpdate: (data: AdminCompany$7, params?: RequestParams$9) => Promise<HttpResponse$8<AdminCompanyResponse$7, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyPartialUpdate
         * @summary Partially update company
         * @request PATCH:/admin/company/
         * @secure
         */
        adminCompanyPartialUpdate: (data: PatchedAdminCompany$5, params?: RequestParams$9) => Promise<HttpResponse$8<AdminCompanyResponse$7, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUploadsList
         * @summary List transaction batches
         * @request GET:/admin/uploads/
         * @secure
         */
        adminUploadsList: (query: AdminUploadsListParams, params?: RequestParams$9) => Promise<HttpResponse$8<PaginatedAdminListCreateTransactionBatchListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUploadsCreate
         * @summary Create transaction batch
         * @request POST:/admin/uploads/
         * @secure
         */
        adminUploadsCreate: (data: AdminListCreateTransactionBatch, params?: RequestParams$9) => Promise<HttpResponse$8<AdminListCreateTransactionBatchResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUploadsRetrieve
         * @summary Retrieve transaction batch
         * @request GET:/admin/uploads/{batch_id}/
         * @secure
         */
        adminUploadsRetrieve: (batchId: string, params?: RequestParams$9) => Promise<HttpResponse$8<AdminListCreateTransactionBatchResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUploadsUpdate
         * @summary Update transaction batch
         * @request PUT:/admin/uploads/{batch_id}/
         * @secure
         */
        adminUploadsUpdate: (batchId: string, data: TransactionBatch, params?: RequestParams$9) => Promise<HttpResponse$8<AdminListCreateTransactionBatchResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUploadsPartialUpdate
         * @summary Partially update transaction batch
         * @request PATCH:/admin/uploads/{batch_id}/
         * @secure
         */
        adminUploadsPartialUpdate: (batchId: string, data: PatchedTransactionBatch, params?: RequestParams$9) => Promise<HttpResponse$8<AdminListCreateTransactionBatchResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUploadsTransactionsList
         * @summary List transactions
         * @request GET:/admin/uploads/{batch_id}/transactions/
         * @secure
         */
        adminUploadsTransactionsList: ({ batchId, ...query }: AdminUploadsTransactionsListParams, params?: RequestParams$9) => Promise<HttpResponse$8<PaginatedListTransactionListResponse, any>>;
    };
    deactivate: {
        /**
         * No description
         *
         * @tags deactivate
         * @name DeactivateCreate
         * @summary Deactivate service
         * @request POST:/deactivate/
         * @secure
         */
        deactivateCreate: (data: Deactivate$9, params?: RequestParams$9) => Promise<HttpResponse$8<ActionResponse$7, any>>;
    };
    uploads: {
        /**
         * No description
         *
         * @tags uploads
         * @name UploadsList
         * @summary List transaction batches
         * @request GET:/uploads/
         * @secure
         */
        uploadsList: (query: UploadsListParams, params?: RequestParams$9) => Promise<HttpResponse$8<PaginatedListCreateTransactionBatchListResponse, any>>;
        /**
         * No description
         *
         * @tags uploads
         * @name UploadsCreate
         * @summary Create transaction batch
         * @request POST:/uploads/
         * @secure
         */
        uploadsCreate: (data: ListCreateTransactionBatch, params?: RequestParams$9) => Promise<HttpResponse$8<ListCreateTransactionBatchResponse, any>>;
        /**
         * No description
         *
         * @tags uploads
         * @name UploadsRetrieve
         * @summary Retrieve transaction batch
         * @request GET:/uploads/{batch_id}/
         * @secure
         */
        uploadsRetrieve: (batchId: string, params?: RequestParams$9) => Promise<HttpResponse$8<TransactionBatchResponse, any>>;
        /**
         * No description
         *
         * @tags uploads
         * @name UploadsUpdate
         * @summary Update transaction batch
         * @request PUT:/uploads/{batch_id}/
         * @secure
         */
        uploadsUpdate: (batchId: string, data: TransactionBatch, params?: RequestParams$9) => Promise<HttpResponse$8<TransactionBatchResponse, any>>;
        /**
         * No description
         *
         * @tags uploads
         * @name UploadsPartialUpdate
         * @summary Partially update transaction batch
         * @request PATCH:/uploads/{batch_id}/
         * @secure
         */
        uploadsPartialUpdate: (batchId: string, data: PatchedTransactionBatch, params?: RequestParams$9) => Promise<HttpResponse$8<TransactionBatchResponse, any>>;
        /**
         * No description
         *
         * @tags uploads
         * @name UploadsTransactionsList
         * @summary List transactions
         * @request GET:/uploads/{batch_id}/transactions/
         * @secure
         */
        uploadsTransactionsList: ({ batchId, ...query }: UploadsTransactionsListParams, params?: RequestParams$9) => Promise<HttpResponse$8<PaginatedListTransactionListResponse, any>>;
    };
    webhook: {
        /**
         * No description
         *
         * @tags webhook
         * @name WebhookCreate
         * @summary Receive Platform webhook
         * @request POST:/webhook/
         * @secure
         */
        webhookCreate: (data: Webhook$6, params?: RequestParams$9) => Promise<HttpResponse$8<ActionResponse$7, any>>;
    };
}

/** This serializer can be used if only a `status` is required in the response. */
interface ActionResponse$6 {
    /** @default "sucess" */
    status?: string;
}
/**
 * Serialize the activation data, should be a token that represents an admin
 * user.
 */
interface Activate$8 {
    token: string;
    id: string;
    name: string;
    system_email: string;
    /** @format uuid */
    secret: string;
    push_enabled: boolean;
}
/** Serialize company, update and delete. */
interface AdminCompany$6 {
    id: string;
    /** @format uuid */
    secret: string;
    push_enabled?: boolean;
    /**
     * * `test` - Test
     * * `production` - Production
     */
    mode: "test" | "production";
    quotas: Quotas;
    /** @maxLength 50 */
    bimi_selector_header?: string | null;
    /** @maxLength 100 */
    name?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    website?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    system_email?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    support_email?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email?: string | null;
    /**
     * @format uri
     * @maxLength 512
     */
    logo?: string | null;
    /**
     * @format uri
     * @maxLength 512
     */
    icon?: string | null;
}
interface AdminCompanyResponse$6 {
    /** @example "success" */
    status?: string;
    /** Serialize company, update and delete. */
    data?: AdminCompany$6;
}
/** Serialize notifications, create, update and delete. */
interface AdminCreateUpdateNotification {
    id: number;
    /**
     * * `email` - email
     * * `sms` - sms
     * * `push` - push
     */
    type?: "email" | "sms" | "push" | "" | null;
    template?: string | null;
    /** @maxLength 250 */
    name: string;
    /** @maxLength 250 */
    subject?: string | null;
    /** @maxLength 250 */
    description?: string | null;
    company: string;
    html_message?: string | null;
    text_message?: string | null;
    /** @maxLength 300 */
    sms_message?: string | null;
    /** @maxLength 300 */
    push_message?: string | null;
    enabled?: boolean;
    preference_enabled?: boolean;
    event?: string | null;
    /** @maxLength 150 */
    to_email?: string | null;
    /** @maxLength 150 */
    to_mobile?: string | null;
    /** @maxLength 150 */
    to_user?: string | null;
    /** @maxLength 250 */
    expression?: string | null;
    /**
     * @format email
     * @maxLength 250
     */
    from_email?: string | null;
    layout?: string | null;
}
/** Serialize notifications, create, update and delete. */
interface AdminCredential {
    id: number;
    /**
     * * `twilio` - twilio
     * * `sendgrid` - sendgrid
     */
    credential_type: "twilio" | "sendgrid";
    credentials?: Record<string, any>;
    created: number;
    updated: number;
}
interface AdminCredentialResponse {
    /** @example "success" */
    status?: string;
    /** Serialize notifications, create, update and delete. */
    data?: AdminCredential;
}
/** Serialize notification logs. */
interface AdminLog {
    id: number;
    notification: string | null;
    /**
     * * `email` - email
     * * `sms` - sms
     * * `push` - push
     */
    type: "email" | "sms" | "push";
    user: string | null;
    /** @maxLength 150 */
    recipient: string;
    text_message: string | null;
    html_message: string | null;
    sms_message: string | null;
    push_message: string | null;
    sent?: boolean;
    error_message?: string | null;
    created: number;
}
interface AdminLogResponse {
    /** @example "success" */
    status?: string;
    /** Serialize notification logs. */
    data?: AdminLog;
}
/** Serialize log sending. */
interface AdminLogSend {
    recipient?: string;
}
/** Serialize notifications, create, update and delete. */
interface AdminNotification {
    id: number;
    /**
     * * `email` - email
     * * `sms` - sms
     * * `push` - push
     */
    type: "email" | "sms" | "push";
    template?: AdminReducedTemplate | null;
    /** @maxLength 250 */
    name: string;
    /** @maxLength 250 */
    subject?: string | null;
    /** @maxLength 250 */
    description?: string | null;
    company: string;
    html_message?: string | null;
    text_message?: string | null;
    /** @maxLength 300 */
    sms_message?: string | null;
    /** @maxLength 300 */
    push_message?: string | null;
    enabled?: boolean;
    preference_enabled?: boolean;
    event: string;
    /** @maxLength 150 */
    to_email?: string | null;
    /** @maxLength 150 */
    to_mobile?: string | null;
    /** @maxLength 150 */
    to_user?: string | null;
    /** @maxLength 250 */
    expression?: string | null;
    /**
     * @format email
     * @maxLength 250
     */
    from_email?: string | null;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    layout?: ReducedNotificationLayout;
}
interface AdminNotificationResponse {
    /** @example "success" */
    status?: string;
    /** Serialize notifications, create, update and delete. */
    data?: AdminNotification;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminReducedTemplate {
    id: string;
    default?: boolean;
    deletable?: boolean;
}
/** Serialize templates. */
interface AdminTemplate {
    id: string;
    /**
     * * `email` - email
     * * `sms` - sms
     * * `push` - push
     */
    type: "email" | "sms" | "push";
    /** @maxLength 250 */
    name: string;
    /** @maxLength 250 */
    subject: string;
    /** @maxLength 250 */
    description?: string | null;
    html_message?: string | null;
    text_message?: string | null;
    /** @maxLength 300 */
    sms_message?: string | null;
    /** @maxLength 300 */
    push_message?: string | null;
    enabled?: boolean;
    preference_enabled?: boolean;
    event: string;
    /** @maxLength 150 */
    to_email?: string | null;
    /** @maxLength 150 */
    to_mobile?: string | null;
    /** @maxLength 150 */
    to_user?: string | null;
    /** @maxLength 250 */
    expression?: string | null;
    layout: ReducedLayoutTemplate;
    default?: boolean;
    deletable?: boolean;
    created: number;
    updated: number;
}
interface AdminTemplateResponse {
    /** @example "success" */
    status?: string;
    /** Serialize templates. */
    data?: AdminTemplate;
}
/** Trigger a notification. */
interface AdminTriggerNotification {
    data?: Record<string, any>;
}
/**
 * Serialize the deactivation data, should be a token that represents an admin
 * user.
 */
interface Deactivate$8 {
    token: string;
    /** @default false */
    purge?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface LayoutTemplate {
    id: string;
    name: string;
    description: string | null;
    /**
     * * `email` - email
     * * `sms` - sms
     * * `push` - push
     */
    type: "email" | "sms" | "push";
    html_layout: string | null;
    text_layout: string | null;
    sms_layout: string | null;
    push_layout: string | null;
    created: number;
    updated: number;
}
interface LayoutTemplateResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: LayoutTemplate;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface NotificationLayout {
    id: string;
    /** @maxLength 30 */
    name: string;
    /** @maxLength 100 */
    description?: string | null;
    /**
     * * `email` - email
     * * `sms` - sms
     * * `push` - push
     */
    type: "email" | "sms" | "push";
    html_layout?: string | null;
    text_layout?: string | null;
    sms_layout?: string | null;
    push_layout?: string | null;
    created: number;
    updated: number;
}
interface NotificationLayoutResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: NotificationLayout;
}
interface PaginatedAdminCredentialList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminCredential[];
}
interface PaginatedAdminCredentialListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminCredentialList;
}
interface PaginatedAdminLogList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminLog[];
}
interface PaginatedAdminLogListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminLogList;
}
interface PaginatedAdminNotificationList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminNotification[];
}
interface PaginatedAdminNotificationListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminNotificationList;
}
interface PaginatedAdminTemplateList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminTemplate[];
}
interface PaginatedAdminTemplateListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminTemplateList;
}
interface PaginatedLayoutTemplateList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: LayoutTemplate[];
}
interface PaginatedLayoutTemplateListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedLayoutTemplateList;
}
interface PaginatedNotificationLayoutList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: NotificationLayout[];
}
interface PaginatedNotificationLayoutListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedNotificationLayoutList;
}
interface PaginatedUserNotificationList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: UserNotification[];
}
interface PaginatedUserNotificationListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedUserNotificationList;
}
/** Serialize company, update and delete. */
interface PatchedAdminCompany$4 {
    id?: string;
    /** @format uuid */
    secret?: string;
    push_enabled?: boolean;
    /**
     * * `test` - Test
     * * `production` - Production
     */
    mode?: "test" | "production";
    quotas?: Quotas;
    /** @maxLength 50 */
    bimi_selector_header?: string | null;
    /** @maxLength 100 */
    name?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    website?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    system_email?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    support_email?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email?: string | null;
    /**
     * @format uri
     * @maxLength 512
     */
    logo?: string | null;
    /**
     * @format uri
     * @maxLength 512
     */
    icon?: string | null;
}
/** Serialize notifications, create, update and delete. */
interface PatchedAdminCreateUpdateNotification {
    id?: number;
    /**
     * * `email` - email
     * * `sms` - sms
     * * `push` - push
     */
    type?: "email" | "sms" | "push" | "" | null;
    template?: string | null;
    /** @maxLength 250 */
    name?: string;
    /** @maxLength 250 */
    subject?: string | null;
    /** @maxLength 250 */
    description?: string | null;
    company?: string;
    html_message?: string | null;
    text_message?: string | null;
    /** @maxLength 300 */
    sms_message?: string | null;
    /** @maxLength 300 */
    push_message?: string | null;
    enabled?: boolean;
    preference_enabled?: boolean;
    event?: string | null;
    /** @maxLength 150 */
    to_email?: string | null;
    /** @maxLength 150 */
    to_mobile?: string | null;
    /** @maxLength 150 */
    to_user?: string | null;
    /** @maxLength 250 */
    expression?: string | null;
    /**
     * @format email
     * @maxLength 250
     */
    from_email?: string | null;
    layout?: string | null;
}
/** Serialize notifications, create, update and delete. */
interface PatchedAdminCredential {
    id?: number;
    /**
     * * `twilio` - twilio
     * * `sendgrid` - sendgrid
     */
    credential_type?: "twilio" | "sendgrid";
    credentials?: Record<string, any>;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedNotificationLayout {
    id?: string;
    /** @maxLength 30 */
    name?: string;
    /** @maxLength 100 */
    description?: string | null;
    /**
     * * `email` - email
     * * `sms` - sms
     * * `push` - push
     */
    type?: "email" | "sms" | "push";
    html_layout?: string | null;
    text_layout?: string | null;
    sms_layout?: string | null;
    push_layout?: string | null;
    created?: number;
    updated?: number;
}
/**
 * Serialize notifications update. Actually updates the notification
 * preference instead.
 */
interface PatchedUserUpdateNotification {
    enabled?: boolean;
}
interface Quotas {
    sms: number;
    email: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedLayoutTemplate {
    id: string;
    /** @maxLength 30 */
    name: string;
    /** @maxLength 100 */
    description?: string | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ReducedNotificationLayout {
    id: string;
    /** @maxLength 30 */
    name: string;
    /** @maxLength 100 */
    description?: string | null;
    created: number;
    updated: number;
}
/** Serialize notifications. */
interface UserNotification {
    id: number;
    /** @maxLength 250 */
    name: string;
    /** @maxLength 250 */
    description?: string | null;
    event: string;
    type: string;
    enabled: boolean;
}
interface UserNotificationResponse {
    /** @example "success" */
    status?: string;
    /** Serialize notifications. */
    data?: UserNotification;
}
/**
 * Serialize notifications update. Actually updates the notification
 * preference instead.
 */
interface UserUpdateNotification {
    enabled: boolean;
}
/**
 * Validate and serialize the webhook data. The secret key and company are
 * used to identify a specific company.
 */
interface Webhook$5 {
    id: string;
    event: string;
    company: string;
    data: Record<string, any>;
}
interface AdminCredentialsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminLayoutTemplatesListParams {
    name?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    type?: string;
}
interface AdminLayoutsListParams {
    name?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    type?: string;
}
interface AdminLogsListParams {
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__lt?: string;
    notification?: string;
    notification__name?: string;
    notification__name__contains?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    recipient?: string;
    recipient__contains?: string;
    sent?: boolean;
}
interface AdminNotificationsListParams {
    event?: string;
    layout?: string;
    name?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    type?: string;
}
interface AdminTemplatesListParams {
    event?: string;
    layout?: string;
    name?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    type?: string;
}
interface UserNotificationsListParams {
    event?: string;
    layout?: string;
    name?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    type?: string;
}
type QueryParamsType$7 = Record<string | number, any>;
type ResponseFormat$7 = keyof Omit<Body, "body" | "bodyUsed">;
interface FullRequestParams$7 extends Omit<RequestInit, "body"> {
    /** set parameter to `true` for call `securityWorker` for this request */
    secure?: boolean;
    /** request path */
    path: string;
    /** content type of request body */
    type?: ContentType$7;
    /** query params */
    query?: QueryParamsType$7;
    /** format of response (i.e. response.json() -> format: "json") */
    format?: ResponseFormat$7;
    /** request body */
    body?: unknown;
    /** base url */
    baseUrl?: string;
    /** request cancellation token */
    cancelToken?: CancelToken$7;
}
type RequestParams$8 = Omit<FullRequestParams$7, "body" | "method" | "query" | "path">;
interface ApiConfig$7<SecurityDataType = unknown> {
    baseUrl?: string;
    baseApiParams?: Omit<RequestParams$8, "baseUrl" | "cancelToken" | "signal">;
    securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams$8 | void> | RequestParams$8 | void;
    customFetch?: typeof fetch;
}
interface HttpResponse$7<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}
type CancelToken$7 = Symbol | string | number;
declare enum ContentType$7 {
    Json = "application/json",
    JsonApi = "application/vnd.api+json",
    FormData = "multipart/form-data",
    UrlEncoded = "application/x-www-form-urlencoded",
    Text = "text/plain"
}
declare class HttpClient$7<SecurityDataType = unknown> {
    baseUrl: string;
    private securityData;
    private securityWorker?;
    private abortControllers;
    private customFetch;
    private baseApiParams;
    constructor(apiConfig?: ApiConfig$7<SecurityDataType>);
    setSecurityData: (data: SecurityDataType | null) => void;
    protected encodeQueryParam(key: string, value: any): string;
    protected addQueryParam(query: QueryParamsType$7, key: string): string;
    protected addArrayQueryParam(query: QueryParamsType$7, key: string): any;
    protected toQueryString(rawQuery?: QueryParamsType$7): string;
    protected addQueryParams(rawQuery?: QueryParamsType$7): string;
    private contentFormatters;
    protected mergeRequestParams(params1: RequestParams$8, params2?: RequestParams$8): RequestParams$8;
    protected createAbortSignal: (cancelToken: CancelToken$7) => AbortSignal | undefined;
    abortRequest: (cancelToken: CancelToken$7) => void;
    request: <T = any, E = any>({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }: FullRequestParams$7) => Promise<HttpResponse$7<T, E>>;
}
/**
 * @title Notification Service API
 * @version 1 (1)
 * @termsOfService https://rehive.com/terms/
 * @baseUrl https://notification.services.rehive.com/api/
 * @externalDocs https://docs.rehive.com
 * @contact Rehive Support <support@rehive.com> (https://rehive.com/support/)
 *
 *
 * The **Notification Service API** is used for sending email, SMS, and push notifications in Rehive.
 *
 */
declare class Api$8<SecurityDataType extends unknown> extends HttpClient$7<SecurityDataType> {
    activate: {
        /**
         * No description
         *
         * @tags activate
         * @name ActivateCreate
         * @summary Activate service
         * @request POST:/activate/
         * @secure
         */
        activateCreate: (data: Activate$8, params?: RequestParams$8) => Promise<HttpResponse$7<ActionResponse$6, any>>;
    };
    admin: {
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyRetrieve
         * @summary Retrieve company
         * @request GET:/admin/company/
         * @secure
         */
        adminCompanyRetrieve: (params?: RequestParams$8) => Promise<HttpResponse$7<AdminCompanyResponse$6, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyUpdate
         * @summary Update company
         * @request PUT:/admin/company/
         * @secure
         */
        adminCompanyUpdate: (data: AdminCompany$6, params?: RequestParams$8) => Promise<HttpResponse$7<AdminCompanyResponse$6, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyPartialUpdate
         * @summary Partially update company
         * @request PATCH:/admin/company/
         * @secure
         */
        adminCompanyPartialUpdate: (data: PatchedAdminCompany$4, params?: RequestParams$8) => Promise<HttpResponse$7<AdminCompanyResponse$6, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCredentialsList
         * @summary List credentials
         * @request GET:/admin/credentials/
         * @secure
         */
        adminCredentialsList: (query: AdminCredentialsListParams, params?: RequestParams$8) => Promise<HttpResponse$7<PaginatedAdminCredentialListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCredentialsCreate
         * @summary Create credential
         * @request POST:/admin/credentials/
         * @secure
         */
        adminCredentialsCreate: (data: AdminCredential, params?: RequestParams$8) => Promise<HttpResponse$7<AdminCredentialResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCredentialsRetrieve
         * @summary Retrieve credential
         * @request GET:/admin/credentials/{credential_id}/
         * @secure
         */
        adminCredentialsRetrieve: (credentialId: string, params?: RequestParams$8) => Promise<HttpResponse$7<AdminCredentialResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCredentialsUpdate
         * @summary Update credential
         * @request PUT:/admin/credentials/{credential_id}/
         * @secure
         */
        adminCredentialsUpdate: (credentialId: string, data: AdminCredential, params?: RequestParams$8) => Promise<HttpResponse$7<AdminCredentialResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCredentialsPartialUpdate
         * @summary Partially update credential
         * @request PATCH:/admin/credentials/{credential_id}/
         * @secure
         */
        adminCredentialsPartialUpdate: (credentialId: string, data: PatchedAdminCredential, params?: RequestParams$8) => Promise<HttpResponse$7<AdminCredentialResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCredentialsDestroy
         * @summary Delete credential
         * @request DELETE:/admin/credentials/{credential_id}/
         * @secure
         */
        adminCredentialsDestroy: (credentialId: string, params?: RequestParams$8) => Promise<HttpResponse$7<AdminCredentialResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLayoutTemplatesList
         * @summary List layout templates
         * @request GET:/admin/layout-templates/
         * @secure
         */
        adminLayoutTemplatesList: (query: AdminLayoutTemplatesListParams, params?: RequestParams$8) => Promise<HttpResponse$7<PaginatedLayoutTemplateListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLayoutTemplatesRetrieve
         * @summary Retrieve layout template
         * @request GET:/admin/layout-templates/{id}/
         * @secure
         */
        adminLayoutTemplatesRetrieve: (id: string, params?: RequestParams$8) => Promise<HttpResponse$7<LayoutTemplateResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLayoutsList
         * @summary List layouts
         * @request GET:/admin/layouts/
         * @secure
         */
        adminLayoutsList: (query: AdminLayoutsListParams, params?: RequestParams$8) => Promise<HttpResponse$7<PaginatedNotificationLayoutListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLayoutsCreate
         * @summary Create layout
         * @request POST:/admin/layouts/
         * @secure
         */
        adminLayoutsCreate: (data: NotificationLayout, params?: RequestParams$8) => Promise<HttpResponse$7<NotificationLayoutResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLayoutsRetrieve
         * @summary Retrieve layout
         * @request GET:/admin/layouts/{id}/
         * @secure
         */
        adminLayoutsRetrieve: (id: string, params?: RequestParams$8) => Promise<HttpResponse$7<NotificationLayoutResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLayoutsUpdate
         * @summary Update layout
         * @request PUT:/admin/layouts/{id}/
         * @secure
         */
        adminLayoutsUpdate: (id: string, data: NotificationLayout, params?: RequestParams$8) => Promise<HttpResponse$7<NotificationLayoutResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLayoutsPartialUpdate
         * @summary Partially update layout
         * @request PATCH:/admin/layouts/{id}/
         * @secure
         */
        adminLayoutsPartialUpdate: (id: string, data: PatchedNotificationLayout, params?: RequestParams$8) => Promise<HttpResponse$7<NotificationLayoutResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLayoutsDestroy
         * @summary Delete layout
         * @request DELETE:/admin/layouts/{id}/
         * @secure
         */
        adminLayoutsDestroy: (id: string, params?: RequestParams$8) => Promise<HttpResponse$7<NotificationLayoutResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLogsList
         * @summary List logs
         * @request GET:/admin/logs/
         * @secure
         */
        adminLogsList: (query: AdminLogsListParams, params?: RequestParams$8) => Promise<HttpResponse$7<PaginatedAdminLogListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLogsRetrieve
         * @summary Retrieve log
         * @request GET:/admin/logs/{log_id}/
         * @secure
         */
        adminLogsRetrieve: (logId: string, params?: RequestParams$8) => Promise<HttpResponse$7<AdminLogResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLogsSendCreate
         * @summary Send notification
         * @request POST:/admin/logs/{log_id}/send/
         * @secure
         */
        adminLogsSendCreate: (logId: string, data: AdminLogSend, params?: RequestParams$8) => Promise<HttpResponse$7<ActionResponse$6, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminNotificationsList
         * @summary List notifications
         * @request GET:/admin/notifications/
         * @secure
         */
        adminNotificationsList: (query: AdminNotificationsListParams, params?: RequestParams$8) => Promise<HttpResponse$7<PaginatedAdminNotificationListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminNotificationsCreate
         * @summary Create notification
         * @request POST:/admin/notifications/
         * @secure
         */
        adminNotificationsCreate: (data: AdminCreateUpdateNotification, params?: RequestParams$8) => Promise<HttpResponse$7<AdminNotificationResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminNotificationsRetrieve
         * @summary Retrieve notification
         * @request GET:/admin/notifications/{notification_id}/
         * @secure
         */
        adminNotificationsRetrieve: (notificationId: string, params?: RequestParams$8) => Promise<HttpResponse$7<AdminNotificationResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminNotificationsUpdate
         * @summary Update notification
         * @request PUT:/admin/notifications/{notification_id}/
         * @secure
         */
        adminNotificationsUpdate: (notificationId: string, data: AdminCreateUpdateNotification, params?: RequestParams$8) => Promise<HttpResponse$7<AdminNotificationResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminNotificationsPartialUpdate
         * @summary Partially update notification
         * @request PATCH:/admin/notifications/{notification_id}/
         * @secure
         */
        adminNotificationsPartialUpdate: (notificationId: string, data: PatchedAdminCreateUpdateNotification, params?: RequestParams$8) => Promise<HttpResponse$7<AdminNotificationResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminNotificationsDestroy
         * @summary Delete notification
         * @request DELETE:/admin/notifications/{notification_id}/
         * @secure
         */
        adminNotificationsDestroy: (notificationId: string, params?: RequestParams$8) => Promise<HttpResponse$7<AdminNotificationResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminNotificationsTriggerCreate
         * @summary Trigger notification
         * @request POST:/admin/notifications/{notification_id}/trigger/
         * @secure
         */
        adminNotificationsTriggerCreate: (notificationId: string, data: AdminTriggerNotification, params?: RequestParams$8) => Promise<HttpResponse$7<ActionResponse$6, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminTemplatesList
         * @summary List templates
         * @request GET:/admin/templates/
         * @secure
         */
        adminTemplatesList: (query: AdminTemplatesListParams, params?: RequestParams$8) => Promise<HttpResponse$7<PaginatedAdminTemplateListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminTemplatesRetrieve
         * @summary Retrieve template
         * @request GET:/admin/templates/{template_id}/
         * @secure
         */
        adminTemplatesRetrieve: (templateId: string, params?: RequestParams$8) => Promise<HttpResponse$7<AdminTemplateResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminWebhookCreate
         * @request POST:/admin/webhook/
         * @secure
         */
        adminWebhookCreate: (data: Webhook$5, params?: RequestParams$8) => Promise<HttpResponse$7<ActionResponse$6, any>>;
    };
    deactivate: {
        /**
         * No description
         *
         * @tags deactivate
         * @name DeactivateCreate
         * @summary Deactivate service
         * @request POST:/deactivate/
         * @secure
         */
        deactivateCreate: (data: Deactivate$8, params?: RequestParams$8) => Promise<HttpResponse$7<ActionResponse$6, any>>;
    };
    user: {
        /**
         * No description
         *
         * @tags user
         * @name UserNotificationsList
         * @summary List notifications
         * @request GET:/user/notifications/
         * @secure
         */
        userNotificationsList: (query: UserNotificationsListParams, params?: RequestParams$8) => Promise<HttpResponse$7<PaginatedUserNotificationListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserNotificationsRetrieve
         * @summary Retrieve notification
         * @request GET:/user/notifications/{notification_id}/
         * @secure
         */
        userNotificationsRetrieve: (notificationId: string, params?: RequestParams$8) => Promise<HttpResponse$7<UserNotificationResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserNotificationsUpdate
         * @summary Update notification
         * @request PUT:/user/notifications/{notification_id}/
         * @secure
         */
        userNotificationsUpdate: (notificationId: string, data: UserUpdateNotification, params?: RequestParams$8) => Promise<HttpResponse$7<UserNotificationResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserNotificationsPartialUpdate
         * @summary Partially update notification
         * @request PATCH:/user/notifications/{notification_id}/
         * @secure
         */
        userNotificationsPartialUpdate: (notificationId: string, data: PatchedUserUpdateNotification, params?: RequestParams$8) => Promise<HttpResponse$7<UserNotificationResponse, any>>;
    };
    webhook: {
        /**
         * No description
         *
         * @tags webhook
         * @name WebhookCreate
         * @request POST:/webhook/
         * @secure
         */
        webhookCreate: (data: Webhook$5, params?: RequestParams$8) => Promise<HttpResponse$7<ActionResponse$6, any>>;
    };
}

/** This serializer can be used if only a `status` is required in the response. */
interface ActionResponse$5 {
    /** @default "sucess" */
    status?: string;
}
interface Activate$7 {
    token: string;
    id: string;
    name: string;
    /** @format uuid */
    secret: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompany$5 {
    id: string;
    /** @maxItems 10 */
    manager_groups?: string[] | null;
    name: string | null;
}
interface AdminCompanyResponse$5 {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminCompany$5;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateCategory {
    /** @format uuid */
    id: string;
    /** @maxLength 30 */
    name: string;
    /** @format uuid */
    parent?: string;
    /** @format uri */
    image?: string;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateOrder {
    /** @format uuid */
    id: string;
    user: string;
    currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateOrderItem {
    product: string;
    /** @min 1 */
    quantity: number;
    variant?: string | null;
    metadata?: Record<string, any>;
    custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreatePayment {
    id: string;
    /** * `rehive` - rehive */
    type?: "rehive";
    amount: number;
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "complete" | "failed";
    collection: string | null;
    created: number;
    updated: number;
}
interface AdminCreateProductCategory {
    categories: string[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateProductOption {
    id: string;
    /** @maxLength 50 */
    name?: string | null;
    values: string[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateProductPrice {
    id: string;
    amount?: number | null;
    currency: string;
    allow_custom_amount?: boolean;
    min_custom_amount?: number | null;
    max_custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateProductVariant {
    id: string;
    voucher_schema?: CreateUpdateVariantVoucherSchema | null;
    /** @maxLength 100 */
    code?: string | null;
    /** @maxLength 50 */
    label?: string | null;
    options: Record<string, any>;
    quantity: number | null;
    tracked?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateProductVariantPrice {
    id: string;
    currency: string;
    amount?: number | null;
    allow_custom_amount?: boolean;
    min_custom_amount?: number | null;
    max_custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateRedemption {
    code: string;
    amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateRefund {
    id: string;
    /** * `rehive` - rehive */
    type?: "rehive";
    amount: number;
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "complete" | "failed";
    item: string;
    /** @min 1 */
    quantity: number;
    /** @maxLength 100 */
    reason?: string | null;
    collection: string | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateUpdateProduct {
    /** @format uuid */
    id: string;
    /** @maxLength 50 */
    name: string;
    description?: string | null;
    short_description?: string | null;
    prices: ProductPrice[];
    quantity?: number | null;
    tracked?: boolean;
    voucher_schema?: AdminCreateUpdateVoucherSchema | null;
    code?: string | null;
    instant_buy?: boolean;
    supplier?: string | null;
    /** @maxItems 249 */
    countries?: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
    metadata?: Record<string, any>;
    categories: Category[];
    integration?: string | null;
    seller?: string | null;
    account?: string | null;
    requires_shipping_address?: boolean;
    requires_billing_address?: boolean;
    requires_contact_mobile?: boolean;
    requires_contact_email?: boolean;
    enabled?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateUpdateVoucherSchema {
    /**
     * * `static` - static
     * * `balance` - balance
     */
    type: "static" | "balance";
    /**
     * * `manual` - manual
     * * `automatic` - automatic
     * * `integration` - integration
     */
    creation_type: "manual" | "automatic" | "integration";
    /** @maxItems 10 */
    redeemer_users?: string[] | null;
    /** @maxItems 10 */
    redeemer_groups?: string[] | null;
    /**
     * * `raw` - raw
     * * `qr` - qr
     * * `bar` - bar
     */
    display_format: "raw" | "qr" | "bar";
    amount?: number | null;
    currency?: string | null;
    /** @maxLength 30 */
    source_account?: string | null;
    lifespan?: number | null;
    /**
     * * `seconds` - Seconds
     * * `minutes` - Minutes
     * * `hours` - Hours
     * * `days` - Days
     * * `weeks` - Weeks
     * * `months` - Months
     * * `years` - Years
     */
    lifespan_unit?: "seconds" | "minutes" | "hours" | "days" | "weeks" | "months" | "years" | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateVoucher {
    /** @format uuid */
    id: string;
    product?: string;
    variant?: string;
    item?: string;
    /** @maxLength 100 */
    code: string;
    /** @maxLength 64 */
    serial?: string;
    expires?: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateVoucherImport {
    id: string;
    product?: string;
    variant?: string;
    /** @format uri */
    file: string;
    /**
     * * `queued` - Queued
     * * `processing` - Processing
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "queued" | "processing" | "complete" | "failed";
    errors: string[];
}
interface AdminCreateVoucherImportResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminCreateVoucherImport;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminGetUpdateProductImage {
    id: string;
    /** @format uri */
    file?: string;
    weight?: number;
    created: number;
    updated: number;
}
interface AdminGetUpdateProductImageResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminGetUpdateProductImage;
}
/** DEPRECATED : Replaced by the AdminCreateVoucherImportSerializer serializer. */
interface AdminImportVoucher {
    product?: string;
    variant?: string;
    /** @format uri */
    file: string;
    vouchers: Voucher[];
}
interface AdminImportVoucherResponse {
    /** @example "success" */
    status?: string;
    /** DEPRECATED : Replaced by the AdminCreateVoucherImportSerializer serializer. */
    data?: AdminImportVoucher;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminIntegration {
    id: string;
    seller: ShortSeller;
    /** @maxLength 50 */
    slug: string;
    /** @maxLength 50 */
    name: string;
    /** @maxLength 255 */
    description?: string | null;
    created: number;
    updated: number;
}
interface AdminIntegrationResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminIntegration;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminIntegrationWebhook {
    id: string;
    /** @format uri */
    url: string;
    /** * `order.item.purchase` - order.item.purchase */
    event: "order.item.purchase";
    /** @maxLength 250 */
    secret?: string;
    created: number;
    updated: number;
}
interface AdminIntegrationWebhookResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminIntegrationWebhook;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminListCreateProductImage {
    id: string;
    /** @format uri */
    file: string;
    weight?: number;
    created: number;
    updated: number;
}
interface AdminListCreateProductImageResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminListCreateProductImage;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminPayment {
    id: string;
    /** * `rehive` - rehive */
    type: "rehive";
    amount: number;
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "complete" | "failed";
    collection: string | null;
    created: number;
    updated: number;
}
interface AdminPaymentResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminPayment;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminProduct {
    /** @format uuid */
    id: string;
    /** @maxLength 50 */
    name: string;
    description: string | null;
    short_description: string | null;
    prices: ProductPrice[];
    options: ProductOption[];
    variants: ProductVariant[];
    quantity: number | null;
    tracked?: boolean;
    voucher_schema: VoucherSchema;
    code: string | null;
    instant_buy?: boolean;
    supplier: string | null;
    /** @maxItems 249 */
    countries?: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
    enabled?: boolean;
    metadata: Record<string, any>;
    images: ProductImage[];
    categories: Category[];
    integration: AdminIntegration;
    seller: ShortSeller;
    account: string | null;
    requires_shipping_address?: boolean;
    requires_billing_address?: boolean;
    requires_contact_mobile?: boolean;
    requires_contact_email?: boolean;
    created: number;
    updated: number;
}
interface AdminProductResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminProduct;
}
interface AdminQueryVoucher {
    code: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminRefund$1 {
    id: string;
    /** * `rehive` - rehive */
    type: "rehive";
    amount: number;
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "complete" | "failed";
    item: string;
    quantity: number | null;
    reason: string | null;
    collection: string | null;
    created: number;
    updated: number;
}
interface AdminRefundResponse$1 {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminRefund$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminSeller {
    id: string;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    owner: string;
    /** @maxLength 30 */
    account: string;
    /**
     * * `declined` - Declined
     * * `pending` - Pending
     * * `verified` - Verified
     */
    status: "declined" | "pending" | "verified";
    metadata?: Record<string, any>;
    created: number;
    updated: number;
}
interface AdminSellerResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminSeller;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateOrder {
    /** @format uuid */
    id: string;
    user: string;
    /**
     * * `pending` - pending
     * * `reserved` - reserved
     * * `placed` - placed
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "reserved" | "placed" | "complete" | "failed";
    currency: Currency$4;
    total_price: number;
    items: OrderItem[];
    shipping_address?: Record<string, any>;
    billing_address?: Record<string, any>;
    /** @maxLength 24 */
    contact_mobile?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email?: string | null;
    placed: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateOrderItem {
    /** @min 0 */
    quantity: number;
    /**
     * * `processing` - processing
     * * `shipped` - shipped
     * * `fulfilled` - fulfilled
     * * `complete` - complete
     * * `failed` - failed
     */
    status?: "processing" | "shipped" | "fulfilled" | "complete" | "failed" | "" | null;
    /** @maxLength 150 */
    tracking_url?: string | null;
    metadata?: Record<string, any>;
    custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateProductOption {
    id: string;
    /** @maxLength 50 */
    name?: string | null;
    values?: string[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateProductPrice {
    id: string;
    amount?: number | null;
    allow_custom_amount?: boolean;
    min_custom_amount?: number | null;
    max_custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateProductVariant {
    id: string;
    voucher_schema?: CreateUpdateVariantVoucherSchema | null;
    /** @maxLength 100 */
    code?: string | null;
    /** @maxLength 50 */
    label?: string | null;
    options: Record<string, any>;
    quantity: number | null;
    tracked?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateProductVariantPrice {
    id: string;
    amount?: number | null;
    allow_custom_amount?: boolean;
    min_custom_amount?: number | null;
    max_custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateVoucher {
    /** @format uuid */
    id: string;
    product: ShortProduct;
    item: ShortOrderItem;
    /**
     * * `available` - available
     * * `reserved` - reserved
     * * `purchased` - purchased
     * * `redeemed` - redeemed
     * * `partially_redeemed` - partially_redeemed
     */
    status: "available" | "reserved" | "purchased" | "redeemed" | "partially_redeemed";
    code: string;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Category {
    /** @format uuid */
    id: string;
    name: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    parent?: CategoryParent;
    /** @format uri */
    image: string | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CategoryParent {
    /** @format uuid */
    id: string;
    name: string;
    parent: number | null;
    created: number;
    updated: number;
}
interface CategoryResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Category;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Company$3 {
    id: string;
    manager_groups: string[] | null;
    name: string | null;
}
interface CompanyResponse$1 {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Company$3;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreatePayment {
    id: string;
    /** * `rehive` - rehive */
    type?: "rehive";
    amount: number;
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "complete" | "failed";
    collection: string | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateUpdateVariantVoucherSchema {
    amount: number;
    currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateUpdateVoucherSchema {
    /**
     * * `static` - static
     * * `balance` - balance
     */
    type: "static" | "balance";
    /**
     * * `manual` - manual
     * * `automatic` - automatic
     * * `integration` - integration
     */
    creation_type: "manual" | "automatic" | "integration";
    /** @maxItems 10 */
    redeemer_users?: string[] | null;
    /** @maxItems 10 */
    redeemer_groups?: string[] | null;
    /**
     * * `raw` - raw
     * * `qr` - qr
     * * `bar` - bar
     */
    display_format: "raw" | "qr" | "bar";
    amount?: number | null;
    currency?: string | null;
    /** @maxLength 30 */
    source_account?: string | null;
    lifespan?: number | null;
    /**
     * * `seconds` - Seconds
     * * `minutes` - Minutes
     * * `hours` - Hours
     * * `days` - Days
     * * `weeks` - Weeks
     * * `months` - Months
     * * `years` - Years
     */
    lifespan_unit?: "seconds" | "minutes" | "hours" | "days" | "weeks" | "months" | "years" | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Currency$4 {
    /** @maxLength 30 */
    code: string;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
    enabled?: boolean;
}
interface CurrencyResponse$2 {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Currency$4;
}
interface Deactivate$7 {
    token: string;
    /** @default false */
    purge?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ExtendedOrder {
    /** @format uuid */
    id: string;
    user: string;
    /**
     * * `pending` - pending
     * * `reserved` - reserved
     * * `placed` - placed
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "reserved" | "placed" | "complete" | "failed";
    currency: Currency$4;
    total_price: number;
    items: OrderItem[];
    payments: Payment[];
    refunds: Refund$1[];
    shipping_address?: Record<string, any>;
    billing_address?: Record<string, any>;
    /** @maxLength 24 */
    contact_mobile?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email?: string | null;
    requires_shipping_address?: boolean;
    requires_billing_address?: boolean;
    requires_contact_mobile?: boolean;
    requires_contact_email?: boolean;
    seller: ShortSeller;
    placed: number;
    created: number;
    updated: number;
}
interface ExtendedOrderResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ExtendedOrder;
}
interface ManagerCreateProductCategory {
    categories: string[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateProductOption {
    id: string;
    /** @maxLength 50 */
    name?: string | null;
    values: string[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateProductPrice {
    id: string;
    amount?: number | null;
    currency: string;
    allow_custom_amount?: boolean;
    min_custom_amount?: number | null;
    max_custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateProductVariant {
    id: string;
    voucher_schema?: CreateUpdateVariantVoucherSchema | null;
    /** @maxLength 100 */
    code?: string | null;
    /** @maxLength 50 */
    label?: string | null;
    options: Record<string, any>;
    quantity: number | null;
    tracked?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateProductVariantPrice {
    id: string;
    currency: string;
    amount?: number | null;
    allow_custom_amount?: boolean;
    min_custom_amount?: number | null;
    max_custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateRedemption {
    code: string;
    amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateRefund {
    id: string;
    /** * `rehive` - rehive */
    type?: "rehive";
    amount: number;
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "complete" | "failed";
    item: string;
    /** @min 1 */
    quantity: number;
    /** @maxLength 100 */
    reason?: string | null;
    collection: string | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateSeller {
    id: string;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    owner: string;
    account: string;
    /**
     * * `declined` - Declined
     * * `pending` - Pending
     * * `verified` - Verified
     */
    status: "declined" | "pending" | "verified";
    metadata?: Record<string, any>;
    created: number;
    updated: number;
}
interface ManagerCreateSellerResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ManagerCreateSeller;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateUpdateProduct {
    /** @format uuid */
    id: string;
    /** @maxLength 50 */
    name: string;
    description?: string | null;
    short_description?: string | null;
    prices: ProductPrice[];
    quantity?: number | null;
    tracked?: boolean;
    voucher_schema?: CreateUpdateVoucherSchema | null;
    code?: string | null;
    instant_buy?: boolean;
    supplier?: string | null;
    /** @maxItems 249 */
    countries?: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
    metadata?: Record<string, any>;
    categories: Category[];
    integration?: string | null;
    requires_shipping_address?: boolean;
    requires_billing_address?: boolean;
    requires_contact_mobile?: boolean;
    requires_contact_email?: boolean;
    enabled?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateVoucher {
    /** @format uuid */
    id: string;
    product?: string;
    variant: ProductVariant;
    item?: string;
    /** @maxLength 100 */
    code: string;
    /** @maxLength 64 */
    serial?: string;
    expires?: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateVoucherImport {
    id: string;
    product?: string;
    variant?: string;
    /** @format uri */
    file: string;
    /**
     * * `queued` - Queued
     * * `processing` - Processing
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "queued" | "processing" | "complete" | "failed";
    errors: string[];
}
interface ManagerCreateVoucherImportResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ManagerCreateVoucherImport;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerGetUpdateProductImage {
    id: string;
    /** @format uri */
    file?: string;
    weight?: number;
    created: number;
    updated: number;
}
interface ManagerGetUpdateProductImageResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ManagerGetUpdateProductImage;
}
/** DEPRECATED : Replaced by the ManagerCreateVoucherImportSerializer serializer. */
interface ManagerImportVoucher {
    product?: string;
    variant?: string;
    /** @format uri */
    file: string;
    vouchers: Voucher[];
}
interface ManagerImportVoucherResponse {
    /** @example "success" */
    status?: string;
    /** DEPRECATED : Replaced by the ManagerCreateVoucherImportSerializer serializer. */
    data?: ManagerImportVoucher;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerIntegration {
    id: string;
    /** @maxLength 50 */
    slug: string;
    /** @maxLength 50 */
    name: string;
    /** @maxLength 255 */
    description?: string | null;
    created: number;
    updated: number;
}
interface ManagerIntegrationResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ManagerIntegration;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerIntegrationWebhook {
    id: string;
    /** @format uri */
    url: string;
    /** * `order.item.purchase` - order.item.purchase */
    event: "order.item.purchase";
    /** @maxLength 250 */
    secret?: string;
    created: number;
    updated: number;
}
interface ManagerIntegrationWebhookResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ManagerIntegrationWebhook;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerListCreateProductImage {
    id: string;
    /** @format uri */
    file: string;
    weight?: number;
    created: number;
    updated: number;
}
interface ManagerListCreateProductImageResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ManagerListCreateProductImage;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerPayment {
    id: string;
    /** * `rehive` - rehive */
    type: "rehive";
    amount: number;
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "complete" | "failed";
    collection: string | null;
    created: number;
    updated: number;
}
interface ManagerPaymentResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ManagerPayment;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerProduct {
    /** @format uuid */
    id: string;
    /** @maxLength 50 */
    name: string;
    description: string | null;
    short_description: string | null;
    prices: ProductPrice[];
    options: ProductOption[];
    variants: ProductVariant[];
    quantity: number | null;
    tracked?: boolean;
    code: string | null;
    instant_buy?: boolean;
    voucher_schema: VoucherSchema;
    supplier: string | null;
    /** @maxItems 249 */
    countries?: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
    enabled?: boolean;
    metadata: Record<string, any>;
    images: ProductImage[];
    categories: Category[];
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    integration: ManagerIntegration;
    account: string | null;
    requires_shipping_address?: boolean;
    requires_billing_address?: boolean;
    requires_contact_mobile?: boolean;
    requires_contact_email?: boolean;
    created: number;
    updated: number;
}
interface ManagerProductResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ManagerProduct;
}
interface ManagerQueryVoucher {
    code: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerRefund {
    id: string;
    /** * `rehive` - rehive */
    type: "rehive";
    amount: number;
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "complete" | "failed";
    item: string;
    quantity: number | null;
    reason: string | null;
    collection: string | null;
    created: number;
    updated: number;
}
interface ManagerRefundResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ManagerRefund;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerSeller {
    id: string;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    owner: string;
    account: string;
    /**
     * * `declined` - Declined
     * * `pending` - Pending
     * * `verified` - Verified
     */
    status: "declined" | "pending" | "verified";
    metadata?: Record<string, any>;
    created: number;
    updated: number;
}
interface ManagerSellerResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ManagerSeller;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerUpdateOrder {
    /** @format uuid */
    id: string;
    user: string;
    /**
     * * `pending` - pending
     * * `reserved` - reserved
     * * `placed` - placed
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "reserved" | "placed" | "complete" | "failed";
    currency: Currency$4;
    total_price: number;
    items: OrderItem[];
    shipping_address?: Record<string, any>;
    billing_address?: Record<string, any>;
    /** @maxLength 24 */
    contact_mobile?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email?: string | null;
    placed: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerUpdateOrderItem {
    /**
     * * `processing` - processing
     * * `shipped` - shipped
     * * `fulfilled` - fulfilled
     * * `complete` - complete
     * * `failed` - failed
     */
    status?: "processing" | "shipped" | "fulfilled" | "complete" | "failed" | "" | null;
    /** @maxLength 150 */
    tracking_url?: string | null;
    metadata?: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerUpdateProductOption {
    id: string;
    /** @maxLength 50 */
    name?: string | null;
    values?: string[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerUpdateProductPrice {
    id: string;
    amount?: number | null;
    allow_custom_amount?: boolean;
    min_custom_amount?: number | null;
    max_custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerUpdateProductVariant {
    id: string;
    voucher_schema?: CreateUpdateVariantVoucherSchema | null;
    /** @maxLength 100 */
    code?: string | null;
    /** @maxLength 50 */
    label?: string | null;
    options: Record<string, any>;
    quantity: number | null;
    tracked?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerUpdateProductVariantPrice {
    id: string;
    amount?: number | null;
    allow_custom_amount?: boolean;
    min_custom_amount?: number | null;
    max_custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerUpdateVoucher {
    /** @format uuid */
    id: string;
    product: ShortProduct;
    item: ShortOrderItem;
    /**
     * * `available` - available
     * * `reserved` - reserved
     * * `purchased` - purchased
     * * `redeemed` - redeemed
     * * `partially_redeemed` - partially_redeemed
     */
    status: "available" | "reserved" | "purchased" | "redeemed" | "partially_redeemed";
    code: string;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface MaskedShortVoucher {
    /** @format uuid */
    id: string;
    code: string;
    /**
     * * `available` - available
     * * `reserved` - reserved
     * * `purchased` - purchased
     * * `redeemed` - redeemed
     * * `partially_redeemed` - partially_redeemed
     */
    status: "available" | "reserved" | "purchased" | "redeemed" | "partially_redeemed";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Order {
    /** @format uuid */
    id: string;
    user: string;
    /**
     * * `pending` - pending
     * * `reserved` - reserved
     * * `placed` - placed
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "reserved" | "placed" | "complete" | "failed";
    currency: Currency$4;
    total_price: number;
    shipping_address: Record<string, any>;
    billing_address: Record<string, any>;
    contact_mobile: string | null;
    /** @format email */
    contact_email: string | null;
    requires_shipping_address: boolean;
    requires_billing_address: boolean;
    requires_contact_mobile: boolean;
    requires_contact_email: boolean;
    seller: ShortSeller;
    placed: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface OrderItem {
    /** @format uuid */
    id: string;
    product?: string;
    variant: Record<string, any>;
    code: string | null;
    name: string;
    description: string | null;
    short_description: string | null;
    voucher_schema: VoucherSchema;
    instant_buy: boolean;
    supplier: string | null;
    countries: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
    metadata: Record<string, any>;
    quantity: number | null;
    tracked: boolean;
    price: number;
    total_price: number;
    has_custom_amount: boolean;
    /**
     * * `processing` - processing
     * * `shipped` - shipped
     * * `fulfilled` - fulfilled
     * * `complete` - complete
     * * `failed` - failed
     */
    status?: "processing" | "shipped" | "fulfilled" | "complete" | "failed" | "" | null;
    tracking_url: string | null;
    /** @format uri */
    image: string | null;
    categories?: string[];
    vouchers: ShortVoucher[];
    account: string | null;
    created: number;
    updated: number;
}
interface OrderItemResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: OrderItem;
}
interface OrderResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Order;
}
interface PaginatedAdminCreateVoucherImportList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminCreateVoucherImport[];
}
interface PaginatedAdminCreateVoucherImportListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminCreateVoucherImportList;
}
interface PaginatedAdminIntegrationList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminIntegration[];
}
interface PaginatedAdminIntegrationListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminIntegrationList;
}
interface PaginatedAdminIntegrationWebhookList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminIntegrationWebhook[];
}
interface PaginatedAdminIntegrationWebhookListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminIntegrationWebhookList;
}
interface PaginatedAdminListCreateProductImageList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminListCreateProductImage[];
}
interface PaginatedAdminListCreateProductImageListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminListCreateProductImageList;
}
interface PaginatedAdminPaymentList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminPayment[];
}
interface PaginatedAdminPaymentListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminPaymentList;
}
interface PaginatedAdminProductList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminProduct[];
}
interface PaginatedAdminProductListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminProductList;
}
interface PaginatedAdminRefundList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminRefund$1[];
}
interface PaginatedAdminRefundListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminRefundList;
}
interface PaginatedAdminSellerList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminSeller[];
}
interface PaginatedAdminSellerListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminSellerList;
}
interface PaginatedCategoryList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Category[];
}
interface PaginatedCategoryListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedCategoryList;
}
interface PaginatedCurrencyList$2 {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Currency$4[];
}
interface PaginatedCurrencyListResponse$2 {
    /** @example "success" */
    status?: string;
    data?: PaginatedCurrencyList$2;
}
interface PaginatedManagerCreateVoucherImportList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerCreateVoucherImport[];
}
interface PaginatedManagerCreateVoucherImportListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerCreateVoucherImportList;
}
interface PaginatedManagerIntegrationList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerIntegration[];
}
interface PaginatedManagerIntegrationListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerIntegrationList;
}
interface PaginatedManagerIntegrationWebhookList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerIntegrationWebhook[];
}
interface PaginatedManagerIntegrationWebhookListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerIntegrationWebhookList;
}
interface PaginatedManagerListCreateProductImageList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerListCreateProductImage[];
}
interface PaginatedManagerListCreateProductImageListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerListCreateProductImageList;
}
interface PaginatedManagerPaymentList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerPayment[];
}
interface PaginatedManagerPaymentListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerPaymentList;
}
interface PaginatedManagerProductList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerProduct[];
}
interface PaginatedManagerProductListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerProductList;
}
interface PaginatedManagerRefundList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerRefund[];
}
interface PaginatedManagerRefundListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerRefundList;
}
interface PaginatedManagerSellerList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerSeller[];
}
interface PaginatedManagerSellerListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerSellerList;
}
interface PaginatedOrderItemList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: OrderItem[];
}
interface PaginatedOrderItemListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedOrderItemList;
}
interface PaginatedOrderList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Order[];
}
interface PaginatedOrderListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedOrderList;
}
interface PaginatedPaymentList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Payment[];
}
interface PaginatedPaymentListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedPaymentList;
}
interface PaginatedProductImageList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ProductImage[];
}
interface PaginatedProductImageListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedProductImageList;
}
interface PaginatedProductList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Product[];
}
interface PaginatedProductListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedProductList;
}
interface PaginatedProductOptionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ProductOption[];
}
interface PaginatedProductOptionListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedProductOptionList;
}
interface PaginatedProductPriceList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ProductPrice[];
}
interface PaginatedProductPriceListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedProductPriceList;
}
interface PaginatedProductVariantList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ProductVariant[];
}
interface PaginatedProductVariantListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedProductVariantList;
}
interface PaginatedProductVariantPriceList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ProductVariantPrice[];
}
interface PaginatedProductVariantPriceListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedProductVariantPriceList;
}
interface PaginatedRedemptionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Redemption[];
}
interface PaginatedRedemptionListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedRedemptionList;
}
interface PaginatedRefundList$1 {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Refund$1[];
}
interface PaginatedRefundListResponse$1 {
    /** @example "success" */
    status?: string;
    data?: PaginatedRefundList$1;
}
interface PaginatedSellerList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Seller[];
}
interface PaginatedSellerListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedSellerList;
}
interface PaginatedVoucherActionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: VoucherAction[];
}
interface PaginatedVoucherActionListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedVoucherActionList;
}
interface PaginatedVoucherList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Voucher[];
}
interface PaginatedVoucherListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedVoucherList;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCompany$3 {
    id?: string;
    /** @maxItems 10 */
    manager_groups?: string[] | null;
    name?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCreateCategory {
    /** @format uuid */
    id?: string;
    /** @maxLength 30 */
    name?: string;
    /** @format uuid */
    parent?: string;
    /** @format uri */
    image?: string;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCreateUpdateProduct {
    /** @format uuid */
    id?: string;
    /** @maxLength 50 */
    name?: string;
    description?: string | null;
    short_description?: string | null;
    prices?: ProductPrice[];
    quantity?: number | null;
    tracked?: boolean;
    voucher_schema?: AdminCreateUpdateVoucherSchema | null;
    code?: string | null;
    instant_buy?: boolean;
    supplier?: string | null;
    /** @maxItems 249 */
    countries?: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
    metadata?: Record<string, any>;
    categories?: Category[];
    integration?: string | null;
    seller?: string | null;
    account?: string | null;
    requires_shipping_address?: boolean;
    requires_billing_address?: boolean;
    requires_contact_mobile?: boolean;
    requires_contact_email?: boolean;
    enabled?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminGetUpdateProductImage {
    id?: string;
    /** @format uri */
    file?: string;
    weight?: number;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminIntegration {
    id?: string;
    seller?: ShortSeller;
    /** @maxLength 50 */
    slug?: string;
    /** @maxLength 50 */
    name?: string;
    /** @maxLength 255 */
    description?: string | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminIntegrationWebhook {
    id?: string;
    /** @format uri */
    url?: string;
    /** * `order.item.purchase` - order.item.purchase */
    event?: "order.item.purchase";
    /** @maxLength 250 */
    secret?: string;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminPayment {
    id?: string;
    /** * `rehive` - rehive */
    type?: "rehive";
    amount?: number;
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status?: "pending" | "complete" | "failed";
    collection?: string | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminRefund {
    id?: string;
    /** * `rehive` - rehive */
    type?: "rehive";
    amount?: number;
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status?: "pending" | "complete" | "failed";
    item?: string;
    quantity?: number | null;
    reason?: string | null;
    collection?: string | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminSeller {
    id?: string;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    owner?: string;
    /** @maxLength 30 */
    account?: string;
    /**
     * * `declined` - Declined
     * * `pending` - Pending
     * * `verified` - Verified
     */
    status?: "declined" | "pending" | "verified";
    metadata?: Record<string, any>;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateOrder {
    /** @format uuid */
    id?: string;
    user?: string;
    /**
     * * `pending` - pending
     * * `reserved` - reserved
     * * `placed` - placed
     * * `complete` - complete
     * * `failed` - failed
     */
    status?: "pending" | "reserved" | "placed" | "complete" | "failed";
    currency?: Currency$4;
    total_price?: number;
    items?: OrderItem[];
    shipping_address?: Record<string, any>;
    billing_address?: Record<string, any>;
    /** @maxLength 24 */
    contact_mobile?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email?: string | null;
    placed?: number;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateOrderItem {
    /** @min 0 */
    quantity?: number;
    /**
     * * `processing` - processing
     * * `shipped` - shipped
     * * `fulfilled` - fulfilled
     * * `complete` - complete
     * * `failed` - failed
     */
    status?: "processing" | "shipped" | "fulfilled" | "complete" | "failed" | "" | null;
    /** @maxLength 150 */
    tracking_url?: string | null;
    metadata?: Record<string, any>;
    custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateProductOption {
    id?: string;
    /** @maxLength 50 */
    name?: string | null;
    values?: string[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateProductPrice {
    id?: string;
    amount?: number | null;
    allow_custom_amount?: boolean;
    min_custom_amount?: number | null;
    max_custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateProductVariant {
    id?: string;
    voucher_schema?: CreateUpdateVariantVoucherSchema | null;
    /** @maxLength 100 */
    code?: string | null;
    /** @maxLength 50 */
    label?: string | null;
    options?: Record<string, any>;
    quantity?: number | null;
    tracked?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateProductVariantPrice {
    id?: string;
    amount?: number | null;
    allow_custom_amount?: boolean;
    min_custom_amount?: number | null;
    max_custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateVoucher {
    /** @format uuid */
    id?: string;
    product?: ShortProduct;
    item?: ShortOrderItem;
    /**
     * * `available` - available
     * * `reserved` - reserved
     * * `purchased` - purchased
     * * `redeemed` - redeemed
     * * `partially_redeemed` - partially_redeemed
     */
    status?: "available" | "reserved" | "purchased" | "redeemed" | "partially_redeemed";
    code?: string;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerCreateUpdateProduct {
    /** @format uuid */
    id?: string;
    /** @maxLength 50 */
    name?: string;
    description?: string | null;
    short_description?: string | null;
    prices?: ProductPrice[];
    quantity?: number | null;
    tracked?: boolean;
    voucher_schema?: CreateUpdateVoucherSchema | null;
    code?: string | null;
    instant_buy?: boolean;
    supplier?: string | null;
    /** @maxItems 249 */
    countries?: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
    metadata?: Record<string, any>;
    categories?: Category[];
    integration?: string | null;
    requires_shipping_address?: boolean;
    requires_billing_address?: boolean;
    requires_contact_mobile?: boolean;
    requires_contact_email?: boolean;
    enabled?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerGetUpdateProductImage {
    id?: string;
    /** @format uri */
    file?: string;
    weight?: number;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerIntegration {
    id?: string;
    /** @maxLength 50 */
    slug?: string;
    /** @maxLength 50 */
    name?: string;
    /** @maxLength 255 */
    description?: string | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerIntegrationWebhook {
    id?: string;
    /** @format uri */
    url?: string;
    /** * `order.item.purchase` - order.item.purchase */
    event?: "order.item.purchase";
    /** @maxLength 250 */
    secret?: string;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerPayment {
    id?: string;
    /** * `rehive` - rehive */
    type?: "rehive";
    amount?: number;
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status?: "pending" | "complete" | "failed";
    collection?: string | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerRefund {
    id?: string;
    /** * `rehive` - rehive */
    type?: "rehive";
    amount?: number;
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status?: "pending" | "complete" | "failed";
    item?: string;
    quantity?: number | null;
    reason?: string | null;
    collection?: string | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerSeller {
    id?: string;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    owner?: string;
    account?: string;
    /**
     * * `declined` - Declined
     * * `pending` - Pending
     * * `verified` - Verified
     */
    status?: "declined" | "pending" | "verified";
    metadata?: Record<string, any>;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerUpdateOrder {
    /** @format uuid */
    id?: string;
    user?: string;
    /**
     * * `pending` - pending
     * * `reserved` - reserved
     * * `placed` - placed
     * * `complete` - complete
     * * `failed` - failed
     */
    status?: "pending" | "reserved" | "placed" | "complete" | "failed";
    currency?: Currency$4;
    total_price?: number;
    items?: OrderItem[];
    shipping_address?: Record<string, any>;
    billing_address?: Record<string, any>;
    /** @maxLength 24 */
    contact_mobile?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email?: string | null;
    placed?: number;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerUpdateOrderItem {
    /**
     * * `processing` - processing
     * * `shipped` - shipped
     * * `fulfilled` - fulfilled
     * * `complete` - complete
     * * `failed` - failed
     */
    status?: "processing" | "shipped" | "fulfilled" | "complete" | "failed" | "" | null;
    /** @maxLength 150 */
    tracking_url?: string | null;
    metadata?: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerUpdateProductOption {
    id?: string;
    /** @maxLength 50 */
    name?: string | null;
    values?: string[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerUpdateProductPrice {
    id?: string;
    amount?: number | null;
    allow_custom_amount?: boolean;
    min_custom_amount?: number | null;
    max_custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerUpdateProductVariant {
    id?: string;
    voucher_schema?: CreateUpdateVariantVoucherSchema | null;
    /** @maxLength 100 */
    code?: string | null;
    /** @maxLength 50 */
    label?: string | null;
    options?: Record<string, any>;
    quantity?: number | null;
    tracked?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerUpdateProductVariantPrice {
    id?: string;
    amount?: number | null;
    allow_custom_amount?: boolean;
    min_custom_amount?: number | null;
    max_custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerUpdateVoucher {
    /** @format uuid */
    id?: string;
    product?: ShortProduct;
    item?: ShortOrderItem;
    /**
     * * `available` - available
     * * `reserved` - reserved
     * * `purchased` - purchased
     * * `redeemed` - redeemed
     * * `partially_redeemed` - partially_redeemed
     */
    status?: "available" | "reserved" | "purchased" | "redeemed" | "partially_redeemed";
    code?: string;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedUserUpdateOrder {
    /** @format uuid */
    id?: string;
    user?: string;
    /**
     * * `pending` - pending
     * * `reserved` - reserved
     * * `placed` - placed
     * * `complete` - complete
     * * `failed` - failed
     */
    status?: "pending" | "reserved" | "placed" | "complete" | "failed";
    currency?: Currency$4;
    total_price?: number;
    items?: OrderItem[];
    shipping_address?: Record<string, any>;
    billing_address?: Record<string, any>;
    /** @maxLength 24 */
    contact_mobile?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email?: string | null;
    placed?: number;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedUserUpdateOrderItem {
    /** @min 0 */
    quantity?: number;
    /**
     * * `processing` - processing
     * * `shipped` - shipped
     * * `fulfilled` - fulfilled
     * * `complete` - complete
     * * `failed` - failed
     */
    status?: "processing" | "shipped" | "fulfilled" | "complete" | "failed" | "" | null;
    custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Payment {
    id: string;
    /** * `rehive` - rehive */
    type: "rehive";
    amount: number;
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "complete" | "failed";
    collection: string | null;
    created: number;
    updated: number;
}
interface PaymentResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Payment;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Product {
    /** @format uuid */
    id: string;
    /** @maxLength 50 */
    name: string;
    description: string | null;
    short_description: string | null;
    prices: ProductPrice[];
    quantity: number | null;
    tracked?: boolean;
    options: ProductOption[];
    variants: ProductVariant[];
    seller: ShortSeller;
    voucher_schema: VoucherSchema;
    code: string | null;
    instant_buy?: boolean;
    supplier: string | null;
    /** @maxItems 249 */
    countries?: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")[];
    metadata: Record<string, any>;
    images: ProductImage[];
    categories: Category[];
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ProductImage {
    id: string;
    /** @format uri */
    file: string;
    /**
     * @min 0
     * @max 2147483647
     */
    weight: number;
    created: number;
    updated: number;
}
interface ProductImageResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ProductImage;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ProductOption {
    id: string;
    name: string | null;
    values: any[];
}
interface ProductOptionResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ProductOption;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ProductPrice {
    id: string;
    amount: number;
    currency: Currency$4;
    allow_custom_amount: boolean;
    min_custom_amount: number;
    max_custom_amount: number;
}
interface ProductPriceResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ProductPrice;
}
interface ProductResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Product;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ProductVariant {
    id: string;
    voucher_schema: VariantVoucherSchema;
    code: string | null;
    label: string | null;
    options: Record<string, any>;
    quantity: number | null;
    tracked: boolean;
    prices: ProductVariantPrice[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ProductVariantPrice {
    id: string;
    amount: number;
    currency: Currency$4;
    allow_custom_amount: boolean;
    min_custom_amount: number;
    max_custom_amount: number;
}
interface ProductVariantPriceResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ProductVariantPrice;
}
interface ProductVariantResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ProductVariant;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Redemption {
    id: string;
    /**
     * * `claim` - claim
     * * `fund` - fund
     * * `defund` - defund
     */
    type: "claim" | "fund" | "defund";
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "complete" | "failed";
    voucher: MaskedShortVoucher;
    user: string;
    code: string | null;
    amount: number;
    collection: string | null;
    created: number;
    updated: number;
}
interface RedemptionResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Redemption;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Refund$1 {
    id: string;
    /** * `rehive` - rehive */
    type: "rehive";
    amount: number;
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "complete" | "failed";
    item: string;
    quantity: number | null;
    reason: string | null;
    collection: string | null;
    created: number;
    updated: number;
}
interface RefundResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Refund$1;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Seller {
    id: string;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /**
     * * `declined` - Declined
     * * `pending` - Pending
     * * `verified` - Verified
     */
    status: "declined" | "pending" | "verified";
    metadata: Record<string, any>;
    created: number;
    updated: number;
}
interface SellerResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Seller;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ShortOrderItem {
    /** @format uuid */
    id: string;
    name: string;
    price: number;
    total_price: number;
    has_custom_amount: boolean;
    voucher_schema: VoucherSchema;
    code: string | null;
    /**
     * * `processing` - processing
     * * `shipped` - shipped
     * * `fulfilled` - fulfilled
     * * `complete` - complete
     * * `failed` - failed
     */
    status?: "processing" | "shipped" | "fulfilled" | "complete" | "failed" | "" | null;
    tracking_url: string | null;
    /** @format uri */
    image: string | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ShortProduct {
    /** @format uuid */
    id: string;
    name: string;
    voucher_schema: VoucherSchema;
    code: string | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ShortSeller {
    id: string;
    name: string | null;
    description: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ShortVoucher {
    /** @format uuid */
    id: string;
    code: string;
    /**
     * * `available` - available
     * * `reserved` - reserved
     * * `purchased` - purchased
     * * `redeemed` - redeemed
     * * `partially_redeemed` - partially_redeemed
     */
    status: "available" | "reserved" | "purchased" | "redeemed" | "partially_redeemed";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserCreateOrder {
    /** @format uuid */
    id: string;
    currency: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserCreateOrderItem {
    product: string;
    /** @min 1 */
    quantity: number;
    variant?: string | null;
    metadata?: Record<string, any>;
    custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserCreateRedemption {
    code: string;
    amount?: number | null;
}
interface UserQueryVoucher {
    code: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserUpdateOrder {
    /** @format uuid */
    id: string;
    user: string;
    /**
     * * `pending` - pending
     * * `reserved` - reserved
     * * `placed` - placed
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "reserved" | "placed" | "complete" | "failed";
    currency: Currency$4;
    total_price: number;
    items: OrderItem[];
    shipping_address?: Record<string, any>;
    billing_address?: Record<string, any>;
    /** @maxLength 24 */
    contact_mobile?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email?: string | null;
    placed: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserUpdateOrderItem {
    /** @min 0 */
    quantity: number;
    /**
     * * `processing` - processing
     * * `shipped` - shipped
     * * `fulfilled` - fulfilled
     * * `complete` - complete
     * * `failed` - failed
     */
    status?: "processing" | "shipped" | "fulfilled" | "complete" | "failed" | "" | null;
    custom_amount?: number | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface VariantVoucherSchema {
    amount: number;
    currency: Currency$4;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Voucher {
    /** @format uuid */
    id: string;
    product: ShortProduct;
    variant: ProductVariant;
    item: ShortOrderItem;
    order: Order;
    /**
     * * `available` - available
     * * `reserved` - reserved
     * * `purchased` - purchased
     * * `redeemed` - redeemed
     * * `partially_redeemed` - partially_redeemed
     */
    status: "available" | "reserved" | "purchased" | "redeemed" | "partially_redeemed";
    code: string;
    account: string | null;
    serial: string | null;
    expires: number;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface VoucherAction {
    /** @format uuid */
    id: string;
    /**
     * * `claim` - claim
     * * `fund` - fund
     * * `defund` - defund
     */
    type: "claim" | "fund" | "defund";
    /**
     * * `pending` - pending
     * * `complete` - complete
     * * `failed` - failed
     */
    status: "pending" | "complete" | "failed";
    code: string | null;
    amount: number;
    collection: string | null;
    created: number;
    updated: number;
}
interface VoucherActionResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: VoucherAction;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface VoucherImport {
    id: string;
    product: ShortProduct;
    variant: ProductVariant;
    /** @format uri */
    file: string;
    /**
     * * `queued` - Queued
     * * `processing` - Processing
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "queued" | "processing" | "complete" | "failed";
    errors: string[];
}
interface VoucherImportResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: VoucherImport;
}
interface VoucherResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Voucher;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface VoucherSchema {
    /**
     * * `static` - static
     * * `balance` - balance
     */
    type: "static" | "balance";
    /**
     * * `manual` - manual
     * * `automatic` - automatic
     * * `integration` - integration
     */
    creation_type: "manual" | "automatic" | "integration";
    redeemer_users: string[] | null;
    redeemer_groups: string[] | null;
    /**
     * * `raw` - raw
     * * `qr` - qr
     * * `bar` - bar
     */
    display_format: "raw" | "qr" | "bar";
    amount: number;
    currency: Currency$4;
    source_account: string | null;
    lifespan: number;
    /**
     * * `seconds` - Seconds
     * * `minutes` - Minutes
     * * `hours` - Hours
     * * `days` - Days
     * * `weeks` - Weeks
     * * `months` - Months
     * * `years` - Years
     */
    lifespan_unit: "seconds" | "minutes" | "hours" | "days" | "weeks" | "months" | "years";
}
interface Webhook$4 {
    id: string;
    /**
     * * `currency.create` - currency.create
     * * `currency.update` - currency.update
     * * `transaction.execute` - transaction.execute
     */
    event: "currency.create" | "currency.update" | "transaction.execute";
    company: string;
    data: Record<string, any>;
}
interface AdminCategoriesListParams {
    /** @format uuid */
    id?: string;
    name?: string;
    name__contains?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    parent?: string;
    parent__isnull?: string;
}
interface AdminCurrenciesListParams$3 {
    code?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminIntegrationsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminIntegrationsWebhooksListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
}
interface AdminOrdersListParams {
    categories?: string;
    created?: string;
    created__gt?: string;
    created__lt?: string;
    currency?: string;
    /** @format uuid */
    id?: string;
    items__status?: string;
    /**
     * Ordering
     *
     * * `created` - Created
     * * `-created` - Created (descending)
     * * `updated` - Updated
     * * `-updated` - Updated (descending)
     */
    orderby?: ("-created" | "-updated" | "created" | "updated")[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    placed?: string;
    placed__gt?: string;
    placed__lt?: string;
    seller?: string;
    status?: string;
    statuses?: string;
    total_price?: string;
    updated?: string;
    updated__gt?: string;
    updated__lt?: string;
    user?: string;
}
interface AdminOrdersItemsListParams {
    categories?: string;
    code?: string;
    countries?: string;
    /** @format uuid */
    id?: string;
    name?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @format uuid */
    product?: string;
    quantity?: number;
    supplier?: string;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
}
interface AdminOrdersPaymentsListParams {
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
    type?: string;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
}
interface AdminOrdersRefundsListParams {
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
    type?: string;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
}
interface AdminProductsListParams {
    categories?: string;
    code?: string;
    countries?: string;
    currency?: string;
    enabled?: boolean;
    /** @format uuid */
    id?: string;
    name?: string;
    name__contains?: string;
    /**
     * Ordering
     *
     * * `created` - Created
     * * `-created` - Created (descending)
     * * `updated` - Updated
     * * `-updated` - Updated (descending)
     */
    orderby?: ("-created" | "-updated" | "created" | "updated")[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    quantity?: number;
    quantity__gt?: number;
    quantity__lt?: number;
    seller?: string;
    seller__isnull?: string;
    supplier?: string;
}
interface AdminProductsCategoriesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
}
interface AdminProductsOptionsListParams {
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
}
interface AdminProductsPricesListParams {
    currency?: string;
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
}
interface AdminProductsVariantsListParams {
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
}
interface AdminProductsImagesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    productId: string;
}
interface AdminProductsVariantsPricesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    productId: string;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    variantId: string;
}
interface AdminRedemptionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminSellersListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
}
interface AdminVoucherImportsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminVouchersListParams {
    code?: string;
    /** @format uuid */
    id?: string;
    /** @format uuid */
    item?: string;
    item__isnull?: string;
    /** @format uuid */
    order?: string;
    order__created?: string;
    order__created__gt?: string;
    order__created__lt?: string;
    order__isnull?: string;
    order__placed?: string;
    order__placed__gt?: string;
    order__placed__lt?: string;
    order__updated?: string;
    order__updated__gt?: string;
    order__updated__lt?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @format uuid */
    product?: string;
    status?: string;
}
interface AdminVouchersActionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
}
interface ManagerCategoriesListParams {
    /** @format uuid */
    id?: string;
    name?: string;
    name__contains?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    parent?: string;
    parent__isnull?: string;
}
interface ManagerCurrenciesListParams {
    code?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface ManagerSellersListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface ManagerSellersIntegrationsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-z0-9\_]+)$ */
    identifier: string;
}
interface ManagerSellersIntegrationsWebhooksListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
    /** @pattern ^([a-z0-9\_]+)$ */
    sellerId: string;
}
interface ManagerSellersOrdersListParams {
    categories?: string;
    created?: string;
    created__gt?: string;
    created__lt?: string;
    currency?: string;
    /** @format uuid */
    id?: string;
    items__status?: string;
    /**
     * Ordering
     *
     * * `created` - Created
     * * `-created` - Created (descending)
     * * `updated` - Updated
     * * `-updated` - Updated (descending)
     */
    orderby?: ("-created" | "-updated" | "created" | "updated")[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    placed?: string;
    placed__gt?: string;
    placed__lt?: string;
    status?: string;
    statuses?: string;
    total_price?: string;
    updated?: string;
    updated__gt?: string;
    updated__lt?: string;
    user?: string;
    /** @pattern ^([a-z0-9\_]+)$ */
    sellerId: string;
}
interface ManagerSellersOrdersItemsListParams {
    categories?: string;
    code?: string;
    countries?: string;
    /** @format uuid */
    id?: string;
    name?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @format uuid */
    product?: string;
    quantity?: number;
    supplier?: string;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
    /** @pattern ^([a-z0-9\_]+)$ */
    sellerId: string;
}
interface ManagerSellersOrdersPaymentsListParams {
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
    type?: string;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
    /** @pattern ^([a-z0-9\_]+)$ */
    sellerId: string;
}
interface ManagerSellersOrdersRefundsListParams {
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
    type?: string;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
    /** @pattern ^([a-z0-9\_]+)$ */
    sellerId: string;
}
interface ManagerSellersProductsListParams {
    categories?: string;
    code?: string;
    countries?: string;
    currency?: string;
    enabled?: boolean;
    /** @format uuid */
    id?: string;
    name?: string;
    name__contains?: string;
    /**
     * Ordering
     *
     * * `created` - Created
     * * `-created` - Created (descending)
     * * `updated` - Updated
     * * `-updated` - Updated (descending)
     */
    orderby?: ("-created" | "-updated" | "created" | "updated")[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    quantity?: number;
    quantity__gt?: number;
    quantity__lt?: number;
    seller?: string;
    seller__isnull?: string;
    supplier?: string;
    /** @pattern ^([a-z0-9\_]+)$ */
    sellerId: string;
}
interface ManagerSellersProductsCategoriesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
    /** @pattern ^([a-z0-9\_]+)$ */
    sellerId: string;
}
interface ManagerSellersProductsOptionsListParams {
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
    /** @pattern ^\w+$ */
    sellerId: string;
}
interface ManagerSellersProductsPricesListParams {
    currency?: string;
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
    /** @pattern ^([a-z0-9\_]+)$ */
    sellerId: string;
}
interface ManagerSellersProductsVariantsListParams {
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
    /** @pattern ^([a-z0-9\_]+)$ */
    sellerId: string;
}
interface ManagerSellersProductsImagesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    productId: string;
    /** @pattern ^([a-z0-9\_]+)$ */
    sellerId: string;
}
interface ManagerSellersProductsVariantsPricesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    productId: string;
    /** @pattern ^([a-z0-9\_]+)$ */
    sellerId: string;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    variantId: string;
}
interface ManagerSellersRedemptionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-z0-9\_]+)$ */
    sellerId: string;
}
interface ManagerSellersVoucherImportsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-z0-9\_]+)$ */
    sellerId: string;
}
interface ManagerSellersVouchersListParams {
    code?: string;
    /** @format uuid */
    id?: string;
    /** @format uuid */
    item?: string;
    item__isnull?: string;
    /** @format uuid */
    order?: string;
    order__created?: string;
    order__created__gt?: string;
    order__created__lt?: string;
    order__isnull?: string;
    order__placed?: string;
    order__placed__gt?: string;
    order__placed__lt?: string;
    order__updated?: string;
    order__updated__gt?: string;
    order__updated__lt?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @format uuid */
    product?: string;
    status?: string;
    /** @pattern ^([a-z0-9\_]+)$ */
    sellerId: string;
}
interface ManagerSellersVouchersActionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-z0-9\_]+)$ */
    sellerId: string;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    voucherId: string;
}
interface UserCategoriesListParams {
    /** @format uuid */
    id?: string;
    name?: string;
    name__contains?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    parent?: string;
    parent__isnull?: string;
}
interface UserOrdersListParams {
    categories?: string;
    created?: string;
    created__gt?: string;
    created__lt?: string;
    currency?: string;
    /** @format uuid */
    id?: string;
    items__status?: string;
    /**
     * Ordering
     *
     * * `created` - Created
     * * `-created` - Created (descending)
     * * `updated` - Updated
     * * `-updated` - Updated (descending)
     */
    orderby?: ("-created" | "-updated" | "created" | "updated")[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    placed?: string;
    placed__gt?: string;
    placed__lt?: string;
    status?: string;
    statuses?: string;
    total_price?: string;
    updated?: string;
    updated__gt?: string;
    updated__lt?: string;
}
interface UserOrdersItemsListParams {
    categories?: string;
    code?: string;
    countries?: string;
    /** @format uuid */
    id?: string;
    name?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @format uuid */
    product?: string;
    quantity?: number;
    supplier?: string;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
}
interface UserOrdersPaymentsListParams {
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
    type?: string;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
}
interface UserOrdersRefundsListParams {
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
    type?: string;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
}
interface UserProductsListParams {
    categories?: string;
    code?: string;
    countries?: string;
    currency?: string;
    enabled?: boolean;
    /** @format uuid */
    id?: string;
    name?: string;
    name__contains?: string;
    /**
     * Ordering
     *
     * * `created` - Created
     * * `-created` - Created (descending)
     * * `updated` - Updated
     * * `-updated` - Updated (descending)
     */
    orderby?: ("-created" | "-updated" | "created" | "updated")[];
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    quantity?: number;
    quantity__gt?: number;
    quantity__lt?: number;
    seller?: string;
    seller__isnull?: string;
    supplier?: string;
}
interface UserProductsPricesListParams {
    currency?: string;
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
}
interface UserProductsVariantsListParams {
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
}
interface UserProductsImagesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    productId: string;
}
interface UserRedemptionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface UserSellersListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface UserVouchersListParams {
    code?: string;
    /** @format uuid */
    id?: string;
    /** @format uuid */
    item?: string;
    item__isnull?: string;
    /** @format uuid */
    order?: string;
    order__created?: string;
    order__created__gt?: string;
    order__created__lt?: string;
    order__isnull?: string;
    order__placed?: string;
    order__placed__gt?: string;
    order__placed__lt?: string;
    order__updated?: string;
    order__updated__gt?: string;
    order__updated__lt?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @format uuid */
    product?: string;
    status?: string;
}
interface UserVouchersActionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
    identifier: string;
}
type QueryParamsType$6 = Record<string | number, any>;
type ResponseFormat$6 = keyof Omit<Body, "body" | "bodyUsed">;
interface FullRequestParams$6 extends Omit<RequestInit, "body"> {
    /** set parameter to `true` for call `securityWorker` for this request */
    secure?: boolean;
    /** request path */
    path: string;
    /** content type of request body */
    type?: ContentType$6;
    /** query params */
    query?: QueryParamsType$6;
    /** format of response (i.e. response.json() -> format: "json") */
    format?: ResponseFormat$6;
    /** request body */
    body?: unknown;
    /** base url */
    baseUrl?: string;
    /** request cancellation token */
    cancelToken?: CancelToken$6;
}
type RequestParams$7 = Omit<FullRequestParams$6, "body" | "method" | "query" | "path">;
interface ApiConfig$6<SecurityDataType = unknown> {
    baseUrl?: string;
    baseApiParams?: Omit<RequestParams$7, "baseUrl" | "cancelToken" | "signal">;
    securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams$7 | void> | RequestParams$7 | void;
    customFetch?: typeof fetch;
}
interface HttpResponse$6<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}
type CancelToken$6 = Symbol | string | number;
declare enum ContentType$6 {
    Json = "application/json",
    JsonApi = "application/vnd.api+json",
    FormData = "multipart/form-data",
    UrlEncoded = "application/x-www-form-urlencoded",
    Text = "text/plain"
}
declare class HttpClient$6<SecurityDataType = unknown> {
    baseUrl: string;
    private securityData;
    private securityWorker?;
    private abortControllers;
    private customFetch;
    private baseApiParams;
    constructor(apiConfig?: ApiConfig$6<SecurityDataType>);
    setSecurityData: (data: SecurityDataType | null) => void;
    protected encodeQueryParam(key: string, value: any): string;
    protected addQueryParam(query: QueryParamsType$6, key: string): string;
    protected addArrayQueryParam(query: QueryParamsType$6, key: string): any;
    protected toQueryString(rawQuery?: QueryParamsType$6): string;
    protected addQueryParams(rawQuery?: QueryParamsType$6): string;
    private contentFormatters;
    protected mergeRequestParams(params1: RequestParams$7, params2?: RequestParams$7): RequestParams$7;
    protected createAbortSignal: (cancelToken: CancelToken$6) => AbortSignal | undefined;
    abortRequest: (cancelToken: CancelToken$6) => void;
    request: <T = any, E = any>({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }: FullRequestParams$6) => Promise<HttpResponse$6<T, E>>;
}
/**
 * @title Product Service API
 * @version 1 (1)
 * @termsOfService https://rehive.com/terms/
 * @baseUrl https://product.services.rehive.com/api/
 * @externalDocs https://docs.rehive.com
 * @contact Rehive Support <support@rehive.com> (https://rehive.com/support/)
 *
 *
 * The **Product Service API** is used for product and order management in Rehive.
 *
 */
declare class Api$7<SecurityDataType extends unknown> extends HttpClient$6<SecurityDataType> {
    activate: {
        /**
         * No description
         *
         * @tags activate
         * @name ActivateCreate
         * @summary Activate service
         * @request POST:/activate/
         * @secure
         */
        activateCreate: (data: Activate$7, params?: RequestParams$7) => Promise<HttpResponse$6<ActionResponse$5, any>>;
    };
    admin: {
        /**
         * No description
         *
         * @tags admin
         * @name AdminCategoriesList
         * @summary List categories
         * @request GET:/admin/categories/
         * @secure
         */
        adminCategoriesList: (query: AdminCategoriesListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedCategoryListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCategoriesCreate
         * @summary Create category
         * @request POST:/admin/categories/
         * @secure
         */
        adminCategoriesCreate: (data: AdminCreateCategory, params?: RequestParams$7) => Promise<HttpResponse$6<CategoryResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCategoriesRetrieve
         * @summary Retrieve category
         * @request GET:/admin/categories/{identifier}/
         * @secure
         */
        adminCategoriesRetrieve: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<CategoryResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCategoriesUpdate
         * @summary Update category
         * @request PUT:/admin/categories/{identifier}/
         * @secure
         */
        adminCategoriesUpdate: (identifier: string, data: AdminCreateCategory, params?: RequestParams$7) => Promise<HttpResponse$6<CategoryResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCategoriesPartialUpdate
         * @summary Partially update category
         * @request PATCH:/admin/categories/{identifier}/
         * @secure
         */
        adminCategoriesPartialUpdate: (identifier: string, data: PatchedAdminCreateCategory, params?: RequestParams$7) => Promise<HttpResponse$6<CategoryResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCategoriesDestroy
         * @summary Delete category
         * @request DELETE:/admin/categories/{identifier}/
         * @secure
         */
        adminCategoriesDestroy: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<CategoryResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyRetrieve
         * @summary Retrieve company
         * @request GET:/admin/company/
         * @secure
         */
        adminCompanyRetrieve: (params?: RequestParams$7) => Promise<HttpResponse$6<AdminCompanyResponse$5, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyUpdate
         * @summary Update company
         * @request PUT:/admin/company/
         * @secure
         */
        adminCompanyUpdate: (data: AdminCompany$5, params?: RequestParams$7) => Promise<HttpResponse$6<AdminCompanyResponse$5, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyPartialUpdate
         * @summary Partially update company
         * @request PATCH:/admin/company/
         * @secure
         */
        adminCompanyPartialUpdate: (data: PatchedAdminCompany$3, params?: RequestParams$7) => Promise<HttpResponse$6<AdminCompanyResponse$5, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCurrenciesList
         * @summary List currencies
         * @request GET:/admin/currencies/
         * @secure
         */
        adminCurrenciesList: (query: AdminCurrenciesListParams$3, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedCurrencyListResponse$2, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCurrenciesRetrieve
         * @summary Retrieve currency
         * @request GET:/admin/currencies/{code}/
         * @secure
         */
        adminCurrenciesRetrieve: (code: string, params?: RequestParams$7) => Promise<HttpResponse$6<CurrencyResponse$2, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsList
         * @summary List integrations
         * @request GET:/admin/integrations/
         * @secure
         */
        adminIntegrationsList: (query: AdminIntegrationsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedAdminIntegrationListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsCreate
         * @summary Create integration
         * @request POST:/admin/integrations/
         * @secure
         */
        adminIntegrationsCreate: (data: AdminIntegration, params?: RequestParams$7) => Promise<HttpResponse$6<AdminIntegrationResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsRetrieve
         * @summary Retrieve integration
         * @request GET:/admin/integrations/{identifier}/
         * @secure
         */
        adminIntegrationsRetrieve: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<AdminIntegrationResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsUpdate
         * @summary Update integration
         * @request PUT:/admin/integrations/{identifier}/
         * @secure
         */
        adminIntegrationsUpdate: (identifier: string, data: AdminIntegration, params?: RequestParams$7) => Promise<HttpResponse$6<AdminIntegrationResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsPartialUpdate
         * @summary Partially update integration
         * @request PATCH:/admin/integrations/{identifier}/
         * @secure
         */
        adminIntegrationsPartialUpdate: (identifier: string, data: PatchedAdminIntegration, params?: RequestParams$7) => Promise<HttpResponse$6<AdminIntegrationResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsDestroy
         * @summary Delete integration
         * @request DELETE:/admin/integrations/{identifier}/
         * @secure
         */
        adminIntegrationsDestroy: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<AdminIntegrationResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsWebhooksList
         * @summary List integration webhooks
         * @request GET:/admin/integrations/{identifier}/webhooks/
         * @secure
         */
        adminIntegrationsWebhooksList: ({ identifier, ...query }: AdminIntegrationsWebhooksListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedAdminIntegrationWebhookListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsWebhooksCreate
         * @summary Create integration webhook
         * @request POST:/admin/integrations/{identifier}/webhooks/
         * @secure
         */
        adminIntegrationsWebhooksCreate: (identifier: string, data: AdminIntegrationWebhook, params?: RequestParams$7) => Promise<HttpResponse$6<AdminIntegrationWebhookResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsWebhooksRetrieve
         * @summary Retrieve integration webhook
         * @request GET:/admin/integrations/{integration_id}/webhooks{webhook_id}/
         * @secure
         */
        adminIntegrationsWebhooksRetrieve: (integrationId: string, webhookId: string, params?: RequestParams$7) => Promise<HttpResponse$6<AdminIntegrationWebhookResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsWebhooksUpdate
         * @summary Update integration webhook
         * @request PUT:/admin/integrations/{integration_id}/webhooks{webhook_id}/
         * @secure
         */
        adminIntegrationsWebhooksUpdate: (integrationId: string, webhookId: string, data: AdminIntegrationWebhook, params?: RequestParams$7) => Promise<HttpResponse$6<AdminIntegrationWebhookResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsWebhooksPartialUpdate
         * @summary Partially update integration webhook
         * @request PATCH:/admin/integrations/{integration_id}/webhooks{webhook_id}/
         * @secure
         */
        adminIntegrationsWebhooksPartialUpdate: (integrationId: string, webhookId: string, data: PatchedAdminIntegrationWebhook, params?: RequestParams$7) => Promise<HttpResponse$6<AdminIntegrationWebhookResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIntegrationsWebhooksDestroy
         * @summary Delete integration webhook
         * @request DELETE:/admin/integrations/{integration_id}/webhooks{webhook_id}/
         * @secure
         */
        adminIntegrationsWebhooksDestroy: (integrationId: string, webhookId: string, params?: RequestParams$7) => Promise<HttpResponse$6<AdminIntegrationWebhookResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersList
         * @summary List orders
         * @request GET:/admin/orders/
         * @secure
         */
        adminOrdersList: (query: AdminOrdersListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedOrderListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersCreate
         * @summary Create order
         * @request POST:/admin/orders/
         * @secure
         */
        adminOrdersCreate: (data: AdminCreateOrder, params?: RequestParams$7) => Promise<HttpResponse$6<OrderResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersRetrieve
         * @summary Retrieve order
         * @request GET:/admin/orders/{identifier}/
         * @secure
         */
        adminOrdersRetrieve: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<ExtendedOrderResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersUpdate
         * @summary Update order
         * @request PUT:/admin/orders/{identifier}/
         * @secure
         */
        adminOrdersUpdate: (identifier: string, data: AdminUpdateOrder, params?: RequestParams$7) => Promise<HttpResponse$6<ExtendedOrderResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersPartialUpdate
         * @summary Partially update order
         * @request PATCH:/admin/orders/{identifier}/
         * @secure
         */
        adminOrdersPartialUpdate: (identifier: string, data: PatchedAdminUpdateOrder, params?: RequestParams$7) => Promise<HttpResponse$6<ExtendedOrderResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersDestroy
         * @summary Delete order
         * @request DELETE:/admin/orders/{identifier}/
         * @secure
         */
        adminOrdersDestroy: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<ExtendedOrderResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersItemsList
         * @summary List order items
         * @request GET:/admin/orders/{identifier}/items/
         * @secure
         */
        adminOrdersItemsList: ({ identifier, ...query }: AdminOrdersItemsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedOrderItemListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersItemsCreate
         * @summary Create order item
         * @request POST:/admin/orders/{identifier}/items/
         * @secure
         */
        adminOrdersItemsCreate: (identifier: string, data: AdminCreateOrderItem, params?: RequestParams$7) => Promise<HttpResponse$6<OrderItemResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersPaymentsList
         * @summary List payments
         * @request GET:/admin/orders/{identifier}/payments/
         * @secure
         */
        adminOrdersPaymentsList: ({ identifier, ...query }: AdminOrdersPaymentsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedAdminPaymentListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersPaymentsCreate
         * @summary Create payment
         * @request POST:/admin/orders/{identifier}/payments/
         * @secure
         */
        adminOrdersPaymentsCreate: (identifier: string, data: AdminCreatePayment, params?: RequestParams$7) => Promise<HttpResponse$6<AdminPaymentResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersRefundsList
         * @summary List refunds
         * @request GET:/admin/orders/{identifier}/refunds/
         * @secure
         */
        adminOrdersRefundsList: ({ identifier, ...query }: AdminOrdersRefundsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedAdminRefundListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersRefundsCreate
         * @summary Create refund
         * @request POST:/admin/orders/{identifier}/refunds/
         * @secure
         */
        adminOrdersRefundsCreate: (identifier: string, data: AdminCreateRefund, params?: RequestParams$7) => Promise<HttpResponse$6<AdminRefundResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersItemsRetrieve
         * @summary Retrieve order item
         * @request GET:/admin/orders/{order_id}/items/{item_id}/
         * @secure
         */
        adminOrdersItemsRetrieve: (itemId: string, orderId: string, params?: RequestParams$7) => Promise<HttpResponse$6<OrderItemResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersItemsUpdate
         * @summary Update order item
         * @request PUT:/admin/orders/{order_id}/items/{item_id}/
         * @secure
         */
        adminOrdersItemsUpdate: (itemId: string, orderId: string, data: AdminUpdateOrderItem, params?: RequestParams$7) => Promise<HttpResponse$6<OrderItemResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersItemsPartialUpdate
         * @summary Partially update order item
         * @request PATCH:/admin/orders/{order_id}/items/{item_id}/
         * @secure
         */
        adminOrdersItemsPartialUpdate: (itemId: string, orderId: string, data: PatchedAdminUpdateOrderItem, params?: RequestParams$7) => Promise<HttpResponse$6<OrderItemResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersItemsDestroy
         * @summary Delete order item
         * @request DELETE:/admin/orders/{order_id}/items/{item_id}/
         * @secure
         */
        adminOrdersItemsDestroy: (itemId: string, orderId: string, params?: RequestParams$7) => Promise<HttpResponse$6<OrderItemResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersPaymentsRetrieve
         * @summary Retrieve payment
         * @request GET:/admin/orders/{order_id}/payments/{payment_id}/
         * @secure
         */
        adminOrdersPaymentsRetrieve: (orderId: string, paymentId: string, params?: RequestParams$7) => Promise<HttpResponse$6<AdminPaymentResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersPaymentsUpdate
         * @summary Update payment
         * @request PUT:/admin/orders/{order_id}/payments/{payment_id}/
         * @secure
         */
        adminOrdersPaymentsUpdate: (orderId: string, paymentId: string, data: AdminPayment, params?: RequestParams$7) => Promise<HttpResponse$6<AdminPaymentResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersPaymentsPartialUpdate
         * @summary Partially update payment
         * @request PATCH:/admin/orders/{order_id}/payments/{payment_id}/
         * @secure
         */
        adminOrdersPaymentsPartialUpdate: (orderId: string, paymentId: string, data: PatchedAdminPayment, params?: RequestParams$7) => Promise<HttpResponse$6<AdminPaymentResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersRefundsRetrieve
         * @summary Retrieve refund
         * @request GET:/admin/orders/{order_id}/refunds/{refund_id}/
         * @secure
         */
        adminOrdersRefundsRetrieve: (orderId: string, refundId: string, params?: RequestParams$7) => Promise<HttpResponse$6<AdminRefundResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersRefundsUpdate
         * @summary Update refund
         * @request PUT:/admin/orders/{order_id}/refunds/{refund_id}/
         * @secure
         */
        adminOrdersRefundsUpdate: (orderId: string, refundId: string, data: AdminRefund$1, params?: RequestParams$7) => Promise<HttpResponse$6<AdminRefundResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminOrdersRefundsPartialUpdate
         * @summary Partially update refund
         * @request PATCH:/admin/orders/{order_id}/refunds/{refund_id}/
         * @secure
         */
        adminOrdersRefundsPartialUpdate: (orderId: string, refundId: string, data: PatchedAdminRefund, params?: RequestParams$7) => Promise<HttpResponse$6<AdminRefundResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsList
         * @summary List products
         * @request GET:/admin/products/
         * @secure
         */
        adminProductsList: (query: AdminProductsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedAdminProductListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsCreate
         * @summary Create product
         * @request POST:/admin/products/
         * @secure
         */
        adminProductsCreate: (data: AdminCreateUpdateProduct, params?: RequestParams$7) => Promise<HttpResponse$6<AdminProductResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsRetrieve
         * @summary Retrieve product
         * @request GET:/admin/products/{identifier}/
         * @secure
         */
        adminProductsRetrieve: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<AdminProductResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsUpdate
         * @summary Update product
         * @request PUT:/admin/products/{identifier}/
         * @secure
         */
        adminProductsUpdate: (identifier: string, data: AdminCreateUpdateProduct, params?: RequestParams$7) => Promise<HttpResponse$6<AdminProductResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsPartialUpdate
         * @summary Partially update product
         * @request PATCH:/admin/products/{identifier}/
         * @secure
         */
        adminProductsPartialUpdate: (identifier: string, data: PatchedAdminCreateUpdateProduct, params?: RequestParams$7) => Promise<HttpResponse$6<AdminProductResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsDestroy
         * @summary Delete product
         * @request DELETE:/admin/products/{identifier}/
         * @secure
         */
        adminProductsDestroy: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<AdminProductResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsCategoriesList
         * @summary List product categories
         * @request GET:/admin/products/{identifier}/categories/
         * @secure
         */
        adminProductsCategoriesList: ({ identifier, ...query }: AdminProductsCategoriesListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedCategoryListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsCategoriesCreate
         * @summary Create product category
         * @request POST:/admin/products/{identifier}/categories/
         * @secure
         */
        adminProductsCategoriesCreate: (identifier: string, data: AdminCreateProductCategory, params?: RequestParams$7) => Promise<HttpResponse$6<CategoryResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsOptionsList
         * @summary List product options
         * @request GET:/admin/products/{identifier}/options/
         * @secure
         */
        adminProductsOptionsList: ({ identifier, ...query }: AdminProductsOptionsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedProductOptionListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsOptionsCreate
         * @summary Create product option
         * @request POST:/admin/products/{identifier}/options/
         * @secure
         */
        adminProductsOptionsCreate: (identifier: string, data: AdminCreateProductOption, params?: RequestParams$7) => Promise<HttpResponse$6<ProductOptionResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsPricesList
         * @summary List product prices
         * @request GET:/admin/products/{identifier}/prices/
         * @secure
         */
        adminProductsPricesList: ({ identifier, ...query }: AdminProductsPricesListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedProductPriceListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsPricesCreate
         * @summary Create product price
         * @request POST:/admin/products/{identifier}/prices/
         * @secure
         */
        adminProductsPricesCreate: (identifier: string, data: AdminCreateProductPrice, params?: RequestParams$7) => Promise<HttpResponse$6<ProductPriceResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsVariantsList
         * @summary List product variants
         * @request GET:/admin/products/{identifier}/variants/
         * @secure
         */
        adminProductsVariantsList: ({ identifier, ...query }: AdminProductsVariantsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedProductVariantListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsVariantsCreate
         * @summary Create product variant
         * @request POST:/admin/products/{identifier}/variants/
         * @secure
         */
        adminProductsVariantsCreate: (identifier: string, data: AdminCreateProductVariant, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsCategoriesRetrieve
         * @summary Retrieve product category
         * @request GET:/admin/products/{product_id}/categories/{category_id}/
         * @secure
         */
        adminProductsCategoriesRetrieve: (categoryId: string, productId: string, params?: RequestParams$7) => Promise<HttpResponse$6<CategoryResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsCategoriesDestroy
         * @summary Delete product category
         * @request DELETE:/admin/products/{product_id}/categories/{category_id}/
         * @secure
         */
        adminProductsCategoriesDestroy: (categoryId: string, productId: string, params?: RequestParams$7) => Promise<HttpResponse$6<CategoryResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsImagesList
         * @summary List product images
         * @request GET:/admin/products/{product_id}/images/
         * @secure
         */
        adminProductsImagesList: ({ productId, ...query }: AdminProductsImagesListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedAdminListCreateProductImageListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsImagesCreate
         * @summary Create product image
         * @request POST:/admin/products/{product_id}/images/
         * @secure
         */
        adminProductsImagesCreate: (productId: string, data: AdminListCreateProductImage, params?: RequestParams$7) => Promise<HttpResponse$6<AdminListCreateProductImageResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsImagesRetrieve
         * @summary Retrieve product image
         * @request GET:/admin/products/{product_id}/images/{image_id}/
         * @secure
         */
        adminProductsImagesRetrieve: (imageId: string, productId: string, params?: RequestParams$7) => Promise<HttpResponse$6<AdminGetUpdateProductImageResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsImagesUpdate
         * @summary Update product image
         * @request PUT:/admin/products/{product_id}/images/{image_id}/
         * @secure
         */
        adminProductsImagesUpdate: (imageId: string, productId: string, data: AdminGetUpdateProductImage, params?: RequestParams$7) => Promise<HttpResponse$6<AdminGetUpdateProductImageResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsImagesPartialUpdate
         * @summary Partially update product image
         * @request PATCH:/admin/products/{product_id}/images/{image_id}/
         * @secure
         */
        adminProductsImagesPartialUpdate: (imageId: string, productId: string, data: PatchedAdminGetUpdateProductImage, params?: RequestParams$7) => Promise<HttpResponse$6<AdminGetUpdateProductImageResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsImagesDestroy
         * @summary Delete product image
         * @request DELETE:/admin/products/{product_id}/images/{image_id}/
         * @secure
         */
        adminProductsImagesDestroy: (imageId: string, productId: string, params?: RequestParams$7) => Promise<HttpResponse$6<AdminGetUpdateProductImageResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsOptionsRetrieve
         * @summary Retrieve product option
         * @request GET:/admin/products/{product_id}/options/{option_id}/
         * @secure
         */
        adminProductsOptionsRetrieve: (optionId: string, productId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductOptionResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsOptionsUpdate
         * @summary Update product option
         * @request PUT:/admin/products/{product_id}/options/{option_id}/
         * @secure
         */
        adminProductsOptionsUpdate: (optionId: string, productId: string, data: AdminUpdateProductOption, params?: RequestParams$7) => Promise<HttpResponse$6<ProductOptionResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsOptionsPartialUpdate
         * @summary Partially update product option
         * @request PATCH:/admin/products/{product_id}/options/{option_id}/
         * @secure
         */
        adminProductsOptionsPartialUpdate: (optionId: string, productId: string, data: PatchedAdminUpdateProductOption, params?: RequestParams$7) => Promise<HttpResponse$6<ProductOptionResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsOptionsDestroy
         * @summary Delete product option
         * @request DELETE:/admin/products/{product_id}/options/{option_id}/
         * @secure
         */
        adminProductsOptionsDestroy: (optionId: string, productId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductOptionResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsPricesRetrieve
         * @summary Retrieve product price
         * @request GET:/admin/products/{product_id}/prices/{price_id}/
         * @secure
         */
        adminProductsPricesRetrieve: (priceId: string, productId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductPriceResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsPricesUpdate
         * @summary Update product price
         * @request PUT:/admin/products/{product_id}/prices/{price_id}/
         * @secure
         */
        adminProductsPricesUpdate: (priceId: string, productId: string, data: AdminUpdateProductPrice, params?: RequestParams$7) => Promise<HttpResponse$6<ProductPriceResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsPricesPartialUpdate
         * @summary Partially update product price
         * @request PATCH:/admin/products/{product_id}/prices/{price_id}/
         * @secure
         */
        adminProductsPricesPartialUpdate: (priceId: string, productId: string, data: PatchedAdminUpdateProductPrice, params?: RequestParams$7) => Promise<HttpResponse$6<ProductPriceResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsPricesDestroy
         * @summary Delete product price
         * @request DELETE:/admin/products/{product_id}/prices/{price_id}/
         * @secure
         */
        adminProductsPricesDestroy: (priceId: string, productId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductPriceResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsVariantsRetrieve
         * @summary Retrieve product variant
         * @request GET:/admin/products/{product_id}/variants/{variant_id}/
         * @secure
         */
        adminProductsVariantsRetrieve: (productId: string, variantId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsVariantsUpdate
         * @summary Update product variant
         * @request PUT:/admin/products/{product_id}/variants/{variant_id}/
         * @secure
         */
        adminProductsVariantsUpdate: (productId: string, variantId: string, data: AdminUpdateProductVariant, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsVariantsPartialUpdate
         * @summary Partially update product variant
         * @request PATCH:/admin/products/{product_id}/variants/{variant_id}/
         * @secure
         */
        adminProductsVariantsPartialUpdate: (productId: string, variantId: string, data: PatchedAdminUpdateProductVariant, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsVariantsDestroy
         * @summary Delete product variant
         * @request DELETE:/admin/products/{product_id}/variants/{variant_id}/
         * @secure
         */
        adminProductsVariantsDestroy: (productId: string, variantId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsVariantsPricesList
         * @summary List product variant prices
         * @request GET:/admin/products/{product_id}/variants/{variant_id}/prices/
         * @secure
         */
        adminProductsVariantsPricesList: ({ productId, variantId, ...query }: AdminProductsVariantsPricesListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedProductVariantPriceListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsVariantsPricesCreate
         * @summary Create product variant price
         * @request POST:/admin/products/{product_id}/variants/{variant_id}/prices/
         * @secure
         */
        adminProductsVariantsPricesCreate: (productId: string, variantId: string, data: AdminCreateProductVariantPrice, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantPriceResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsVariantsPricesRetrieve
         * @summary Retrieve product variant price
         * @request GET:/admin/products/{product_id}/variants/{variant_id}/prices/{price_id}/
         * @secure
         */
        adminProductsVariantsPricesRetrieve: (priceId: string, productId: string, variantId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantPriceResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsVariantsPricesUpdate
         * @summary Update product variant price
         * @request PUT:/admin/products/{product_id}/variants/{variant_id}/prices/{price_id}/
         * @secure
         */
        adminProductsVariantsPricesUpdate: (priceId: string, productId: string, variantId: string, data: AdminUpdateProductVariantPrice, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantPriceResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsVariantsPricesPartialUpdate
         * @summary Partially update product variant price
         * @request PATCH:/admin/products/{product_id}/variants/{variant_id}/prices/{price_id}/
         * @secure
         */
        adminProductsVariantsPricesPartialUpdate: (priceId: string, productId: string, variantId: string, data: PatchedAdminUpdateProductVariantPrice, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantPriceResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminProductsVariantsPricesDestroy
         * @summary Delete product variant price
         * @request DELETE:/admin/products/{product_id}/variants/{variant_id}/prices/{price_id}/
         * @secure
         */
        adminProductsVariantsPricesDestroy: (priceId: string, productId: string, variantId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantPriceResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRedemptionsList
         * @summary List redemptions
         * @request GET:/admin/redemptions/
         * @secure
         */
        adminRedemptionsList: (query: AdminRedemptionsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedRedemptionListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRedemptionsCreate
         * @summary Create redemption
         * @request POST:/admin/redemptions/
         * @secure
         */
        adminRedemptionsCreate: (data: AdminCreateRedemption, params?: RequestParams$7) => Promise<HttpResponse$6<RedemptionResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRedemptionsRetrieve
         * @summary Retrieve redemption
         * @request GET:/admin/redemptions/{action_id}/
         * @secure
         */
        adminRedemptionsRetrieve: (actionId: string, params?: RequestParams$7) => Promise<HttpResponse$6<RedemptionResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminSellersList
         * @summary List sellers
         * @request GET:/admin/sellers/
         * @secure
         */
        adminSellersList: (query: AdminSellersListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedAdminSellerListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminSellersRetrieve
         * @summary Retrieve seller
         * @request GET:/admin/sellers/{identifier}/
         * @secure
         */
        adminSellersRetrieve: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<AdminSellerResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminSellersUpdate
         * @summary Update seller
         * @request PUT:/admin/sellers/{identifier}/
         * @secure
         */
        adminSellersUpdate: (identifier: string, data: AdminSeller, params?: RequestParams$7) => Promise<HttpResponse$6<AdminSellerResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminSellersPartialUpdate
         * @summary Partially update seller
         * @request PATCH:/admin/sellers/{identifier}/
         * @secure
         */
        adminSellersPartialUpdate: (identifier: string, data: PatchedAdminSeller, params?: RequestParams$7) => Promise<HttpResponse$6<AdminSellerResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminVoucherImportsList
         * @summary List voucher imports
         * @request GET:/admin/voucher-imports/
         * @secure
         */
        adminVoucherImportsList: (query: AdminVoucherImportsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedAdminCreateVoucherImportListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminVoucherImportsCreate
         * @summary Create voucher imports
         * @request POST:/admin/voucher-imports/
         * @secure
         */
        adminVoucherImportsCreate: (data: AdminCreateVoucherImport, params?: RequestParams$7) => Promise<HttpResponse$6<AdminCreateVoucherImportResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminVoucherImportsRetrieve
         * @summary Retrieve voucher import
         * @request GET:/admin/voucher-imports/{identifier}/
         * @secure
         */
        adminVoucherImportsRetrieve: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherImportResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminVouchersList
         * @summary List vouchers
         * @request GET:/admin/vouchers/
         * @secure
         */
        adminVouchersList: (query: AdminVouchersListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedVoucherListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminVouchersCreate
         * @summary Create voucher
         * @request POST:/admin/vouchers/
         * @secure
         */
        adminVouchersCreate: (data: AdminCreateVoucher, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminVouchersRetrieve
         * @summary Retrieve voucher
         * @request GET:/admin/vouchers/{identifier}/
         * @secure
         */
        adminVouchersRetrieve: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminVouchersUpdate
         * @summary Update voucher
         * @request PUT:/admin/vouchers/{identifier}/
         * @secure
         */
        adminVouchersUpdate: (identifier: string, data: AdminUpdateVoucher, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminVouchersPartialUpdate
         * @summary Partially update voucher
         * @request PATCH:/admin/vouchers/{identifier}/
         * @secure
         */
        adminVouchersPartialUpdate: (identifier: string, data: PatchedAdminUpdateVoucher, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminVouchersDestroy
         * @summary Delete voucher
         * @request DELETE:/admin/vouchers/{identifier}/
         * @secure
         */
        adminVouchersDestroy: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminVouchersActionsList
         * @summary List voucher actions
         * @request GET:/admin/vouchers/{identifier}/actions/
         * @secure
         */
        adminVouchersActionsList: ({ identifier, ...query }: AdminVouchersActionsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedVoucherActionListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminVouchersActionsRetrieve
         * @summary Retrieve voucher action
         * @request GET:/admin/vouchers/{voucher_id}/actions/{action_id}/
         * @secure
         */
        adminVouchersActionsRetrieve: (actionId: string, voucherId: string, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherActionResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminVouchersImportCreate
         * @summary Import vouchers
         * @request POST:/admin/vouchers/import/
         * @secure
         */
        adminVouchersImportCreate: (data: AdminImportVoucher, params?: RequestParams$7) => Promise<HttpResponse$6<AdminImportVoucherResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminVouchersQueryCreate
         * @summary Query voucher
         * @request POST:/admin/vouchers/query/
         * @secure
         */
        adminVouchersQueryCreate: (data: AdminQueryVoucher, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherResponse, any>>;
    };
    deactivate: {
        /**
         * No description
         *
         * @tags deactivate
         * @name DeactivateCreate
         * @summary Deactivate service
         * @request POST:/deactivate/
         * @secure
         */
        deactivateCreate: (data: Deactivate$7, params?: RequestParams$7) => Promise<HttpResponse$6<ActionResponse$5, any>>;
    };
    manager: {
        /**
         * No description
         *
         * @tags manager
         * @name ManagerCategoriesList
         * @summary List categories
         * @request GET:/manager/categories/
         * @secure
         */
        managerCategoriesList: (query: ManagerCategoriesListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedCategoryListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerCategoriesRetrieve
         * @summary Retrieve category
         * @request GET:/manager/categories/{identifier}/
         * @secure
         */
        managerCategoriesRetrieve: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<CategoryResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerCompanyRetrieve
         * @summary Retrieve company
         * @request GET:/manager/company/
         * @secure
         */
        managerCompanyRetrieve: (params?: RequestParams$7) => Promise<HttpResponse$6<CompanyResponse$1, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerCurrenciesList
         * @summary List currencies
         * @request GET:/manager/currencies/
         * @secure
         */
        managerCurrenciesList: (query: ManagerCurrenciesListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedCurrencyListResponse$2, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerCurrenciesRetrieve
         * @summary Retrieve currency
         * @request GET:/manager/currencies/{code}/
         * @secure
         */
        managerCurrenciesRetrieve: (code: string, params?: RequestParams$7) => Promise<HttpResponse$6<CurrencyResponse$2, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersList
         * @summary List sellers
         * @request GET:/manager/sellers/
         * @secure
         */
        managerSellersList: (query: ManagerSellersListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedManagerSellerListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersCreate
         * @summary Create seller
         * @request POST:/manager/sellers/
         * @secure
         */
        managerSellersCreate: (data: ManagerCreateSeller, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerCreateSellerResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersRetrieve
         * @summary Retrieve seller
         * @request GET:/manager/sellers/{identifier}/
         * @secure
         */
        managerSellersRetrieve: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerSellerResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersUpdate
         * @summary Update seller
         * @request PUT:/manager/sellers/{identifier}/
         * @secure
         */
        managerSellersUpdate: (identifier: string, data: ManagerSeller, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerSellerResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersPartialUpdate
         * @summary Partially update seller
         * @request PATCH:/manager/sellers/{identifier}/
         * @secure
         */
        managerSellersPartialUpdate: (identifier: string, data: PatchedManagerSeller, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerSellerResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersIntegrationsList
         * @summary List integrations
         * @request GET:/manager/sellers/{identifier}/integrations/
         * @secure
         */
        managerSellersIntegrationsList: ({ identifier, ...query }: ManagerSellersIntegrationsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedManagerIntegrationListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersIntegrationsCreate
         * @summary Create integration
         * @request POST:/manager/sellers/{identifier}/integrations/
         * @secure
         */
        managerSellersIntegrationsCreate: (identifier: string, data: ManagerIntegration, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerIntegrationResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersIntegrationsRetrieve
         * @summary Retrieve integration
         * @request GET:/manager/sellers/{seller_id}/integrations/{identifier}/
         * @secure
         */
        managerSellersIntegrationsRetrieve: (identifier: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerIntegrationResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersIntegrationsUpdate
         * @summary Update integration
         * @request PUT:/manager/sellers/{seller_id}/integrations/{identifier}/
         * @secure
         */
        managerSellersIntegrationsUpdate: (identifier: string, sellerId: string, data: ManagerIntegration, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerIntegrationResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersIntegrationsPartialUpdate
         * @summary Partially update integration
         * @request PATCH:/manager/sellers/{seller_id}/integrations/{identifier}/
         * @secure
         */
        managerSellersIntegrationsPartialUpdate: (identifier: string, sellerId: string, data: PatchedManagerIntegration, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerIntegrationResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersIntegrationsDestroy
         * @summary Delete integration
         * @request DELETE:/manager/sellers/{seller_id}/integrations/{identifier}/
         * @secure
         */
        managerSellersIntegrationsDestroy: (identifier: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerIntegrationResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersIntegrationsWebhooksList
         * @summary List integration webhooks
         * @request GET:/manager/sellers/{seller_id}/integrations/{identifier}/webhooks/
         * @secure
         */
        managerSellersIntegrationsWebhooksList: ({ identifier, sellerId, ...query }: ManagerSellersIntegrationsWebhooksListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedManagerIntegrationWebhookListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersIntegrationsWebhooksCreate
         * @summary Create integration webhook
         * @request POST:/manager/sellers/{seller_id}/integrations/{identifier}/webhooks/
         * @secure
         */
        managerSellersIntegrationsWebhooksCreate: (identifier: string, sellerId: string, data: ManagerIntegrationWebhook, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerIntegrationWebhookResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersIntegrationsWebhooksRetrieve
         * @summary Retrieve integration webhook
         * @request GET:/manager/sellers/{seller_id}/integrations/{integration_id}/webhooks/{webhook_id}/
         * @secure
         */
        managerSellersIntegrationsWebhooksRetrieve: (integrationId: string, sellerId: string, webhookId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerIntegrationWebhookResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersIntegrationsWebhooksUpdate
         * @summary Update integration webhook
         * @request PUT:/manager/sellers/{seller_id}/integrations/{integration_id}/webhooks/{webhook_id}/
         * @secure
         */
        managerSellersIntegrationsWebhooksUpdate: (integrationId: string, sellerId: string, webhookId: string, data: ManagerIntegrationWebhook, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerIntegrationWebhookResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersIntegrationsWebhooksPartialUpdate
         * @summary Partially update integration webhook
         * @request PATCH:/manager/sellers/{seller_id}/integrations/{integration_id}/webhooks/{webhook_id}/
         * @secure
         */
        managerSellersIntegrationsWebhooksPartialUpdate: (integrationId: string, sellerId: string, webhookId: string, data: PatchedManagerIntegrationWebhook, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerIntegrationWebhookResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersIntegrationsWebhooksDestroy
         * @summary Delete integration webhook
         * @request DELETE:/manager/sellers/{seller_id}/integrations/{integration_id}/webhooks/{webhook_id}/
         * @secure
         */
        managerSellersIntegrationsWebhooksDestroy: (integrationId: string, sellerId: string, webhookId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerIntegrationWebhookResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersList
         * @summary List orders
         * @request GET:/manager/sellers/{seller_id}/orders/
         * @secure
         */
        managerSellersOrdersList: ({ sellerId, ...query }: ManagerSellersOrdersListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedOrderListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersRetrieve
         * @summary Retrieve order
         * @request GET:/manager/sellers/{seller_id}/orders/{identifier}/
         * @secure
         */
        managerSellersOrdersRetrieve: (identifier: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ExtendedOrderResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersUpdate
         * @summary Update order
         * @request PUT:/manager/sellers/{seller_id}/orders/{identifier}/
         * @secure
         */
        managerSellersOrdersUpdate: (identifier: string, sellerId: string, data: ManagerUpdateOrder, params?: RequestParams$7) => Promise<HttpResponse$6<ExtendedOrderResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersPartialUpdate
         * @summary Partially update order
         * @request PATCH:/manager/sellers/{seller_id}/orders/{identifier}/
         * @secure
         */
        managerSellersOrdersPartialUpdate: (identifier: string, sellerId: string, data: PatchedManagerUpdateOrder, params?: RequestParams$7) => Promise<HttpResponse$6<ExtendedOrderResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersItemsList
         * @summary List order items
         * @request GET:/manager/sellers/{seller_id}/orders/{identifier}/items/
         * @secure
         */
        managerSellersOrdersItemsList: ({ identifier, sellerId, ...query }: ManagerSellersOrdersItemsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedOrderItemListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersPaymentsList
         * @summary List payments
         * @request GET:/manager/sellers/{seller_id}/orders/{identifier}/payments/
         * @secure
         */
        managerSellersOrdersPaymentsList: ({ identifier, sellerId, ...query }: ManagerSellersOrdersPaymentsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedManagerPaymentListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersRefundsList
         * @summary List refund
         * @request GET:/manager/sellers/{seller_id}/orders/{identifier}/refunds/
         * @secure
         */
        managerSellersOrdersRefundsList: ({ identifier, sellerId, ...query }: ManagerSellersOrdersRefundsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedManagerRefundListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersRefundsCreate
         * @summary Create refund
         * @request POST:/manager/sellers/{seller_id}/orders/{identifier}/refunds/
         * @secure
         */
        managerSellersOrdersRefundsCreate: (identifier: string, sellerId: string, data: ManagerCreateRefund, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerRefundResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersItemsRetrieve
         * @summary Retrieve order item
         * @request GET:/manager/sellers/{seller_id}/orders/{order_id}/items/{item_id}/
         * @secure
         */
        managerSellersOrdersItemsRetrieve: (itemId: string, orderId: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<OrderItemResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersItemsUpdate
         * @summary Update order item
         * @request PUT:/manager/sellers/{seller_id}/orders/{order_id}/items/{item_id}/
         * @secure
         */
        managerSellersOrdersItemsUpdate: (itemId: string, orderId: string, sellerId: string, data: ManagerUpdateOrderItem, params?: RequestParams$7) => Promise<HttpResponse$6<OrderItemResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersItemsPartialUpdate
         * @summary Partially update order item
         * @request PATCH:/manager/sellers/{seller_id}/orders/{order_id}/items/{item_id}/
         * @secure
         */
        managerSellersOrdersItemsPartialUpdate: (itemId: string, orderId: string, sellerId: string, data: PatchedManagerUpdateOrderItem, params?: RequestParams$7) => Promise<HttpResponse$6<OrderItemResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersPaymentsRetrieve
         * @summary Retrieve payment
         * @request GET:/manager/sellers/{seller_id}/orders/{order_id}/payments/{payment_id}/
         * @secure
         */
        managerSellersOrdersPaymentsRetrieve: (orderId: string, paymentId: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerPaymentResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersPaymentsUpdate
         * @summary Update payment
         * @request PUT:/manager/sellers/{seller_id}/orders/{order_id}/payments/{payment_id}/
         * @secure
         */
        managerSellersOrdersPaymentsUpdate: (orderId: string, paymentId: string, sellerId: string, data: ManagerPayment, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerPaymentResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersPaymentsPartialUpdate
         * @summary Partially update payment
         * @request PATCH:/manager/sellers/{seller_id}/orders/{order_id}/payments/{payment_id}/
         * @secure
         */
        managerSellersOrdersPaymentsPartialUpdate: (orderId: string, paymentId: string, sellerId: string, data: PatchedManagerPayment, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerPaymentResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersRefundsRetrieve
         * @summary Retrieve refund
         * @request GET:/manager/sellers/{seller_id}/orders/{order_id}/refunds/{refund_id}/
         * @secure
         */
        managerSellersOrdersRefundsRetrieve: (orderId: string, refundId: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerRefundResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersRefundsUpdate
         * @summary Update refund
         * @request PUT:/manager/sellers/{seller_id}/orders/{order_id}/refunds/{refund_id}/
         * @secure
         */
        managerSellersOrdersRefundsUpdate: (orderId: string, refundId: string, sellerId: string, data: ManagerRefund, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerRefundResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersOrdersRefundsPartialUpdate
         * @summary Partially update refund
         * @request PATCH:/manager/sellers/{seller_id}/orders/{order_id}/refunds/{refund_id}/
         * @secure
         */
        managerSellersOrdersRefundsPartialUpdate: (orderId: string, refundId: string, sellerId: string, data: PatchedManagerRefund, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerRefundResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsList
         * @summary List products
         * @request GET:/manager/sellers/{seller_id}/products/
         * @secure
         */
        managerSellersProductsList: ({ sellerId, ...query }: ManagerSellersProductsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedManagerProductListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsCreate
         * @summary Create product
         * @request POST:/manager/sellers/{seller_id}/products/
         * @secure
         */
        managerSellersProductsCreate: (sellerId: string, data: ManagerCreateUpdateProduct, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerProductResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsRetrieve
         * @summary Retrieve product
         * @request GET:/manager/sellers/{seller_id}/products/{identifier}/
         * @secure
         */
        managerSellersProductsRetrieve: (identifier: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerProductResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsUpdate
         * @summary Update product
         * @request PUT:/manager/sellers/{seller_id}/products/{identifier}/
         * @secure
         */
        managerSellersProductsUpdate: (identifier: string, sellerId: string, data: ManagerCreateUpdateProduct, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerProductResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsPartialUpdate
         * @summary Partially update product
         * @request PATCH:/manager/sellers/{seller_id}/products/{identifier}/
         * @secure
         */
        managerSellersProductsPartialUpdate: (identifier: string, sellerId: string, data: PatchedManagerCreateUpdateProduct, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerProductResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsDestroy
         * @summary Delete product
         * @request DELETE:/manager/sellers/{seller_id}/products/{identifier}/
         * @secure
         */
        managerSellersProductsDestroy: (identifier: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerProductResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsCategoriesList
         * @summary List product categories
         * @request GET:/manager/sellers/{seller_id}/products/{identifier}/categories/
         * @secure
         */
        managerSellersProductsCategoriesList: ({ identifier, sellerId, ...query }: ManagerSellersProductsCategoriesListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedCategoryListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsCategoriesCreate
         * @summary Create product category
         * @request POST:/manager/sellers/{seller_id}/products/{identifier}/categories/
         * @secure
         */
        managerSellersProductsCategoriesCreate: (identifier: string, sellerId: string, data: ManagerCreateProductCategory, params?: RequestParams$7) => Promise<HttpResponse$6<CategoryResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsOptionsList
         * @summary List product option
         * @request GET:/manager/sellers/{seller_id}/products/{identifier}/options/
         * @secure
         */
        managerSellersProductsOptionsList: ({ identifier, sellerId, ...query }: ManagerSellersProductsOptionsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedProductOptionListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsOptionsCreate
         * @summary Create product option
         * @request POST:/manager/sellers/{seller_id}/products/{identifier}/options/
         * @secure
         */
        managerSellersProductsOptionsCreate: (identifier: string, sellerId: string, data: ManagerCreateProductOption, params?: RequestParams$7) => Promise<HttpResponse$6<ProductOptionResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsPricesList
         * @summary List product prices
         * @request GET:/manager/sellers/{seller_id}/products/{identifier}/prices/
         * @secure
         */
        managerSellersProductsPricesList: ({ identifier, sellerId, ...query }: ManagerSellersProductsPricesListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedProductPriceListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsPricesCreate
         * @summary Create product price
         * @request POST:/manager/sellers/{seller_id}/products/{identifier}/prices/
         * @secure
         */
        managerSellersProductsPricesCreate: (identifier: string, sellerId: string, data: ManagerCreateProductPrice, params?: RequestParams$7) => Promise<HttpResponse$6<ProductPriceResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsVariantsList
         * @summary List product variants
         * @request GET:/manager/sellers/{seller_id}/products/{identifier}/variants/
         * @secure
         */
        managerSellersProductsVariantsList: ({ identifier, sellerId, ...query }: ManagerSellersProductsVariantsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedProductVariantListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsVariantsCreate
         * @summary Create product variant
         * @request POST:/manager/sellers/{seller_id}/products/{identifier}/variants/
         * @secure
         */
        managerSellersProductsVariantsCreate: (identifier: string, sellerId: string, data: ManagerCreateProductVariant, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsCategoriesRetrieve
         * @summary Retrieve product category
         * @request GET:/manager/sellers/{seller_id}/products/{product_id}/categories/{category_id}/
         * @secure
         */
        managerSellersProductsCategoriesRetrieve: (categoryId: string, productId: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<CategoryResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsCategoriesDestroy
         * @summary Delete product category
         * @request DELETE:/manager/sellers/{seller_id}/products/{product_id}/categories/{category_id}/
         * @secure
         */
        managerSellersProductsCategoriesDestroy: (categoryId: string, productId: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<CategoryResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsImagesList
         * @summary List product image
         * @request GET:/manager/sellers/{seller_id}/products/{product_id}/images/
         * @secure
         */
        managerSellersProductsImagesList: ({ productId, sellerId, ...query }: ManagerSellersProductsImagesListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedManagerListCreateProductImageListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsImagesCreate
         * @summary Create product image
         * @request POST:/manager/sellers/{seller_id}/products/{product_id}/images/
         * @secure
         */
        managerSellersProductsImagesCreate: (productId: string, sellerId: string, data: ManagerListCreateProductImage, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerListCreateProductImageResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsImagesRetrieve
         * @summary Retrieve product image
         * @request GET:/manager/sellers/{seller_id}/products/{product_id}/images/{image_id}/
         * @secure
         */
        managerSellersProductsImagesRetrieve: (imageId: string, productId: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerGetUpdateProductImageResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsImagesUpdate
         * @summary Update product image
         * @request PUT:/manager/sellers/{seller_id}/products/{product_id}/images/{image_id}/
         * @secure
         */
        managerSellersProductsImagesUpdate: (imageId: string, productId: string, sellerId: string, data: ManagerGetUpdateProductImage, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerGetUpdateProductImageResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsImagesPartialUpdate
         * @summary Partially update product image
         * @request PATCH:/manager/sellers/{seller_id}/products/{product_id}/images/{image_id}/
         * @secure
         */
        managerSellersProductsImagesPartialUpdate: (imageId: string, productId: string, sellerId: string, data: PatchedManagerGetUpdateProductImage, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerGetUpdateProductImageResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsImagesDestroy
         * @summary Delete product image
         * @request DELETE:/manager/sellers/{seller_id}/products/{product_id}/images/{image_id}/
         * @secure
         */
        managerSellersProductsImagesDestroy: (imageId: string, productId: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerGetUpdateProductImageResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsOptionsRetrieve
         * @summary Retrieve product option
         * @request GET:/manager/sellers/{seller_id}/products/{product_id}/options/{option_id}/
         * @secure
         */
        managerSellersProductsOptionsRetrieve: (optionId: string, productId: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductOptionResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsOptionsUpdate
         * @summary Update product option
         * @request PUT:/manager/sellers/{seller_id}/products/{product_id}/options/{option_id}/
         * @secure
         */
        managerSellersProductsOptionsUpdate: (optionId: string, productId: string, sellerId: string, data: ManagerUpdateProductOption, params?: RequestParams$7) => Promise<HttpResponse$6<ProductOptionResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsOptionsPartialUpdate
         * @summary Partially update product option
         * @request PATCH:/manager/sellers/{seller_id}/products/{product_id}/options/{option_id}/
         * @secure
         */
        managerSellersProductsOptionsPartialUpdate: (optionId: string, productId: string, sellerId: string, data: PatchedManagerUpdateProductOption, params?: RequestParams$7) => Promise<HttpResponse$6<ProductOptionResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsOptionsDestroy
         * @summary Delete product option
         * @request DELETE:/manager/sellers/{seller_id}/products/{product_id}/options/{option_id}/
         * @secure
         */
        managerSellersProductsOptionsDestroy: (optionId: string, productId: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductOptionResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsPricesRetrieve
         * @summary Retrieve product price
         * @request GET:/manager/sellers/{seller_id}/products/{product_id}/prices/{price_id}/
         * @secure
         */
        managerSellersProductsPricesRetrieve: (priceId: string, productId: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductPriceResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsPricesUpdate
         * @summary Update product price
         * @request PUT:/manager/sellers/{seller_id}/products/{product_id}/prices/{price_id}/
         * @secure
         */
        managerSellersProductsPricesUpdate: (priceId: string, productId: string, sellerId: string, data: ManagerUpdateProductPrice, params?: RequestParams$7) => Promise<HttpResponse$6<ProductPriceResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsPricesPartialUpdate
         * @summary Partially update product price
         * @request PATCH:/manager/sellers/{seller_id}/products/{product_id}/prices/{price_id}/
         * @secure
         */
        managerSellersProductsPricesPartialUpdate: (priceId: string, productId: string, sellerId: string, data: PatchedManagerUpdateProductPrice, params?: RequestParams$7) => Promise<HttpResponse$6<ProductPriceResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsPricesDestroy
         * @summary Delete product price
         * @request DELETE:/manager/sellers/{seller_id}/products/{product_id}/prices/{price_id}/
         * @secure
         */
        managerSellersProductsPricesDestroy: (priceId: string, productId: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductPriceResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsVariantsRetrieve
         * @summary Retrieve product variant
         * @request GET:/manager/sellers/{seller_id}/products/{product_id}/variants/{variant_id}/
         * @secure
         */
        managerSellersProductsVariantsRetrieve: (productId: string, sellerId: string, variantId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsVariantsUpdate
         * @summary Update product variant
         * @request PUT:/manager/sellers/{seller_id}/products/{product_id}/variants/{variant_id}/
         * @secure
         */
        managerSellersProductsVariantsUpdate: (productId: string, sellerId: string, variantId: string, data: ManagerUpdateProductVariant, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsVariantsPartialUpdate
         * @summary Partially update product variant
         * @request PATCH:/manager/sellers/{seller_id}/products/{product_id}/variants/{variant_id}/
         * @secure
         */
        managerSellersProductsVariantsPartialUpdate: (productId: string, sellerId: string, variantId: string, data: PatchedManagerUpdateProductVariant, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsVariantsDestroy
         * @summary Delete product variant
         * @request DELETE:/manager/sellers/{seller_id}/products/{product_id}/variants/{variant_id}/
         * @secure
         */
        managerSellersProductsVariantsDestroy: (productId: string, sellerId: string, variantId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsVariantsPricesList
         * @summary List product variant prices
         * @request GET:/manager/sellers/{seller_id}/products/{product_id}/variants/{variant_id}/prices/
         * @secure
         */
        managerSellersProductsVariantsPricesList: ({ productId, sellerId, variantId, ...query }: ManagerSellersProductsVariantsPricesListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedProductVariantPriceListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsVariantsPricesCreate
         * @summary Create product variant price
         * @request POST:/manager/sellers/{seller_id}/products/{product_id}/variants/{variant_id}/prices/
         * @secure
         */
        managerSellersProductsVariantsPricesCreate: (productId: string, sellerId: string, variantId: string, data: ManagerCreateProductVariantPrice, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantPriceResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsVariantsPricesRetrieve
         * @summary Retrieve product variant price
         * @request GET:/manager/sellers/{seller_id}/products/{product_id}/variants/{variant_id}/prices/{price_id}/
         * @secure
         */
        managerSellersProductsVariantsPricesRetrieve: (priceId: string, productId: string, sellerId: string, variantId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantPriceResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsVariantsPricesUpdate
         * @summary Update product variant price
         * @request PUT:/manager/sellers/{seller_id}/products/{product_id}/variants/{variant_id}/prices/{price_id}/
         * @secure
         */
        managerSellersProductsVariantsPricesUpdate: (priceId: string, productId: string, sellerId: string, variantId: string, data: ManagerUpdateProductVariantPrice, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantPriceResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsVariantsPricesPartialUpdate
         * @summary Partially update product variant price
         * @request PATCH:/manager/sellers/{seller_id}/products/{product_id}/variants/{variant_id}/prices/{price_id}/
         * @secure
         */
        managerSellersProductsVariantsPricesPartialUpdate: (priceId: string, productId: string, sellerId: string, variantId: string, data: PatchedManagerUpdateProductVariantPrice, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantPriceResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersProductsVariantsPricesDestroy
         * @summary Delete product variant price
         * @request DELETE:/manager/sellers/{seller_id}/products/{product_id}/variants/{variant_id}/prices/{price_id}/
         * @secure
         */
        managerSellersProductsVariantsPricesDestroy: (priceId: string, productId: string, sellerId: string, variantId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantPriceResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersRedemptionsList
         * @summary List redemptions
         * @request GET:/manager/sellers/{seller_id}/redemptions/
         * @secure
         */
        managerSellersRedemptionsList: ({ sellerId, ...query }: ManagerSellersRedemptionsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedRedemptionListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersRedemptionsCreate
         * @summary Create redemption
         * @request POST:/manager/sellers/{seller_id}/redemptions/
         * @secure
         */
        managerSellersRedemptionsCreate: (sellerId: string, data: ManagerCreateRedemption, params?: RequestParams$7) => Promise<HttpResponse$6<RedemptionResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersRedemptionsRetrieve
         * @summary Retrieve redemption
         * @request GET:/manager/sellers/{seller_id}/redemptions/{action_id}/
         * @secure
         */
        managerSellersRedemptionsRetrieve: (actionId: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<RedemptionResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersVoucherImportsList
         * @summary List voucher imports
         * @request GET:/manager/sellers/{seller_id}/voucher-imports/
         * @secure
         */
        managerSellersVoucherImportsList: ({ sellerId, ...query }: ManagerSellersVoucherImportsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedManagerCreateVoucherImportListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersVoucherImportsCreate
         * @summary Create voucher import
         * @request POST:/manager/sellers/{seller_id}/voucher-imports/
         * @secure
         */
        managerSellersVoucherImportsCreate: (sellerId: string, data: ManagerCreateVoucherImport, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerCreateVoucherImportResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersVoucherImportsRetrieve
         * @summary Retrieve voucher import
         * @request GET:/manager/sellers/{seller_id}/voucher-imports/{identifier}/
         * @secure
         */
        managerSellersVoucherImportsRetrieve: (identifier: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherImportResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersVoucherImportCreate
         * @summary Import vouchers
         * @request POST:/manager/sellers/{seller_id}/voucher/import/
         * @secure
         */
        managerSellersVoucherImportCreate: (sellerId: string, data: ManagerImportVoucher, params?: RequestParams$7) => Promise<HttpResponse$6<ManagerImportVoucherResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersVouchersList
         * @summary List vouchers
         * @request GET:/manager/sellers/{seller_id}/vouchers/
         * @secure
         */
        managerSellersVouchersList: ({ sellerId, ...query }: ManagerSellersVouchersListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedVoucherListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersVouchersCreate
         * @summary Create voucher
         * @request POST:/manager/sellers/{seller_id}/vouchers/
         * @secure
         */
        managerSellersVouchersCreate: (sellerId: string, data: ManagerCreateVoucher, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersVouchersRetrieve
         * @summary Retrieve voucher
         * @request GET:/manager/sellers/{seller_id}/vouchers/{identifier}/
         * @secure
         */
        managerSellersVouchersRetrieve: (identifier: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersVouchersUpdate
         * @summary Update voucher
         * @request PUT:/manager/sellers/{seller_id}/vouchers/{identifier}/
         * @secure
         */
        managerSellersVouchersUpdate: (identifier: string, sellerId: string, data: ManagerUpdateVoucher, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersVouchersPartialUpdate
         * @summary Partially update voucher
         * @request PATCH:/manager/sellers/{seller_id}/vouchers/{identifier}/
         * @secure
         */
        managerSellersVouchersPartialUpdate: (identifier: string, sellerId: string, data: PatchedManagerUpdateVoucher, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersVouchersDestroy
         * @summary Delete voucher
         * @request DELETE:/manager/sellers/{seller_id}/vouchers/{identifier}/
         * @secure
         */
        managerSellersVouchersDestroy: (identifier: string, sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersVouchersActionsList
         * @summary List voucher actions
         * @request GET:/manager/sellers/{seller_id}/vouchers/{voucher_id}/actions/
         * @secure
         */
        managerSellersVouchersActionsList: ({ sellerId, voucherId, ...query }: ManagerSellersVouchersActionsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedVoucherActionListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersVouchersActionsRetrieve
         * @summary Retrieve voucher actions
         * @request GET:/manager/sellers/{seller_id}/vouchers/{voucher_id}/actions/{action_id}/
         * @secure
         */
        managerSellersVouchersActionsRetrieve: (actionId: string, sellerId: string, voucherId: string, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherActionResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerSellersVouchersQueryCreate
         * @summary Query voucher
         * @request POST:/manager/sellers/{seller_id}/vouchers/query/
         * @secure
         */
        managerSellersVouchersQueryCreate: (sellerId: string, data: ManagerQueryVoucher, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherResponse, any>>;
    };
    user: {
        /**
         * No description
         *
         * @tags user
         * @name UserCategoriesList
         * @summary List categories
         * @request GET:/user/categories/
         * @secure
         */
        userCategoriesList: (query: UserCategoriesListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedCategoryListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserCategoriesRetrieve
         * @summary Retrieve category
         * @request GET:/user/categories/{identifier}/
         * @secure
         */
        userCategoriesRetrieve: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<CategoryResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserCompanyRetrieve
         * @summary Retrieve company
         * @request GET:/user/company/
         * @secure
         */
        userCompanyRetrieve: (params?: RequestParams$7) => Promise<HttpResponse$6<CompanyResponse$1, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersList
         * @summary List orders
         * @request GET:/user/orders/
         * @secure
         */
        userOrdersList: (query: UserOrdersListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedOrderListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersCreate
         * @summary Create order
         * @request POST:/user/orders/
         * @secure
         */
        userOrdersCreate: (data: UserCreateOrder, params?: RequestParams$7) => Promise<HttpResponse$6<OrderResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersRetrieve
         * @summary Retrieve order
         * @request GET:/user/orders/{identifier}/
         * @secure
         */
        userOrdersRetrieve: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<ExtendedOrderResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersUpdate
         * @summary Update order
         * @request PUT:/user/orders/{identifier}/
         * @secure
         */
        userOrdersUpdate: (identifier: string, data: UserUpdateOrder, params?: RequestParams$7) => Promise<HttpResponse$6<ExtendedOrderResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersPartialUpdate
         * @summary Partially update order
         * @request PATCH:/user/orders/{identifier}/
         * @secure
         */
        userOrdersPartialUpdate: (identifier: string, data: PatchedUserUpdateOrder, params?: RequestParams$7) => Promise<HttpResponse$6<ExtendedOrderResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersDestroy
         * @summary Delete order
         * @request DELETE:/user/orders/{identifier}/
         * @secure
         */
        userOrdersDestroy: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<ExtendedOrderResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersItemsList
         * @summary List order items
         * @request GET:/user/orders/{identifier}/items/
         * @secure
         */
        userOrdersItemsList: ({ identifier, ...query }: UserOrdersItemsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedOrderItemListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersItemsCreate
         * @summary Create order item
         * @request POST:/user/orders/{identifier}/items/
         * @secure
         */
        userOrdersItemsCreate: (identifier: string, data: UserCreateOrderItem, params?: RequestParams$7) => Promise<HttpResponse$6<OrderItemResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersPaymentsList
         * @summary List payments
         * @request GET:/user/orders/{identifier}/payments/
         * @secure
         */
        userOrdersPaymentsList: ({ identifier, ...query }: UserOrdersPaymentsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedPaymentListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersPaymentsCreate
         * @summary Create payment
         * @request POST:/user/orders/{identifier}/payments/
         * @secure
         */
        userOrdersPaymentsCreate: (identifier: string, data: CreatePayment, params?: RequestParams$7) => Promise<HttpResponse$6<PaymentResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersRefundsList
         * @summary List refunds
         * @request GET:/user/orders/{identifier}/refunds/
         * @secure
         */
        userOrdersRefundsList: ({ identifier, ...query }: UserOrdersRefundsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedRefundListResponse$1, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersItemsRetrieve
         * @summary Retrieve order item
         * @request GET:/user/orders/{order_id}/items/{item_id}/
         * @secure
         */
        userOrdersItemsRetrieve: (itemId: string, orderId: string, params?: RequestParams$7) => Promise<HttpResponse$6<OrderItemResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersItemsUpdate
         * @summary Update order item
         * @request PUT:/user/orders/{order_id}/items/{item_id}/
         * @secure
         */
        userOrdersItemsUpdate: (itemId: string, orderId: string, data: UserUpdateOrderItem, params?: RequestParams$7) => Promise<HttpResponse$6<OrderItemResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersItemsPartialUpdate
         * @summary Partially update order item
         * @request PATCH:/user/orders/{order_id}/items/{item_id}/
         * @secure
         */
        userOrdersItemsPartialUpdate: (itemId: string, orderId: string, data: PatchedUserUpdateOrderItem, params?: RequestParams$7) => Promise<HttpResponse$6<OrderItemResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersItemsDestroy
         * @summary Delete order item
         * @request DELETE:/user/orders/{order_id}/items/{item_id}/
         * @secure
         */
        userOrdersItemsDestroy: (itemId: string, orderId: string, params?: RequestParams$7) => Promise<HttpResponse$6<OrderItemResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersPaymentsRetrieve
         * @summary Retrieve payment
         * @request GET:/user/orders/{order_id}/payments/{payment_id}/
         * @secure
         */
        userOrdersPaymentsRetrieve: (orderId: string, paymentId: string, params?: RequestParams$7) => Promise<HttpResponse$6<PaymentResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserOrdersRefundsRetrieve
         * @summary Retrieve refund
         * @request GET:/user/orders/{order_id}/refunds/{refund_id}/
         * @secure
         */
        userOrdersRefundsRetrieve: (orderId: string, refundId: string, params?: RequestParams$7) => Promise<HttpResponse$6<RefundResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserProductsList
         * @summary List products
         * @request GET:/user/products/
         * @secure
         */
        userProductsList: (query: UserProductsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedProductListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserProductsRetrieve
         * @summary Retrieve product
         * @request GET:/user/products/{identifier}/
         * @secure
         */
        userProductsRetrieve: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserProductsPricesList
         * @summary List product price
         * @request GET:/user/products/{identifier}/prices/
         * @secure
         */
        userProductsPricesList: ({ identifier, ...query }: UserProductsPricesListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedProductPriceListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserProductsVariantsList
         * @summary List product variants
         * @request GET:/user/products/{identifier}/variants/
         * @secure
         */
        userProductsVariantsList: ({ identifier, ...query }: UserProductsVariantsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedProductVariantListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserProductsImagesList
         * @summary List product images
         * @request GET:/user/products/{product_id}/images/
         * @secure
         */
        userProductsImagesList: ({ productId, ...query }: UserProductsImagesListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedProductImageListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserProductsImagesRetrieve
         * @summary Retrieve product image
         * @request GET:/user/products/{product_id}/images/{image_id}/
         * @secure
         */
        userProductsImagesRetrieve: (imageId: string, productId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductImageResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserProductsPricesRetrieve
         * @summary Retrieve product price
         * @request GET:/user/products/{product_id}/prices/{price_id}/
         * @secure
         */
        userProductsPricesRetrieve: (priceId: string, productId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductPriceResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserProductsVariantsRetrieve
         * @summary Retrieve product variant
         * @request GET:/user/products/{product_id}/variants/{variant_id}/
         * @secure
         */
        userProductsVariantsRetrieve: (productId: string, variantId: string, params?: RequestParams$7) => Promise<HttpResponse$6<ProductVariantResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRedemptionsList
         * @summary List redemptions
         * @request GET:/user/redemptions/
         * @secure
         */
        userRedemptionsList: (query: UserRedemptionsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedRedemptionListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRedemptionsCreate
         * @summary Create redemption
         * @request POST:/user/redemptions/
         * @secure
         */
        userRedemptionsCreate: (data: UserCreateRedemption, params?: RequestParams$7) => Promise<HttpResponse$6<RedemptionResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRedemptionsRetrieve
         * @summary Retrieve redemption
         * @request GET:/user/redemptions/{action_id}/
         * @secure
         */
        userRedemptionsRetrieve: (actionId: string, params?: RequestParams$7) => Promise<HttpResponse$6<RedemptionResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserSellersList
         * @summary List sellers
         * @request GET:/user/sellers/
         * @secure
         */
        userSellersList: (query: UserSellersListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedSellerListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserSellersRetrieve
         * @summary Retrieve seller
         * @request GET:/user/sellers/{seller_id}/
         * @secure
         */
        userSellersRetrieve: (sellerId: string, params?: RequestParams$7) => Promise<HttpResponse$6<SellerResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserVouchersList
         * @summary List vouchers
         * @request GET:/user/vouchers/
         * @secure
         */
        userVouchersList: (query: UserVouchersListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedVoucherListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserVouchersRetrieve
         * @summary Retrieve voucher
         * @request GET:/user/vouchers/{identifier}/
         * @secure
         */
        userVouchersRetrieve: (identifier: string, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserVouchersActionsList
         * @summary List voucher actions
         * @request GET:/user/vouchers/{identifier}/actions/
         * @secure
         */
        userVouchersActionsList: ({ identifier, ...query }: UserVouchersActionsListParams, params?: RequestParams$7) => Promise<HttpResponse$6<PaginatedVoucherActionListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserVouchersActionsRetrieve
         * @summary Retrieve voucher action
         * @request GET:/user/vouchers/{voucher_id}/actions/{action_id}/
         * @secure
         */
        userVouchersActionsRetrieve: (actionId: string, voucherId: string, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherActionResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserVouchersQueryCreate
         * @summary Query voucher
         * @request POST:/user/vouchers/query/
         * @secure
         */
        userVouchersQueryCreate: (data: UserQueryVoucher, params?: RequestParams$7) => Promise<HttpResponse$6<VoucherResponse, any>>;
    };
    webhook: {
        /**
         * No description
         *
         * @tags webhook
         * @name WebhookCreate
         * @summary Receive Platform webhook
         * @request POST:/webhook/
         * @secure
         */
        webhookCreate: (data: Webhook$4, params?: RequestParams$7) => Promise<HttpResponse$6<ActionResponse$5, any>>;
    };
}

/** This serializer can be used if only a `status` is required in the response. */
interface ActionResponse$4 {
    /** @default "sucess" */
    status?: string;
}
interface Activate$6 {
    token: string;
    id: string;
    name: string;
    /** @format uuid */
    secret: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCampaign {
    id: string;
    /** @maxLength 50 */
    name?: string;
    /** @format uri */
    image?: string | null;
    /** @maxLength 255 */
    description?: string;
    start_date: number;
    end_date: number;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    currency: Currency$3;
    /** @maxLength 200 */
    credit_account_name?: string | null;
    /** @maxLength 64 */
    credit_account?: string | null;
    /** @maxLength 64 */
    account: string;
    total: number;
    fixed_amount: number | null;
    /**
     * @format decimal
     * @pattern ^-?\d{0,7}(?:\.\d{0,2})?$
     */
    percentage?: string | null;
    balance: number;
    /**
     * * `percentage` - Percentage
     * * `fixed` - Fixed
     * * `fixedpercentage` - Fixedpercentage
     */
    type?: "percentage" | "fixed" | "fixedpercentage";
    /**
     * * `pending` - Pending
     * * `accepted` - Accepted
     * * `rejected` - Rejected
     */
    default_status?: "pending" | "accepted" | "rejected";
    users?: any[];
    groups?: any[];
    /**
     * @min 1
     * @max 1000000000
     */
    max_per_user?: number | null;
    /**
     * @min 1
     * @max 1000000000
     */
    max_per_user_per_timeframe?: number | null;
    /**
     * * `daily` - Daily
     * * `weekly` - Weekly
     * * `monthly` - Monthly
     */
    timeframe?: "daily" | "weekly" | "monthly" | "" | null;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    transactions_currency: Currency$3;
    /**
     * @min 1
     * @max 1000000000
     */
    min_num_transactions?: number | null;
    min_value_transactions: number | null;
    /** @default true */
    active?: boolean;
    /** @default true */
    visible?: boolean;
    /** @default true */
    claim?: boolean;
    /** @maxLength 250 */
    expression?: string | null;
    /**
     * * `company.link.create` - company.link.create
     * * `company.link.update` - company.link.update
     * * `company.update` - company.update
     * * `currency.create` - currency.create
     * * `currency.update` - currency.update
     * * `user.create` - user.create
     * * `user.update` - user.update
     * * `user.password.reset` - user.password.reset
     * * `user.password.set` - user.password.set
     * * `user.deactivate.verify` - user.deactivate.verify
     * * `user.request_delete.verify` - user.request_delete.verify
     * * `user.email.verify` - user.email.verify
     * * `user.mobile.verify` - user.mobile.verify
     * * `email.create` - email.create
     * * `email.update` - email.update
     * * `mobile.create` - mobile.create
     * * `mobile.update` - mobile.update
     * * `address.create` - address.create
     * * `address.update` - address.update
     * * `document.create` - document.create
     * * `document.update` - document.update
     * * `bank_account.create` - bank_account.create
     * * `bank_account.update` - bank_account.update
     * * `crypto_account.create` - crypto_account.create
     * * `crypto_account.update` - crypto_account.update
     * * `account.create` - account.create
     * * `account.update` - account.update
     * * `transaction.create` - transaction.create
     * * `transaction.update` - transaction.update
     * * `transaction.initiate` - transaction.initiate
     * * `transaction.execute` - transaction.execute
     * * `transaction.transition.create` - transaction.transition.create
     * * `transaction.transition.update` - transaction.transition.update
     * * `mfa.sms.verify` - mfa.sms.verify
     */
    event?: "company.link.create" | "company.link.update" | "company.update" | "currency.create" | "currency.update" | "user.create" | "user.update" | "user.password.reset" | "user.password.set" | "user.deactivate.verify" | "user.request_delete.verify" | "user.email.verify" | "user.mobile.verify" | "email.create" | "email.update" | "mobile.create" | "mobile.update" | "address.create" | "address.update" | "document.create" | "document.update" | "bank_account.create" | "bank_account.update" | "crypto_account.create" | "crypto_account.update" | "account.create" | "account.update" | "transaction.create" | "transaction.update" | "transaction.initiate" | "transaction.execute" | "transaction.transition.create" | "transaction.transition.update" | "mfa.sms.verify" | "" | null;
    /** @maxLength 150 */
    event_user?: string | null;
    /** @maxLength 150 */
    event_amount?: string | null;
}
interface AdminCampaignResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminCampaign;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompany$4 {
    id: string;
    identifier: string;
    /** @format uuid */
    secret: string;
    name: string;
    operational_account?: string | null;
}
interface AdminCompanyResponse$4 {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminCompany$4;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateReward {
    id: string;
    user: string;
    campaign?: string;
    currency?: string;
    amount?: number;
    /**
     * * `pending` - Pending
     * * `accepted` - Accepted
     * * `rejected` - Rejected
     */
    status?: "pending" | "accepted" | "rejected";
    collection: string | null;
    created: number;
    data?: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateUpdateCampaign {
    id: string;
    /** @maxLength 50 */
    name?: string;
    /** @format uri */
    image?: string | null;
    /** @maxLength 255 */
    description?: string;
    start_date?: number | null;
    end_date?: number | null;
    currency: string;
    /** @maxLength 200 */
    credit_account_name?: string | null;
    /** @maxLength 64 */
    credit_account?: string | null;
    account?: string | null;
    total: number;
    fixed_amount?: number;
    /**
     * @format double
     * @min 0
     * @max 10000000
     * @exclusiveMax true
     */
    percentage?: number | null;
    balance: number;
    /**
     * * `percentage` - Percentage
     * * `fixed` - Fixed
     * * `fixedpercentage` - Fixedpercentage
     */
    type?: "percentage" | "fixed" | "fixedpercentage";
    /**
     * * `pending` - Pending
     * * `accepted` - Accepted
     * * `rejected` - Rejected
     */
    default_status?: "pending" | "accepted" | "rejected";
    users?: any[];
    groups?: any[];
    /**
     * @min 1
     * @max 1000000000
     */
    max_per_user?: number | null;
    /**
     * @min 1
     * @max 1000000000
     */
    max_per_user_per_timeframe?: number | null;
    /**
     * * `daily` - Daily
     * * `weekly` - Weekly
     * * `monthly` - Monthly
     */
    timeframe?: "daily" | "weekly" | "monthly" | "" | null;
    transactions_currency?: string | null;
    /**
     * @min 1
     * @max 1000000000
     */
    min_num_transactions?: number | null;
    min_value_transactions?: number | null;
    /** @default true */
    active?: boolean;
    /** @default true */
    visible?: boolean;
    /** @default true */
    claim?: boolean;
    /** @maxLength 250 */
    expression?: string | null;
    /**
     * * `company.link.create` - company.link.create
     * * `company.link.update` - company.link.update
     * * `company.update` - company.update
     * * `currency.create` - currency.create
     * * `currency.update` - currency.update
     * * `user.create` - user.create
     * * `user.update` - user.update
     * * `user.password.reset` - user.password.reset
     * * `user.password.set` - user.password.set
     * * `user.deactivate.verify` - user.deactivate.verify
     * * `user.request_delete.verify` - user.request_delete.verify
     * * `user.email.verify` - user.email.verify
     * * `user.mobile.verify` - user.mobile.verify
     * * `email.create` - email.create
     * * `email.update` - email.update
     * * `mobile.create` - mobile.create
     * * `mobile.update` - mobile.update
     * * `address.create` - address.create
     * * `address.update` - address.update
     * * `document.create` - document.create
     * * `document.update` - document.update
     * * `bank_account.create` - bank_account.create
     * * `bank_account.update` - bank_account.update
     * * `crypto_account.create` - crypto_account.create
     * * `crypto_account.update` - crypto_account.update
     * * `account.create` - account.create
     * * `account.update` - account.update
     * * `transaction.create` - transaction.create
     * * `transaction.update` - transaction.update
     * * `transaction.initiate` - transaction.initiate
     * * `transaction.execute` - transaction.execute
     * * `transaction.transition.create` - transaction.transition.create
     * * `transaction.transition.update` - transaction.transition.update
     * * `mfa.sms.verify` - mfa.sms.verify
     */
    event?: "company.link.create" | "company.link.update" | "company.update" | "currency.create" | "currency.update" | "user.create" | "user.update" | "user.password.reset" | "user.password.set" | "user.deactivate.verify" | "user.request_delete.verify" | "user.email.verify" | "user.mobile.verify" | "email.create" | "email.update" | "mobile.create" | "mobile.update" | "address.create" | "address.update" | "document.create" | "document.update" | "bank_account.create" | "bank_account.update" | "crypto_account.create" | "crypto_account.update" | "account.create" | "account.update" | "transaction.create" | "transaction.update" | "transaction.initiate" | "transaction.execute" | "transaction.transition.create" | "transaction.transition.update" | "mfa.sms.verify" | "" | null;
    /** @maxLength 150 */
    event_user?: string | null;
    /** @maxLength 150 */
    event_amount?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminReward {
    id: string;
    user: string;
    campaign: Campaign;
    currency: Currency$3;
    amount: number;
    /**
     * * `pending` - Pending
     * * `accepted` - Accepted
     * * `rejected` - Rejected
     */
    status?: "pending" | "accepted" | "rejected";
    collection: string | null;
    type: string;
    created: number;
}
interface AdminRewardResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminReward;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUser$3 {
    id: string;
    referral_code: string | null;
    referee_code: string | null;
}
interface AdminUserResponse$1 {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminUser$3;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Campaign {
    id: string;
    /** @maxLength 50 */
    name?: string;
    /** @maxLength 255 */
    description?: string;
    active?: boolean;
    default_status: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Currency$3 {
    /** @maxLength 30 */
    code: string;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
    enabled?: boolean;
}
interface CurrencyResponse$1 {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Currency$3;
}
interface Deactivate$6 {
    token: string;
    /** @default false */
    purge?: boolean;
}
interface PaginatedAdminCampaignList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminCampaign[];
}
interface PaginatedAdminCampaignListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminCampaignList;
}
interface PaginatedAdminRewardList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminReward[];
}
interface PaginatedAdminRewardListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminRewardList;
}
interface PaginatedAdminUserList$1 {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminUser$3[];
}
interface PaginatedAdminUserListResponse$1 {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminUserList$1;
}
interface PaginatedCurrencyList$1 {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Currency$3[];
}
interface PaginatedCurrencyListResponse$1 {
    /** @example "success" */
    status?: string;
    data?: PaginatedCurrencyList$1;
}
interface PaginatedUserCampaignList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: UserCampaign[];
}
interface PaginatedUserCampaignListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedUserCampaignList;
}
interface PaginatedUserRewardList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: UserReward[];
}
interface PaginatedUserRewardListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedUserRewardList;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCompany$2 {
    id?: string;
    identifier?: string;
    /** @format uuid */
    secret?: string;
    name?: string;
    operational_account?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCreateUpdateCampaign {
    id?: string;
    /** @maxLength 50 */
    name?: string;
    /** @format uri */
    image?: string | null;
    /** @maxLength 255 */
    description?: string;
    start_date?: number | null;
    end_date?: number | null;
    currency?: string;
    /** @maxLength 200 */
    credit_account_name?: string | null;
    /** @maxLength 64 */
    credit_account?: string | null;
    account?: string | null;
    total?: number;
    fixed_amount?: number;
    /**
     * @format double
     * @min 0
     * @max 10000000
     * @exclusiveMax true
     */
    percentage?: number | null;
    balance?: number;
    /**
     * * `percentage` - Percentage
     * * `fixed` - Fixed
     * * `fixedpercentage` - Fixedpercentage
     */
    type?: "percentage" | "fixed" | "fixedpercentage";
    /**
     * * `pending` - Pending
     * * `accepted` - Accepted
     * * `rejected` - Rejected
     */
    default_status?: "pending" | "accepted" | "rejected";
    users?: any[];
    groups?: any[];
    /**
     * @min 1
     * @max 1000000000
     */
    max_per_user?: number | null;
    /**
     * @min 1
     * @max 1000000000
     */
    max_per_user_per_timeframe?: number | null;
    /**
     * * `daily` - Daily
     * * `weekly` - Weekly
     * * `monthly` - Monthly
     */
    timeframe?: "daily" | "weekly" | "monthly" | "" | null;
    transactions_currency?: string | null;
    /**
     * @min 1
     * @max 1000000000
     */
    min_num_transactions?: number | null;
    min_value_transactions?: number | null;
    /** @default true */
    active?: boolean;
    /** @default true */
    visible?: boolean;
    /** @default true */
    claim?: boolean;
    /** @maxLength 250 */
    expression?: string | null;
    /**
     * * `company.link.create` - company.link.create
     * * `company.link.update` - company.link.update
     * * `company.update` - company.update
     * * `currency.create` - currency.create
     * * `currency.update` - currency.update
     * * `user.create` - user.create
     * * `user.update` - user.update
     * * `user.password.reset` - user.password.reset
     * * `user.password.set` - user.password.set
     * * `user.deactivate.verify` - user.deactivate.verify
     * * `user.request_delete.verify` - user.request_delete.verify
     * * `user.email.verify` - user.email.verify
     * * `user.mobile.verify` - user.mobile.verify
     * * `email.create` - email.create
     * * `email.update` - email.update
     * * `mobile.create` - mobile.create
     * * `mobile.update` - mobile.update
     * * `address.create` - address.create
     * * `address.update` - address.update
     * * `document.create` - document.create
     * * `document.update` - document.update
     * * `bank_account.create` - bank_account.create
     * * `bank_account.update` - bank_account.update
     * * `crypto_account.create` - crypto_account.create
     * * `crypto_account.update` - crypto_account.update
     * * `account.create` - account.create
     * * `account.update` - account.update
     * * `transaction.create` - transaction.create
     * * `transaction.update` - transaction.update
     * * `transaction.initiate` - transaction.initiate
     * * `transaction.execute` - transaction.execute
     * * `transaction.transition.create` - transaction.transition.create
     * * `transaction.transition.update` - transaction.transition.update
     * * `mfa.sms.verify` - mfa.sms.verify
     */
    event?: "company.link.create" | "company.link.update" | "company.update" | "currency.create" | "currency.update" | "user.create" | "user.update" | "user.password.reset" | "user.password.set" | "user.deactivate.verify" | "user.request_delete.verify" | "user.email.verify" | "user.mobile.verify" | "email.create" | "email.update" | "mobile.create" | "mobile.update" | "address.create" | "address.update" | "document.create" | "document.update" | "bank_account.create" | "bank_account.update" | "crypto_account.create" | "crypto_account.update" | "account.create" | "account.update" | "transaction.create" | "transaction.update" | "transaction.initiate" | "transaction.execute" | "transaction.transition.create" | "transaction.transition.update" | "mfa.sms.verify" | "" | null;
    /** @maxLength 150 */
    event_user?: string | null;
    /** @maxLength 150 */
    event_amount?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminReward {
    id?: string;
    user?: string;
    campaign?: Campaign;
    currency?: Currency$3;
    amount?: number;
    /**
     * * `pending` - Pending
     * * `accepted` - Accepted
     * * `rejected` - Rejected
     */
    status?: "pending" | "accepted" | "rejected";
    collection?: string | null;
    type?: string;
    created?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedUserUpdateReferral {
    referral_code?: string | null;
    referee_code?: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface User$4 {
    id: string;
    referral_code: string | null;
    referee_code: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserCampaign {
    id: string;
    /** @maxLength 50 */
    name?: string;
    description: string;
    /** @format uri */
    image?: string | null;
    start_date: number;
    end_date: number;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    currency: Currency$3;
    total: number;
    fixed_amount: number;
    /**
     * @format decimal
     * @pattern ^-?\d{0,7}(?:\.\d{0,2})?$
     */
    percentage?: string | null;
    balance: number;
    type: string;
    default_status: string;
    users?: any[];
    groups?: any[];
    /**
     * @min -2147483648
     * @max 2147483647
     */
    max_per_user?: number | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    max_per_user_per_timeframe?: number | null;
    timeframe?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    transactions_currency: Currency$3;
    /**
     * @min 1
     * @max 1000000000
     */
    min_num_transactions?: number | null;
    min_value_transactions: number | null;
    active?: boolean;
    claim?: boolean;
}
interface UserCampaignResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: UserCampaign;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserCreateReward {
    id: string;
    user: string;
    campaign: string;
    currency: Currency$3;
    amount: number;
    status: string;
    collection: string | null;
    created: number;
    data?: Record<string, any>;
}
interface UserResponse$2 {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: User$4;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserReward {
    id: string;
    user: string;
    campaign: Campaign;
    currency: Currency$3;
    amount: number;
    status: string;
    type: string;
    /** @maxLength 64 */
    collection?: string | null;
    created: number;
}
interface UserRewardResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: UserReward;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserUpdateReferral {
    referral_code: string | null;
    referee_code: string;
}
interface Webhook$3 {
    id: string;
    /**
     * * `company.link.create` - company.link.create
     * * `company.link.update` - company.link.update
     * * `company.update` - company.update
     * * `currency.create` - currency.create
     * * `currency.update` - currency.update
     * * `user.create` - user.create
     * * `user.update` - user.update
     * * `user.password.reset` - user.password.reset
     * * `user.password.set` - user.password.set
     * * `user.deactivate.verify` - user.deactivate.verify
     * * `user.request_delete.verify` - user.request_delete.verify
     * * `user.email.verify` - user.email.verify
     * * `user.mobile.verify` - user.mobile.verify
     * * `email.create` - email.create
     * * `email.update` - email.update
     * * `mobile.create` - mobile.create
     * * `mobile.update` - mobile.update
     * * `address.create` - address.create
     * * `address.update` - address.update
     * * `document.create` - document.create
     * * `document.update` - document.update
     * * `bank_account.create` - bank_account.create
     * * `bank_account.update` - bank_account.update
     * * `crypto_account.create` - crypto_account.create
     * * `crypto_account.update` - crypto_account.update
     * * `account.create` - account.create
     * * `account.update` - account.update
     * * `transaction.create` - transaction.create
     * * `transaction.update` - transaction.update
     * * `transaction.initiate` - transaction.initiate
     * * `transaction.execute` - transaction.execute
     * * `transaction.transition.create` - transaction.transition.create
     * * `transaction.transition.update` - transaction.transition.update
     * * `mfa.sms.verify` - mfa.sms.verify
     */
    event: "company.link.create" | "company.link.update" | "company.update" | "currency.create" | "currency.update" | "user.create" | "user.update" | "user.password.reset" | "user.password.set" | "user.deactivate.verify" | "user.request_delete.verify" | "user.email.verify" | "user.mobile.verify" | "email.create" | "email.update" | "mobile.create" | "mobile.update" | "address.create" | "address.update" | "document.create" | "document.update" | "bank_account.create" | "bank_account.update" | "crypto_account.create" | "crypto_account.update" | "account.create" | "account.update" | "transaction.create" | "transaction.update" | "transaction.initiate" | "transaction.execute" | "transaction.transition.create" | "transaction.transition.update" | "mfa.sms.verify";
    company: string;
    data: Record<string, any>;
}
interface AdminCampaignsListParams {
    active?: boolean;
    available?: string;
    currency?: string;
    end_date?: string;
    end_date__gt?: string;
    end_date__lt?: string;
    /** @format uuid */
    id?: string;
    name__contains?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    search?: string;
    start_date?: string;
    start_date__gt?: string;
    start_date__lt?: string;
    type?: string;
    visible?: boolean;
}
interface AdminCurrenciesListParams$2 {
    code?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminRewardsListParams {
    campaign?: string;
    currency?: string;
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
    status__in?: string;
    type?: string;
    user?: string;
}
interface AdminUsersListParams$3 {
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    referee_code?: string;
    referral_code?: string;
}
interface UserCampaignsListParams {
    active?: boolean;
    available?: string;
    currency?: string;
    end_date?: string;
    end_date__gt?: string;
    end_date__lt?: string;
    /** @format uuid */
    id?: string;
    name__contains?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    search?: string;
    start_date?: string;
    start_date__gt?: string;
    start_date__lt?: string;
    type?: string;
    visible?: boolean;
}
interface UserRewardsListParams {
    campaign?: string;
    currency?: string;
    /** @format uuid */
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
    status__in?: string;
    type?: string;
}
type QueryParamsType$5 = Record<string | number, any>;
type ResponseFormat$5 = keyof Omit<Body, "body" | "bodyUsed">;
interface FullRequestParams$5 extends Omit<RequestInit, "body"> {
    /** set parameter to `true` for call `securityWorker` for this request */
    secure?: boolean;
    /** request path */
    path: string;
    /** content type of request body */
    type?: ContentType$5;
    /** query params */
    query?: QueryParamsType$5;
    /** format of response (i.e. response.json() -> format: "json") */
    format?: ResponseFormat$5;
    /** request body */
    body?: unknown;
    /** base url */
    baseUrl?: string;
    /** request cancellation token */
    cancelToken?: CancelToken$5;
}
type RequestParams$6 = Omit<FullRequestParams$5, "body" | "method" | "query" | "path">;
interface ApiConfig$5<SecurityDataType = unknown> {
    baseUrl?: string;
    baseApiParams?: Omit<RequestParams$6, "baseUrl" | "cancelToken" | "signal">;
    securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams$6 | void> | RequestParams$6 | void;
    customFetch?: typeof fetch;
}
interface HttpResponse$5<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}
type CancelToken$5 = Symbol | string | number;
declare enum ContentType$5 {
    Json = "application/json",
    JsonApi = "application/vnd.api+json",
    FormData = "multipart/form-data",
    UrlEncoded = "application/x-www-form-urlencoded",
    Text = "text/plain"
}
declare class HttpClient$5<SecurityDataType = unknown> {
    baseUrl: string;
    private securityData;
    private securityWorker?;
    private abortControllers;
    private customFetch;
    private baseApiParams;
    constructor(apiConfig?: ApiConfig$5<SecurityDataType>);
    setSecurityData: (data: SecurityDataType | null) => void;
    protected encodeQueryParam(key: string, value: any): string;
    protected addQueryParam(query: QueryParamsType$5, key: string): string;
    protected addArrayQueryParam(query: QueryParamsType$5, key: string): any;
    protected toQueryString(rawQuery?: QueryParamsType$5): string;
    protected addQueryParams(rawQuery?: QueryParamsType$5): string;
    private contentFormatters;
    protected mergeRequestParams(params1: RequestParams$6, params2?: RequestParams$6): RequestParams$6;
    protected createAbortSignal: (cancelToken: CancelToken$5) => AbortSignal | undefined;
    abortRequest: (cancelToken: CancelToken$5) => void;
    request: <T = any, E = any>({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }: FullRequestParams$5) => Promise<HttpResponse$5<T, E>>;
}
/**
 * @title Reward Service API
 * @version 1 (1)
 * @termsOfService https://rehive.com/terms/
 * @baseUrl https://reward.services.rehive.io/api/
 * @externalDocs https://docs.rehive.com
 * @contact Rehive Support <support@rehive.com> (https://rehive.com/support/)
 *
 *
 * The **Reward Service API** is used for reward campaigns in Rehive.
 *
 */
declare class Api$6<SecurityDataType extends unknown> extends HttpClient$5<SecurityDataType> {
    activate: {
        /**
         * No description
         *
         * @tags activate
         * @name ActivateCreate
         * @summary Activate service
         * @request POST:/activate/
         * @secure
         */
        activateCreate: (data: Activate$6, params?: RequestParams$6) => Promise<HttpResponse$5<ActionResponse$4, any>>;
    };
    admin: {
        /**
         * No description
         *
         * @tags admin
         * @name AdminCampaignsList
         * @summary List campaign
         * @request GET:/admin/campaigns/
         * @secure
         */
        adminCampaignsList: (query: AdminCampaignsListParams, params?: RequestParams$6) => Promise<HttpResponse$5<PaginatedAdminCampaignListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCampaignsCreate
         * @summary Create campaign
         * @request POST:/admin/campaigns/
         * @secure
         */
        adminCampaignsCreate: (data: AdminCreateUpdateCampaign, params?: RequestParams$6) => Promise<HttpResponse$5<AdminCampaignResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCampaignsRetrieve
         * @summary Retrieve campaign
         * @request GET:/admin/campaigns/{id}/
         * @secure
         */
        adminCampaignsRetrieve: (id: string, params?: RequestParams$6) => Promise<HttpResponse$5<AdminCampaignResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCampaignsUpdate
         * @summary Update campaign
         * @request PUT:/admin/campaigns/{id}/
         * @secure
         */
        adminCampaignsUpdate: (id: string, data: AdminCreateUpdateCampaign, params?: RequestParams$6) => Promise<HttpResponse$5<AdminCampaignResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCampaignsPartialUpdate
         * @summary Partially update campaign
         * @request PATCH:/admin/campaigns/{id}/
         * @secure
         */
        adminCampaignsPartialUpdate: (id: string, data: PatchedAdminCreateUpdateCampaign, params?: RequestParams$6) => Promise<HttpResponse$5<AdminCampaignResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCampaignsDestroy
         * @summary Delete campaign
         * @request DELETE:/admin/campaigns/{id}/
         * @secure
         */
        adminCampaignsDestroy: (id: string, params?: RequestParams$6) => Promise<HttpResponse$5<AdminCampaignResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyRetrieve
         * @summary Retrieve company
         * @request GET:/admin/company/
         * @secure
         */
        adminCompanyRetrieve: (params?: RequestParams$6) => Promise<HttpResponse$5<AdminCompanyResponse$4, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyUpdate
         * @summary Update company
         * @request PUT:/admin/company/
         * @secure
         */
        adminCompanyUpdate: (data: AdminCompany$4, params?: RequestParams$6) => Promise<HttpResponse$5<AdminCompanyResponse$4, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyPartialUpdate
         * @summary Partially update company
         * @request PATCH:/admin/company/
         * @secure
         */
        adminCompanyPartialUpdate: (data: PatchedAdminCompany$2, params?: RequestParams$6) => Promise<HttpResponse$5<AdminCompanyResponse$4, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCurrenciesList
         * @summary List currencies
         * @request GET:/admin/currencies/
         * @secure
         */
        adminCurrenciesList: (query: AdminCurrenciesListParams$2, params?: RequestParams$6) => Promise<HttpResponse$5<PaginatedCurrencyListResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCurrenciesRetrieve
         * @summary Retrieve currency
         * @request GET:/admin/currencies/{code}/
         * @secure
         */
        adminCurrenciesRetrieve: (code: string, params?: RequestParams$6) => Promise<HttpResponse$5<CurrencyResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRewardsList
         * @summary List rewards
         * @request GET:/admin/rewards/
         * @secure
         */
        adminRewardsList: (query: AdminRewardsListParams, params?: RequestParams$6) => Promise<HttpResponse$5<PaginatedAdminRewardListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRewardsCreate
         * @summary Create reward
         * @request POST:/admin/rewards/
         * @secure
         */
        adminRewardsCreate: (data: AdminCreateReward, params?: RequestParams$6) => Promise<HttpResponse$5<AdminRewardResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRewardsRetrieve
         * @summary Retrieve reward
         * @request GET:/admin/rewards/{id}/
         * @secure
         */
        adminRewardsRetrieve: (id: string, params?: RequestParams$6) => Promise<HttpResponse$5<AdminRewardResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRewardsUpdate
         * @summary Update reward
         * @request PUT:/admin/rewards/{id}/
         * @secure
         */
        adminRewardsUpdate: (id: string, data: AdminReward, params?: RequestParams$6) => Promise<HttpResponse$5<AdminRewardResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRewardsPartialUpdate
         * @summary Partially update reward
         * @request PATCH:/admin/rewards/{id}/
         * @secure
         */
        adminRewardsPartialUpdate: (id: string, data: PatchedAdminReward, params?: RequestParams$6) => Promise<HttpResponse$5<AdminRewardResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUsersList
         * @summary List users
         * @request GET:/admin/users/
         * @secure
         */
        adminUsersList: (query: AdminUsersListParams$3, params?: RequestParams$6) => Promise<HttpResponse$5<PaginatedAdminUserListResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUsersRetrieve
         * @summary Retrieve user
         * @request GET:/admin/users/{id}/
         * @secure
         */
        adminUsersRetrieve: (id: string, params?: RequestParams$6) => Promise<HttpResponse$5<AdminUserResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminWebhookCreate
         * @summary Receive Platform webhook
         * @request POST:/admin/webhook/
         * @secure
         */
        adminWebhookCreate: (data: Webhook$3, params?: RequestParams$6) => Promise<HttpResponse$5<ActionResponse$4, any>>;
    };
    deactivate: {
        /**
         * No description
         *
         * @tags deactivate
         * @name DeactivateCreate
         * @summary Deactivate service
         * @request POST:/deactivate/
         * @secure
         */
        deactivateCreate: (data: Deactivate$6, params?: RequestParams$6) => Promise<HttpResponse$5<ActionResponse$4, any>>;
    };
    user: {
        /**
         * No description
         *
         * @tags user
         * @name UserRetrieve
         * @summary Retrieve user
         * @request GET:/user/
         * @secure
         */
        userRetrieve: (params?: RequestParams$6) => Promise<HttpResponse$5<UserResponse$2, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserUpdate
         * @summary Update user
         * @request PUT:/user/
         * @secure
         */
        userUpdate: (data: UserUpdateReferral, params?: RequestParams$6) => Promise<HttpResponse$5<UserResponse$2, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserPartialUpdate
         * @summary Partially update user
         * @request PATCH:/user/
         * @secure
         */
        userPartialUpdate: (data: PatchedUserUpdateReferral, params?: RequestParams$6) => Promise<HttpResponse$5<UserResponse$2, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserCampaignsList
         * @summary List campaigns
         * @request GET:/user/campaigns/
         * @secure
         */
        userCampaignsList: (query: UserCampaignsListParams, params?: RequestParams$6) => Promise<HttpResponse$5<PaginatedUserCampaignListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserCampaignsRetrieve
         * @summary Retrieve campaign
         * @request GET:/user/campaigns/{id}/
         * @secure
         */
        userCampaignsRetrieve: (id: string, params?: RequestParams$6) => Promise<HttpResponse$5<UserCampaignResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRewardsList
         * @summary List rewards
         * @request GET:/user/rewards/
         * @secure
         */
        userRewardsList: (query: UserRewardsListParams, params?: RequestParams$6) => Promise<HttpResponse$5<PaginatedUserRewardListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRewardsCreate
         * @summary Create reward
         * @request POST:/user/rewards/
         * @secure
         */
        userRewardsCreate: (data: UserCreateReward, params?: RequestParams$6) => Promise<HttpResponse$5<UserRewardResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRewardsRetrieve
         * @summary Retrieve user
         * @request GET:/user/rewards/{id}/
         * @secure
         */
        userRewardsRetrieve: (id: string, params?: RequestParams$6) => Promise<HttpResponse$5<UserRewardResponse, any>>;
    };
    webhook: {
        /**
         * No description
         *
         * @tags webhook
         * @name WebhookCreate
         * @summary Receive Platform webhook
         * @request POST:/webhook/
         * @secure
         */
        webhookCreate: (data: Webhook$3, params?: RequestParams$6) => Promise<HttpResponse$5<ActionResponse$4, any>>;
    };
}

interface Activate$5 {
    /**
     * Token
     * @minLength 1
     */
    token: string;
    /**
     * Id
     * @minLength 1
     */
    id?: string;
    /**
     * Email
     * @minLength 1
     */
    email?: string;
    /**
     * Secret
     * @format uuid
     */
    secret?: string;
}
interface AdminCreateAsset$1 {
    /**
     * Address
     * @minLength 1
     */
    address: string;
    /**
     * Currency code
     * @minLength 1
     * @maxLength 12
     */
    currency_code: string;
    /**
     * Description
     * @minLength 1
     */
    description?: string;
    /**
     * Symbol
     * @minLength 1
     */
    symbol?: string;
    /**
     * Unit
     * @minLength 1
     */
    unit?: string;
    /**
     * Id
     * @minLength 1
     */
    id?: string;
    /** Issued by company */
    issued_by_company?: boolean;
    /** Sep24 enabled */
    sep24_enabled?: boolean;
    /** Auth required */
    auth_required?: boolean;
    /**
     * Auth signing key
     * @minLength 1
     */
    auth_signing_key?: string;
    /**
     * Divisibility
     * @min 0
     * @max 7
     */
    divisibility?: number;
}
interface AdminAsset$1 {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Address
     * @minLength 1
     */
    address?: string | null;
    /**
     * Currency code
     * @minLength 1
     */
    currency_code?: string | null;
    /** Auth required */
    auth_required?: boolean;
    /**
     * Auth signing key
     * @maxLength 100
     */
    auth_signing_key?: string | null;
    /**
     * Display decimals
     * @min 0
     * @max 2147483647
     */
    display_decimals?: number;
}
interface AdminAuthAssetTrust$1 {
    /** Trustor public address */
    trustor_public_address: number;
    /** Authorize */
    authorize: boolean;
    /**
     * Asset id
     * @format uuid
     */
    asset_id: string;
}
interface AdminFundAsset$1 {
    /** Issuer secret */
    issuer_secret?: string | null;
    /** Amount */
    amount: number;
    /**
     * Asset id
     * @format uuid
     */
    asset_id: string;
}
interface BlacklistedAccount$1 {
    /** ID */
    id?: number;
    /**
     * Public address
     * @minLength 1
     * @maxLength 100
     */
    public_address: string;
    /**
     * Name
     * @maxLength 100
     */
    name?: string | null;
    /**
     * Description
     * @maxLength 255
     */
    description?: string | null;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
}
interface Coldstorage$1 {
    /** Balance */
    balance?: string;
    /**
     * Rehive account reference
     * @minLength 1
     */
    rehive_account_reference?: string;
    /** User account identifier */
    user_account_identifier?: string;
}
interface ColdstorageAccount$1 {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Account address
     * @maxLength 100
     */
    account_address?: string | null;
    /** Cursor */
    cursor?: number;
    /** User */
    user?: string;
    /** Status */
    status?: "Active" | "Disabled" | "Removed";
    /** Type */
    type?: "deposit" | "withdraw" | "issue" | null;
    /** Primary */
    primary?: boolean;
    /**
     * Date monitoring was disabled
     * @format date-time
     */
    date_monitoring_was_disabled?: string | null;
    /** Service controlled */
    service_controlled?: boolean;
    /**
     * Note
     * @maxLength 255
     */
    note?: string | null;
}
interface CompanyAdmin$1 {
    /**
     * Identifier
     * @minLength 1
     */
    identifier?: string | null;
    /**
     * Secret
     * @format uuid
     */
    secret?: string | null;
    /**
     * Email
     * @format email
     * @maxLength 254
     */
    email?: string | null;
    /** Has completed setup */
    has_completed_setup: boolean;
    /** Active */
    active?: boolean;
    /** Is federated */
    is_federated?: string;
    /** Federation domain */
    federation_domain?: string;
}
interface DefaultGroupAccountPair$1 {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Group
     * @minLength 1
     * @maxLength 100
     */
    group: string;
    /**
     * Account
     * @minLength 1
     * @maxLength 100
     */
    account: string;
}
interface CompanyConfiguration$2 {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Transaction credit subtype
     * @maxLength 100
     */
    transaction_credit_subtype?: string | null;
    /**
     * Transaction debit subtype
     * @maxLength 100
     */
    transaction_debit_subtype?: string | null;
    /**
     * Transaction fee subtype
     * @maxLength 100
     */
    transaction_fee_subtype?: string | null;
    /** Use default as fallback */
    use_default_as_fallback?: boolean;
    /**
     * Transaction fund subtype
     * @maxLength 100
     */
    transaction_fund_subtype?: string | null;
    /**
     * Transaction issue subtype
     * @maxLength 100
     */
    transaction_issue_subtype?: string | null;
    /**
     * Transaction withdraw subtype
     * @maxLength 100
     */
    transaction_withdraw_subtype?: string | null;
    /**
     * Transaction credit warmstorage subtype
     * @maxLength 100
     */
    transaction_credit_warmstorage_subtype?: string | null;
    /**
     * Transaction debit warmstorage subtype
     * @maxLength 100
     */
    transaction_debit_warmstorage_subtype?: string | null;
    /**
     * Transaction credit hotwallet subtype
     * @maxLength 100
     */
    transaction_credit_hotwallet_subtype?: string | null;
    /**
     * Transaction debit hotwallet subtype
     * @maxLength 100
     */
    transaction_debit_hotwallet_subtype?: string | null;
    /**
     * Transaction credit coldstorage subtype
     * @maxLength 100
     */
    transaction_credit_coldstorage_subtype?: string | null;
    /**
     * Transaction debit coldstorage subtype
     * @maxLength 100
     */
    transaction_debit_coldstorage_subtype?: string | null;
    currency_fees_paid_by_company?: (string | null)[];
    group_account_pairs?: DefaultGroupAccountPair$1[];
    /** Disable withdrawals */
    disable_withdrawals?: boolean;
    /** Allow multiple memos per user */
    allow_multiple_memos_per_user?: boolean;
    /**
     * External signer url
     * @maxLength 255
     */
    external_signer_url?: string | null;
    /**
     * External signer key
     * @maxLength 255
     */
    external_signer_key?: string | null;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
}
interface AnchorPlatformConfiguration$1 {
    /**
     * Sep10 jwt secret
     * @minLength 1
     * @maxLength 100
     */
    sep10_jwt_secret?: string | null;
    /**
     * Anchor platform api key
     * @minLength 1
     * @maxLength 100
     */
    anchor_platform_api_key?: string | null;
    /**
     * Anchor platform base api
     * @minLength 1
     * @maxLength 255
     */
    anchor_platform_base_api?: string | null;
    /**
     * Anchor tier requirement
     * @minLength 1
     * @maxLength 100
     */
    anchor_tier_requirement?: string | null;
    withdrawable_currencies?: (string | null)[];
    /**
     * Prs return url
     * @minLength 1
     * @maxLength 255
     */
    prs_return_url?: string | null;
}
interface StellarToml$1 {
    /**
     * File
     * @format uri
     */
    file?: string;
}
interface Federation$1 {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Domain
     * @maxLength 255
     */
    domain?: string | null;
    /** Validated */
    validated?: boolean;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
}
interface Hotwallet$1 {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Rehive account reference
     * @minLength 1
     */
    rehive_account_reference?: string;
    /**
     * Low balance percentage
     * @format decimal
     */
    low_balance_percentage?: string;
    /**
     * Low balance amount
     * @min -9223372036854776000
     * @max 9223372036854776000
     */
    low_balance_amount?: number;
    /** Fee priority */
    fee_priority?: "high" | "medium" | "low";
    /** Fee maximum */
    fee_maximum?: "10" | "20" | "30" | "40" | "50" | "60" | "70" | "80" | "90" | "95" | "99";
    /** Externally signed */
    externally_signed?: boolean;
    /** Primary hotwallet account */
    primary_hotwallet_account?: string;
}
interface HotwalletBalance$1 {
    /** Balance */
    balance?: string;
    /** Rehive account reference */
    rehive_account_reference?: string;
    /** Low balance percentage */
    low_balance_percentage?: string;
    /** User account identifier */
    user_account_identifier?: string;
    /** Primary stellar account */
    primary_stellar_account?: string;
}
interface HotwalletFund$1 {
    /** Account address */
    account_address?: string;
}
interface HotwalletFees$1 {
    /** Total fees */
    total_fees?: string;
}
interface HotwalletMerge$1 {
    /**
     * Destination account
     * @minLength 1
     */
    destination_account: string;
}
interface HotwalletSend$1 {
    /**
     * Rehive code
     * @minLength 1
     */
    rehive_code?: string;
    /** Rehive response */
    rehive_response?: object;
    /** Reference */
    reference?: string | null;
    /** To reference */
    to_reference?: string | null;
    /**
     * Amount
     * @min 0
     */
    amount: number;
    /**
     * Currency
     * @default "XLM"
     */
    currency?: string | null;
    /**
     * Account
     * @default "default"
     */
    account?: string | null;
    /**
     * Debit account
     * @default "default"
     */
    debit_account?: string | null;
    /**
     * Memo
     * @maxLength 28
     * @default ""
     */
    memo?: string;
}
interface KnownPublicAddresses$1 {
    /** ID */
    id?: number;
    /**
     * Public address
     * @maxLength 100
     */
    public_address?: string | null;
    /**
     * Name
     * @maxLength 100
     */
    name?: string | null;
    /**
     * Description
     * @maxLength 255
     */
    description?: string | null;
    /**
     * Logo
     * @format uri
     */
    logo?: string | null;
    /** Requires memo */
    requires_memo?: boolean;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
}
interface AdminMemo$1 {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Data
     * @minLength 1
     */
    data?: string | null;
    /** Memo type */
    memo_type?: "MEMO_TEXT" | "MEMO_ID" | "MEMO_HASH" | "MEMO_RETURN" | null;
    /**
     * Rehive account
     * @maxLength 255
     */
    rehive_account?: string | null;
    /** Primary */
    primary?: boolean;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /** User */
    user?: number | null;
}
interface UserSeralizer$1 {
    /**
     * Id
     * @minLength 1
     */
    id?: string;
    /**
     * Email
     * @format email
     * @minLength 1
     */
    email?: string | null;
    /**
     * Identifier
     * @minLength 1
     */
    identifier?: string;
    /**
     * First name
     * @maxLength 50
     */
    first_name?: string | null;
    /**
     * Last name
     * @maxLength 50
     */
    last_name?: string | null;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /**
     * Account id
     * @minLength 1
     */
    account_id?: string | null;
    /**
     * Username
     * @maxLength 150
     */
    username?: string | null;
    /** Memo */
    memo?: string;
}
interface AdminSEP10AuthenticatedAccount$1 {
    /**
     * Identifier
     * @format uuid
     */
    identifier?: string;
    /**
     * Onchain identifier
     * @minLength 1
     */
    onchain_identifier?: string;
    user: UserSeralizer$1;
    /** Is validated */
    is_validated?: boolean;
    /**
     * Client domain
     * @minLength 1
     */
    client_domain?: string | null;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
}
interface Transaction$1 {
    /** ID */
    id?: number;
    /**
     * User
     * @minLength 1
     */
    user: string;
    /**
     * Reason for assigning
     * @maxLength 255
     */
    reason_for_assigning?: string | null;
    /**
     * Rehive code
     * @minLength 1
     */
    rehive_code?: string | null;
    /**
     * External id
     * @minLength 1
     */
    external_id?: string | null;
    /** Rehive response */
    rehive_response?: object | null;
    /** Tx type */
    tx_type?: "debit" | "credit" | "deposit" | "withdraw" | "transfer" | "fund" | "issue" | "asset_auth";
    /** Amount */
    amount?: number;
    /**
     * Currency
     * @minLength 1
     */
    currency?: string;
    /** Status */
    status?: "Initiated" | "Quoted" | "Unfunded" | "Funded" | "Waiting" | "Pending" | "Confirmed" | "Complete" | "Failed" | "Cancelled" | null;
    /** Fee */
    fee?: number;
    /**
     * To reference
     * @minLength 1
     */
    to_reference?: string | null;
    /**
     * From reference
     * @minLength 1
     */
    from_reference?: string | null;
    /** Horizon response */
    horizon_response?: object | null;
    /** Withdrawal status */
    withdrawal_status?: "pending_withdrawal" | "failed_withdrawal" | "approved_withdrawal" | null;
    /** Transaction hash */
    transaction_hash?: string;
    /**
     * Xdr
     * @minLength 1
     */
    xdr?: string | null;
    /** Signed */
    signed?: boolean;
    /**
     * Memo
     * @minLength 1
     */
    memo?: string;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /**
     * Completed
     * @format date-time
     */
    completed?: string | null;
}
interface AdminSEP24Transaction$1 {
    /**
     * Identifier
     * @format uuid
     */
    identifier?: string;
    /**
     * Anchor platform id
     * @minLength 1
     */
    anchor_platform_id?: string;
    /**
     * Sep10 authenticated account
     * @format uuid
     */
    sep10_authenticated_account?: string | null;
    /** Prs request */
    prs_request?: string;
    /** Tx type */
    tx_type: "deposit" | "withdraw";
    /** Amount */
    amount?: number;
    /**
     * Currency
     * @minLength 1
     */
    currency?: string;
    transaction: Transaction$1;
    /**
     * Rehive withdrawal account reference
     * @minLength 1
     */
    rehive_withdrawal_account_reference?: string | null;
    /**
     * Rehive withdrawal transaction id
     * @minLength 1
     */
    rehive_withdrawal_transaction_id?: string | null;
    /**
     * Processing account
     * @minLength 1
     */
    processing_account?: string;
    /**
     * Rehive internal dispersal collection id
     * @minLength 1
     */
    rehive_internal_dispersal_collection_id?: string;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /** Status */
    status: "initiated" | "initiated_invoicing" | "prs_requested" | "prs_quoted" | "prs_processing" | "prs_complete" | "processing_internal_dispersal" | "completed_internal_dispersal" | "processing_external_dispersal" | "completed_external_dispersal" | "complete" | "failed";
}
interface StellarAccount$1 {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Account address
     * @maxLength 100
     */
    account_address?: string | null;
    /** Cursor */
    cursor?: number;
    /** User */
    user?: string;
    /** Status */
    status?: "Active" | "Disabled" | "Removed";
    /** Type */
    type?: "deposit" | "withdraw" | "issue" | null;
    /** Primary */
    primary?: boolean;
    /**
     * Date monitoring was disabled
     * @format date-time
     */
    date_monitoring_was_disabled?: string | null;
    /** Service controlled */
    service_controlled?: boolean;
    /**
     * Note
     * @maxLength 255
     */
    note?: string | null;
}
interface StellarAccountGenerate$1 {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Account address
     * @minLength 1
     */
    account_address?: string | null;
    /** Type */
    type?: "deposit" | "withdraw" | "issue" | null;
}
interface StellarAccountChangeOwnership$1 {
    /**
     * New owner address
     * @minLength 1
     */
    new_owner_address: string;
}
interface AdminUserInfoSeralizer$1 {
    /**
     * Id
     * @minLength 1
     */
    id?: string;
    /**
     * Email
     * @format email
     * @minLength 1
     */
    email?: string | null;
    /**
     * Identifier
     * @minLength 1
     */
    identifier?: string;
    /** Crypto */
    crypto?: string;
    /**
     * Username
     * @maxLength 150
     */
    username?: string | null;
    /** Memo */
    memo?: string;
}
interface AdminTransaction$1 {
    /** ID */
    id?: number;
    user: AdminUserInfoSeralizer$1;
    /**
     * Reason for assigning
     * @maxLength 255
     */
    reason_for_assigning?: string | null;
    /**
     * Rehive code
     * @minLength 1
     */
    rehive_code?: string | null;
    /**
     * External id
     * @minLength 1
     */
    external_id?: string | null;
    /** Rehive response */
    rehive_response?: object | null;
    /** Tx type */
    tx_type?: "debit" | "credit" | "deposit" | "withdraw" | "transfer" | "fund" | "issue" | "asset_auth";
    /** Amount */
    amount?: number;
    /**
     * Currency
     * @minLength 1
     */
    currency?: string;
    /** Status */
    status?: "Initiated" | "Quoted" | "Unfunded" | "Funded" | "Waiting" | "Pending" | "Confirmed" | "Complete" | "Failed" | "Cancelled" | null;
    /** Fee */
    fee?: number;
    /**
     * To reference
     * @minLength 1
     */
    to_reference?: string | null;
    /**
     * From reference
     * @minLength 1
     */
    from_reference?: string | null;
    /** Horizon response */
    horizon_response?: object | null;
    /** Withdrawal status */
    withdrawal_status?: "pending_withdrawal" | "failed_withdrawal" | "approved_withdrawal" | null;
    /** Transaction hash */
    transaction_hash?: string;
    /**
     * Xdr
     * @minLength 1
     */
    xdr?: string | null;
    /** Signed */
    signed?: boolean;
    /**
     * Memo
     * @minLength 1
     */
    memo?: string;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /**
     * Completed
     * @format date-time
     */
    completed?: string | null;
}
interface AdminSendTransaction$1 {
    /**
     * Rehive code
     * @minLength 1
     */
    rehive_code?: string;
    /** Rehive response */
    rehive_response?: object;
    /** Reference */
    reference?: string | null;
    /** To reference */
    to_reference?: string | null;
    /**
     * Amount
     * @min 0
     */
    amount: number;
    /**
     * Currency
     * @default "XLM"
     */
    currency?: string | null;
    /**
     * Account
     * @default "default"
     */
    account?: string | null;
    /**
     * Debit account
     * @default "default"
     */
    debit_account?: string | null;
    /**
     * Memo
     * @maxLength 28
     * @default ""
     */
    memo?: string;
    /**
     * User
     * @minLength 1
     */
    user: string;
}
interface AdminUser$2 {
    /**
     * Id
     * @minLength 1
     */
    id?: string;
    /**
     * Email
     * @format email
     * @minLength 1
     */
    email?: string | null;
    /**
     * Identifier
     * @minLength 1
     */
    identifier?: string;
    /**
     * First name
     * @maxLength 50
     */
    first_name?: string | null;
    /**
     * Last name
     * @maxLength 50
     */
    last_name?: string | null;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /**
     * Account id
     * @minLength 1
     */
    account_id?: string | null;
    /** Crypto */
    crypto?: string;
    /**
     * Username
     * @maxLength 150
     */
    username?: string | null;
    /** Memo */
    memo?: string;
}
interface AdminUserMemo$1 {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Data
     * @minLength 1
     */
    data?: string | null;
    /** Memo type */
    memo_type?: "MEMO_TEXT" | "MEMO_ID" | "MEMO_HASH" | "MEMO_RETURN" | null;
    /**
     * Rehive account
     * @maxLength 255
     */
    rehive_account?: string | null;
    /** Primary */
    primary?: boolean;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /** User */
    user?: number | null;
}
interface Warmstorage$1 {
    /** Balance */
    balance?: string;
    /**
     * Rehive account reference
     * @minLength 1
     */
    rehive_account_reference?: string;
    /** User account identifier */
    user_account_identifier?: string;
}
interface WarmstorageAccount$1 {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Account address
     * @maxLength 100
     */
    account_address?: string | null;
    /** Cursor */
    cursor?: number;
    /** User */
    user?: string;
    /** Status */
    status?: "Active" | "Disabled" | "Removed";
    /** Type */
    type?: "deposit" | "withdraw" | "issue" | null;
    /** Primary */
    primary?: boolean;
    /**
     * Date monitoring was disabled
     * @format date-time
     */
    date_monitoring_was_disabled?: string | null;
    /**
     * Note
     * @maxLength 255
     */
    note?: string | null;
}
interface UserCompanyConfiguration$1 {
    /**
     * Transaction credit subtype
     * @minLength 1
     */
    transaction_credit_subtype?: string | null;
    /**
     * Transaction debit subtype
     * @minLength 1
     */
    transaction_debit_subtype?: string | null;
    /**
     * Transaction fee subtype
     * @minLength 1
     */
    transaction_fee_subtype?: string | null;
    /**
     * Transaction fund subtype
     * @minLength 1
     */
    transaction_fund_subtype?: string | null;
    /**
     * Transaction withdraw subtype
     * @minLength 1
     */
    transaction_withdraw_subtype?: string | null;
    /** Disable withdrawals */
    disable_withdrawals?: boolean;
}
interface Company$2 {
    /**
     * Identifier
     * @minLength 1
     */
    identifier?: string | null;
    /** Active */
    active?: boolean;
    /** Is federated */
    is_federated?: string;
    /** Federation domain */
    federation_domain?: string;
    /** Has service issued acccounts */
    has_service_issued_acccounts?: string;
    company_configuration: UserCompanyConfiguration$1;
    /** Anchor tier requirement */
    anchor_tier_requirement?: string;
    /** Sep24 withdrawable currencies */
    sep24_withdrawable_currencies?: string;
}
interface Asset$1 {
    /**
     * Hotwallet account id
     * @minLength 1
     */
    hotwallet_account_id?: string;
    /**
     * Currency code
     * @minLength 1
     */
    currency_code?: string;
    /**
     * Display decimals
     * @minLength 1
     */
    display_decimals?: string;
    /**
     * Address
     * @minLength 1
     */
    address?: string;
    /**
     * Id
     * @minLength 1
     */
    id: string;
    /** Sep24 enabled */
    sep24_enabled?: boolean;
}
interface Deactivate$5 {
    /**
     * Token
     * @minLength 1
     */
    token: string;
}
interface PRSWebhook$1 {
    /**
     * Id
     * @minLength 1
     */
    id: string;
    /** Event */
    event: "service_payment_requests.request.update";
    /**
     * Company
     * @minLength 1
     */
    company: string;
    /** Data */
    data: object;
}
interface InfoView$1 {
    /** Stellar network */
    stellar_network?: string;
}
interface KnownAssets$1 {
    /**
     * Address
     * @minLength 1
     */
    address?: string | null;
    /**
     * Code
     * @minLength 1
     */
    code?: string | null;
    /**
     * Description
     * @minLength 1
     */
    description?: string | null;
    /**
     * Symbol
     * @minLength 1
     */
    symbol?: string | null;
    /**
     * Unit
     * @minLength 1
     */
    unit?: string | null;
    /**
     * Icon
     * @minLength 1
     */
    icon?: string | null;
    /**
     * Website
     * @minLength 1
     */
    website?: string | null;
    /**
     * Name
     * @minLength 1
     */
    name?: string | null;
}
interface SendTransaction$1 {
    /**
     * Rehive code
     * @minLength 1
     */
    rehive_code?: string;
    /** Rehive response */
    rehive_response?: object;
    /** Reference */
    reference?: string | null;
    /** To reference */
    to_reference?: string | null;
    /**
     * Amount
     * @min 0
     */
    amount: number;
    /**
     * Currency
     * @default "XLM"
     */
    currency?: string | null;
    /**
     * Account
     * @default "default"
     */
    account?: string | null;
    /**
     * Debit account
     * @default "default"
     */
    debit_account?: string | null;
    /**
     * Memo
     * @maxLength 28
     * @default ""
     */
    memo?: string;
}
interface UserInfoSeralizer$1 {
    /**
     * Id
     * @minLength 1
     */
    id?: string;
    /**
     * Email
     * @format email
     * @minLength 1
     */
    email?: string | null;
    /**
     * Identifier
     * @minLength 1
     */
    identifier?: string;
    /** Crypto */
    crypto?: string;
    /**
     * Username
     * @maxLength 150
     */
    username?: string | null;
    /** Memo */
    memo?: string;
}
type AnchorAccountValidate$1 = object;
type AnchorSessionValidate$1 = object;
interface UserSEP24Transaction$1 {
    /**
     * Identifier
     * @format uuid
     */
    identifier?: string;
    /**
     * Anchor platform id
     * @minLength 1
     */
    anchor_platform_id?: string;
    /** Prs request id */
    prs_request_id?: string;
    /** Tx type */
    tx_type: "deposit" | "withdraw";
    /**
     * Amount
     * @min -9223372036854776000
     * @max 9223372036854776000
     */
    amount?: number;
    /**
     * Currency
     * @minLength 1
     * @maxLength 10
     */
    currency: string;
    /** Transaction hash */
    transaction_hash?: string;
    /**
     * Rehive withdrawal account reference
     * @maxLength 50
     */
    rehive_withdrawal_account_reference?: string | null;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /** Status */
    status: "initiated" | "initiated_invoicing" | "prs_requested" | "prs_quoted" | "prs_processing" | "prs_complete" | "processing_internal_dispersal" | "completed_internal_dispersal" | "processing_external_dispersal" | "completed_external_dispersal" | "complete" | "failed";
}
interface UserMemo$1 {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Data
     * @minLength 1
     */
    data?: string | null;
    /** Memo type */
    memo_type?: "MEMO_TEXT" | "MEMO_ID" | "MEMO_HASH" | "MEMO_RETURN" | null;
    /**
     * Rehive account
     * @maxLength 255
     */
    rehive_account?: string | null;
    /** Primary */
    primary?: boolean;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /** User */
    user?: number | null;
}
interface SetUsernameMemo$1 {
    /**
     * Username
     * @minLength 1
     */
    username: string;
}
type AdminAssetListData$1 = AdminCreateAsset$1[];
type AdminBlacklistedAccountsListData$1 = BlacklistedAccount$1[];
interface AdminColdstorageListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminColdstorageListData$1 {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: Coldstorage$1[];
}
interface AdminColdstorageAccountsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminColdstorageAccountsListData$1 {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: ColdstorageAccount$1[];
}
type AdminCompanyListData$1 = CompanyAdmin$1[];
type AdminCompanyConfigurationListData$1 = CompanyConfiguration$2[];
type AdminCompanyConfigurationAccountGroupsListData$1 = DefaultGroupAccountPair$1[];
type AdminCompanyConfigurationAnchorPlatformListData$1 = AnchorPlatformConfiguration$1[];
type AdminCompanyStellarTomlListData$1 = StellarToml$1[];
type AdminFederationListData$1 = Federation$1[];
type AdminHotwalletListData$1 = Hotwallet$1[];
type AdminHotwalletActiveListData$1 = HotwalletBalance$1[];
type AdminHotwalletFeesListData$1 = HotwalletFees$1[];
type AdminHotwalletFundListData$1 = HotwalletFund$1[];
type AdminKnownPublicAddressesListData$1 = KnownPublicAddresses$1[];
type AdminMemosListData$1 = AdminMemo$1[];
interface AdminSep10AuthenticatedAccountsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminSep10AuthenticatedAccountsListData$1 {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: AdminSEP10AuthenticatedAccount$1[];
}
interface AdminSep24TransactionsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminSep24TransactionsListData$1 {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: AdminSEP24Transaction$1[];
}
interface AdminStellarAccountsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminStellarAccountsListData$1 {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: StellarAccount$1[];
}
interface AdminTransactionsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminTransactionsListData$1 {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: AdminTransaction$1[];
}
interface AdminUsersListParams$2 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminUsersListData$1 {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: AdminUserInfoSeralizer$1[];
}
type AdminUsersMemosListData$1 = AdminUserMemo$1[];
interface AdminWarmstorageListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminWarmstorageListData$1 {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: Warmstorage$1[];
}
interface AdminWarmstorageAccountsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminWarmstorageAccountsListData$1 {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: WarmstorageAccount$1[];
}
type CompanyListData$1 = Company$2[];
type CompanyAssetsListData$1 = Asset$1[];
type InfoListData$1 = InfoView$1[];
interface KnownAssetsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface KnownAssetsListData$1 {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: KnownAssets$1[];
}
interface TransactionsListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface TransactionsListData$1 {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: AdminTransaction$1[];
}
type UserListData$1 = UserInfoSeralizer$1[];
type UserAnchorTransactionsListData$1 = UserSEP24Transaction$1[];
type UserKnownPublicAddressesListData$1 = KnownPublicAddresses$1[];
type UserMemosListData$1 = UserMemo$1[];
type QueryParamsType$4 = Record<string | number, any>;
type ResponseFormat$4 = keyof Omit<Body, "body" | "bodyUsed">;
interface FullRequestParams$4 extends Omit<RequestInit, "body"> {
    /** set parameter to `true` for call `securityWorker` for this request */
    secure?: boolean;
    /** request path */
    path: string;
    /** content type of request body */
    type?: ContentType$4;
    /** query params */
    query?: QueryParamsType$4;
    /** format of response (i.e. response.json() -> format: "json") */
    format?: ResponseFormat$4;
    /** request body */
    body?: unknown;
    /** base url */
    baseUrl?: string;
    /** request cancellation token */
    cancelToken?: CancelToken$4;
}
type RequestParams$5 = Omit<FullRequestParams$4, "body" | "method" | "query" | "path">;
interface ApiConfig$4<SecurityDataType = unknown> {
    baseUrl?: string;
    baseApiParams?: Omit<RequestParams$5, "baseUrl" | "cancelToken" | "signal">;
    securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams$5 | void> | RequestParams$5 | void;
    customFetch?: typeof fetch;
}
interface HttpResponse$4<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}
type CancelToken$4 = Symbol | string | number;
declare enum ContentType$4 {
    Json = "application/json",
    JsonApi = "application/vnd.api+json",
    FormData = "multipart/form-data",
    UrlEncoded = "application/x-www-form-urlencoded",
    Text = "text/plain"
}
declare class HttpClient$4<SecurityDataType = unknown> {
    baseUrl: string;
    private securityData;
    private securityWorker?;
    private abortControllers;
    private customFetch;
    private baseApiParams;
    constructor(apiConfig?: ApiConfig$4<SecurityDataType>);
    setSecurityData: (data: SecurityDataType | null) => void;
    protected encodeQueryParam(key: string, value: any): string;
    protected addQueryParam(query: QueryParamsType$4, key: string): string;
    protected addArrayQueryParam(query: QueryParamsType$4, key: string): any;
    protected toQueryString(rawQuery?: QueryParamsType$4): string;
    protected addQueryParams(rawQuery?: QueryParamsType$4): string;
    private contentFormatters;
    protected mergeRequestParams(params1: RequestParams$5, params2?: RequestParams$5): RequestParams$5;
    protected createAbortSignal: (cancelToken: CancelToken$4) => AbortSignal | undefined;
    abortRequest: (cancelToken: CancelToken$4) => void;
    request: <T = any, E = any>({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }: FullRequestParams$4) => Promise<HttpResponse$4<T, E>>;
}
/**
 * @title Stellar Service API
 * @version v1
 * @baseUrl https://stellar.services.rehive.com/api/1
 *
 * Start by clicking Authorize and adding the header: Token <your-api-key>. The user endpoints require a normal rehive user token returned by Rehive's /auth/login/ or /auth/register/ endpoints. The admin endpoints require a permanent token with admin permissions. The /hooks/ enpoint requires the secret from the Rehive webhook settings in the authorization header as Secret <your-webhook-secret>.
 */
declare class Api$5<SecurityDataType extends unknown> extends HttpClient$4<SecurityDataType> {
    activate: {
        /**
         * @description This endpoint is used by the Rehive Marketplace to add this service for a specific company. It requires an permanent API token for that company with admin permissions.
         *
         * @tags activate
         * @name ActivateCreate
         * @request POST:/activate/
         * @secure
         */
        activateCreate: (data: Activate$5, params?: RequestParams$5) => Promise<HttpResponse$4<Activate$5, any>>;
    };
    admin: {
        /**
         * @description Add a new stellar asset to the service, or list existing assets. You'll need to include a valid stellar anchor issuing address and asset ID.
         *
         * @tags admin
         * @name AdminAssetList
         * @request GET:/admin/asset/
         * @secure
         */
        adminAssetList: (params?: RequestParams$5) => Promise<HttpResponse$4<AdminAssetListData$1, any>>;
        /**
         * @description Add a new stellar asset to the service, or list existing assets. You'll need to include a valid stellar anchor issuing address and asset ID.
         *
         * @tags admin
         * @name AdminAssetCreate
         * @request POST:/admin/asset/
         * @secure
         */
        adminAssetCreate: (data: AdminCreateAsset$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminCreateAsset$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminAssetRead
         * @request GET:/admin/asset/{id}/
         * @secure
         */
        adminAssetRead: (id: string, params?: RequestParams$5) => Promise<HttpResponse$4<AdminAsset$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminAssetPartialUpdate
         * @request PATCH:/admin/asset/{id}/
         * @secure
         */
        adminAssetPartialUpdate: (id: string, data: AdminAsset$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminAsset$1, any>>;
        /**
         * @description A simple APIView for funding asset accounts.
         *
         * @tags admin
         * @name AdminAssetAuthoriseHolderCreate
         * @request POST:/admin/asset/{id}/authorise_holder/
         * @secure
         */
        adminAssetAuthoriseHolderCreate: (id: string, data: AdminAuthAssetTrust$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminAuthAssetTrust$1, any>>;
        /**
         * @description A simple APIView for funding asset accounts.
         *
         * @tags admin
         * @name AdminAssetFundCreate
         * @request POST:/admin/asset/{id}/fund/
         * @secure
         */
        adminAssetFundCreate: (id: string, data: AdminFundAsset$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminFundAsset$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBlacklistedAccountRead
         * @request GET:/admin/blacklisted-account/{id}/
         * @secure
         */
        adminBlacklistedAccountRead: (id: string, params?: RequestParams$5) => Promise<HttpResponse$4<BlacklistedAccount$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBlacklistedAccountUpdate
         * @request PUT:/admin/blacklisted-account/{id}/
         * @secure
         */
        adminBlacklistedAccountUpdate: (id: string, data: BlacklistedAccount$1, params?: RequestParams$5) => Promise<HttpResponse$4<BlacklistedAccount$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBlacklistedAccountPartialUpdate
         * @request PATCH:/admin/blacklisted-account/{id}/
         * @secure
         */
        adminBlacklistedAccountPartialUpdate: (id: string, data: BlacklistedAccount$1, params?: RequestParams$5) => Promise<HttpResponse$4<BlacklistedAccount$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBlacklistedAccountDelete
         * @request DELETE:/admin/blacklisted-account/{id}/
         * @secure
         */
        adminBlacklistedAccountDelete: (id: string, params?: RequestParams$5) => Promise<HttpResponse$4<any, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBlacklistedAccountsList
         * @request GET:/admin/blacklisted-accounts/
         * @secure
         */
        adminBlacklistedAccountsList: (params?: RequestParams$5) => Promise<HttpResponse$4<AdminBlacklistedAccountsListData$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBlacklistedAccountsCreate
         * @request POST:/admin/blacklisted-accounts/
         * @secure
         */
        adminBlacklistedAccountsCreate: (data: BlacklistedAccount$1, params?: RequestParams$5) => Promise<HttpResponse$4<BlacklistedAccount$1, any>>;
        /**
         * @description ### View coldstorage balance
         *
         * @tags admin
         * @name AdminColdstorageList
         * @request GET:/admin/coldstorage/
         * @secure
         */
        adminColdstorageList: (query: AdminColdstorageListParams$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminColdstorageListData$1, any>>;
        /**
         * @description ### List or create coldstorage accounts for monitoring
         *
         * @tags admin
         * @name AdminColdstorageAccountsList
         * @request GET:/admin/coldstorage/accounts/
         * @secure
         */
        adminColdstorageAccountsList: (query: AdminColdstorageAccountsListParams$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminColdstorageAccountsListData$1, any>>;
        /**
         * @description ### List or create coldstorage accounts for monitoring
         *
         * @tags admin
         * @name AdminColdstorageAccountsCreate
         * @request POST:/admin/coldstorage/accounts/
         * @secure
         */
        adminColdstorageAccountsCreate: (data: ColdstorageAccount$1, params?: RequestParams$5) => Promise<HttpResponse$4<ColdstorageAccount$1, any>>;
        /**
         * @description ### View or update a cold storage account
         *
         * @tags admin
         * @name AdminColdstorageAccountsRead
         * @request GET:/admin/coldstorage/accounts/{id}/
         * @secure
         */
        adminColdstorageAccountsRead: (id: string, params?: RequestParams$5) => Promise<HttpResponse$4<ColdstorageAccount$1, any>>;
        /**
         * @description ### View or update a cold storage account
         *
         * @tags admin
         * @name AdminColdstorageAccountsPartialUpdate
         * @request PATCH:/admin/coldstorage/accounts/{id}/
         * @secure
         */
        adminColdstorageAccountsPartialUpdate: (id: string, data: ColdstorageAccount$1, params?: RequestParams$5) => Promise<HttpResponse$4<ColdstorageAccount$1, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyList
         * @request GET:/admin/company/
         * @secure
         */
        adminCompanyList: (params?: RequestParams$5) => Promise<HttpResponse$4<AdminCompanyListData$1, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyPartialUpdate
         * @request PATCH:/admin/company/
         * @secure
         */
        adminCompanyPartialUpdate: (data: CompanyAdmin$1, params?: RequestParams$5) => Promise<HttpResponse$4<CompanyAdmin$1, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyConfigurationList
         * @request GET:/admin/company/configuration/
         * @secure
         */
        adminCompanyConfigurationList: (params?: RequestParams$5) => Promise<HttpResponse$4<AdminCompanyConfigurationListData$1, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyConfigurationUpdate
         * @request PUT:/admin/company/configuration/
         * @secure
         */
        adminCompanyConfigurationUpdate: (data: CompanyConfiguration$2, params?: RequestParams$5) => Promise<HttpResponse$4<CompanyConfiguration$2, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyConfigurationPartialUpdate
         * @request PATCH:/admin/company/configuration/
         * @secure
         */
        adminCompanyConfigurationPartialUpdate: (data: CompanyConfiguration$2, params?: RequestParams$5) => Promise<HttpResponse$4<CompanyConfiguration$2, any>>;
        /**
         * @description Group/Account Pairs specified for the company
         *
         * @tags admin
         * @name AdminCompanyConfigurationAccountGroupsList
         * @request GET:/admin/company/configuration/account-groups/
         * @secure
         */
        adminCompanyConfigurationAccountGroupsList: (params?: RequestParams$5) => Promise<HttpResponse$4<AdminCompanyConfigurationAccountGroupsListData$1, any>>;
        /**
         * @description Group/Account Pairs specified for the company
         *
         * @tags admin
         * @name AdminCompanyConfigurationAccountGroupsCreate
         * @request POST:/admin/company/configuration/account-groups/
         * @secure
         */
        adminCompanyConfigurationAccountGroupsCreate: (data: DefaultGroupAccountPair$1, params?: RequestParams$5) => Promise<HttpResponse$4<DefaultGroupAccountPair$1, any>>;
        /**
         * @description Details for a Group/Account pair
         *
         * @tags admin
         * @name AdminCompanyConfigurationAccountGroupsRead
         * @request GET:/admin/company/configuration/account-groups/{id}/
         * @secure
         */
        adminCompanyConfigurationAccountGroupsRead: (id: string, params?: RequestParams$5) => Promise<HttpResponse$4<DefaultGroupAccountPair$1, any>>;
        /**
         * @description Details for a Group/Account pair
         *
         * @tags admin
         * @name AdminCompanyConfigurationAccountGroupsUpdate
         * @request PUT:/admin/company/configuration/account-groups/{id}/
         * @secure
         */
        adminCompanyConfigurationAccountGroupsUpdate: (id: string, data: DefaultGroupAccountPair$1, params?: RequestParams$5) => Promise<HttpResponse$4<DefaultGroupAccountPair$1, any>>;
        /**
         * @description Details for a Group/Account pair
         *
         * @tags admin
         * @name AdminCompanyConfigurationAccountGroupsPartialUpdate
         * @request PATCH:/admin/company/configuration/account-groups/{id}/
         * @secure
         */
        adminCompanyConfigurationAccountGroupsPartialUpdate: (id: string, data: DefaultGroupAccountPair$1, params?: RequestParams$5) => Promise<HttpResponse$4<DefaultGroupAccountPair$1, any>>;
        /**
         * @description Details for a Group/Account pair
         *
         * @tags admin
         * @name AdminCompanyConfigurationAccountGroupsDelete
         * @request DELETE:/admin/company/configuration/account-groups/{id}/
         * @secure
         */
        adminCompanyConfigurationAccountGroupsDelete: (id: string, params?: RequestParams$5) => Promise<HttpResponse$4<any, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyConfigurationAnchorPlatformList
         * @request GET:/admin/company/configuration/anchor_platform/
         * @secure
         */
        adminCompanyConfigurationAnchorPlatformList: (params?: RequestParams$5) => Promise<HttpResponse$4<AdminCompanyConfigurationAnchorPlatformListData$1, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyConfigurationAnchorPlatformUpdate
         * @request PUT:/admin/company/configuration/anchor_platform/
         * @secure
         */
        adminCompanyConfigurationAnchorPlatformUpdate: (data: AnchorPlatformConfiguration$1, params?: RequestParams$5) => Promise<HttpResponse$4<AnchorPlatformConfiguration$1, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyConfigurationAnchorPlatformPartialUpdate
         * @request PATCH:/admin/company/configuration/anchor_platform/
         * @secure
         */
        adminCompanyConfigurationAnchorPlatformPartialUpdate: (data: AnchorPlatformConfiguration$1, params?: RequestParams$5) => Promise<HttpResponse$4<AnchorPlatformConfiguration$1, any>>;
        /**
         * @description Create and sends back a link to a Stellar.toml file
         *
         * @tags admin
         * @name AdminCompanyStellarTomlList
         * @request GET:/admin/company/stellar-toml/
         * @secure
         */
        adminCompanyStellarTomlList: (params?: RequestParams$5) => Promise<HttpResponse$4<AdminCompanyStellarTomlListData$1, any>>;
        /**
         * @description ### View or update a Stellar Account
         *
         * @tags admin
         * @name AdminFederationList
         * @request GET:/admin/federation/
         * @secure
         */
        adminFederationList: (params?: RequestParams$5) => Promise<HttpResponse$4<AdminFederationListData$1, any>>;
        /**
         * @description ### View or update a Stellar Account
         *
         * @tags admin
         * @name AdminFederationCreate
         * @request POST:/admin/federation/
         * @secure
         */
        adminFederationCreate: (data: Federation$1, params?: RequestParams$5) => Promise<HttpResponse$4<Federation$1, any>>;
        /**
         * @description ### View, create and update the hot wallet
         *
         * @tags admin
         * @name AdminHotwalletList
         * @request GET:/admin/hotwallet/
         * @secure
         */
        adminHotwalletList: (params?: RequestParams$5) => Promise<HttpResponse$4<AdminHotwalletListData$1, any>>;
        /**
         * @description ### View, create and update the hot wallet
         *
         * @tags admin
         * @name AdminHotwalletCreate
         * @request POST:/admin/hotwallet/
         * @secure
         */
        adminHotwalletCreate: (data: Hotwallet$1, params?: RequestParams$5) => Promise<HttpResponse$4<Hotwallet$1, any>>;
        /**
         * @description ### View, create and update the hot wallet
         *
         * @tags admin
         * @name AdminHotwalletPartialUpdate
         * @request PATCH:/admin/hotwallet/
         * @secure
         */
        adminHotwalletPartialUpdate: (data: Hotwallet$1, params?: RequestParams$5) => Promise<HttpResponse$4<Hotwallet$1, any>>;
        /**
         * @description ### View hotwallet balance
         *
         * @tags admin
         * @name AdminHotwalletActiveList
         * @request GET:/admin/hotwallet/active/
         * @secure
         */
        adminHotwalletActiveList: (params?: RequestParams$5) => Promise<HttpResponse$4<AdminHotwalletActiveListData$1, any>>;
        /**
         * @description A simple APIView for funding asset accounts.
         *
         * @tags admin
         * @name AdminHotwalletEnableMssCreate
         * @request POST:/admin/hotwallet/enable_mss/
         * @secure
         */
        adminHotwalletEnableMssCreate: (data: HotwalletFund$1, params?: RequestParams$5) => Promise<HttpResponse$4<HotwalletFund$1, any>>;
        /**
         * @description ### View hotwallet balance
         *
         * @tags admin
         * @name AdminHotwalletFeesList
         * @request GET:/admin/hotwallet/fees/
         * @secure
         */
        adminHotwalletFeesList: (params?: RequestParams$5) => Promise<HttpResponse$4<AdminHotwalletFeesListData$1, any>>;
        /**
         * @description View and update company. Authenticates requests using a token in the Authorization header.
         *
         * @tags admin
         * @name AdminHotwalletFundList
         * @request GET:/admin/hotwallet/fund/
         * @secure
         */
        adminHotwalletFundList: (params?: RequestParams$5) => Promise<HttpResponse$4<AdminHotwalletFundListData$1, any>>;
        /**
         * @description ### Merges and deletes the current hotwallet
         *
         * @tags admin
         * @name AdminHotwalletMergeCreate
         * @request POST:/admin/hotwallet/merge/
         * @secure
         */
        adminHotwalletMergeCreate: (data: HotwalletMerge$1, params?: RequestParams$5) => Promise<HttpResponse$4<HotwalletMerge$1, any>>;
        /**
         * @description ### Sends an onchain transactions directly from the Hotwallet
         *
         * @tags admin
         * @name AdminHotwalletSendCreate
         * @request POST:/admin/hotwallet/send/
         * @secure
         */
        adminHotwalletSendCreate: (data: HotwalletSend$1, params?: RequestParams$5) => Promise<HttpResponse$4<HotwalletSend$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminKnownPublicAddressesList
         * @request GET:/admin/known-public-addresses/
         * @secure
         */
        adminKnownPublicAddressesList: (params?: RequestParams$5) => Promise<HttpResponse$4<AdminKnownPublicAddressesListData$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminKnownPublicAddressesCreate
         * @request POST:/admin/known-public-addresses/
         * @secure
         */
        adminKnownPublicAddressesCreate: (data: KnownPublicAddresses$1, params?: RequestParams$5) => Promise<HttpResponse$4<KnownPublicAddresses$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminKnownPublicAddressesRead
         * @request GET:/admin/known-public-addresses/{id}/
         * @secure
         */
        adminKnownPublicAddressesRead: (id: string, params?: RequestParams$5) => Promise<HttpResponse$4<KnownPublicAddresses$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminKnownPublicAddressesUpdate
         * @request PUT:/admin/known-public-addresses/{id}/
         * @secure
         */
        adminKnownPublicAddressesUpdate: (id: string, data: KnownPublicAddresses$1, params?: RequestParams$5) => Promise<HttpResponse$4<KnownPublicAddresses$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminKnownPublicAddressesPartialUpdate
         * @request PATCH:/admin/known-public-addresses/{id}/
         * @secure
         */
        adminKnownPublicAddressesPartialUpdate: (id: string, data: KnownPublicAddresses$1, params?: RequestParams$5) => Promise<HttpResponse$4<KnownPublicAddresses$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminKnownPublicAddressesDelete
         * @request DELETE:/admin/known-public-addresses/{id}/
         * @secure
         */
        adminKnownPublicAddressesDelete: (id: string, params?: RequestParams$5) => Promise<HttpResponse$4<any, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminMemosList
         * @request GET:/admin/memos/
         * @secure
         */
        adminMemosList: (params?: RequestParams$5) => Promise<HttpResponse$4<AdminMemosListData$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminMemosCreate
         * @request POST:/admin/memos/
         * @secure
         */
        adminMemosCreate: (data: AdminMemo$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminMemo$1, any>>;
        /**
         * @description ### List transactions
         *
         * @tags admin
         * @name AdminSep10AuthenticatedAccountsList
         * @request GET:/admin/sep10-authenticated-accounts/
         * @secure
         */
        adminSep10AuthenticatedAccountsList: (query: AdminSep10AuthenticatedAccountsListParams$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminSep10AuthenticatedAccountsListData$1, any>>;
        /**
         * @description ### GET a single SEP10AuthenticatedAccount object
         *
         * @tags admin
         * @name AdminSep10AuthenticatedAccountsRead
         * @request GET:/admin/sep10-authenticated-accounts/{id}/
         * @secure
         */
        adminSep10AuthenticatedAccountsRead: (id: string, params?: RequestParams$5) => Promise<HttpResponse$4<AdminSEP10AuthenticatedAccount$1, any>>;
        /**
         * @description ### List all SEP24Transaction objects
         *
         * @tags admin
         * @name AdminSep24TransactionsList
         * @request GET:/admin/sep24-transactions/
         * @secure
         */
        adminSep24TransactionsList: (query: AdminSep24TransactionsListParams$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminSep24TransactionsListData$1, any>>;
        /**
         * @description ### GET a single SEP24Transaction object
         *
         * @tags admin
         * @name AdminSep24TransactionsRead
         * @request GET:/admin/sep24-transactions/{id}/
         * @secure
         */
        adminSep24TransactionsRead: (id: string, params?: RequestParams$5) => Promise<HttpResponse$4<AdminSEP24Transaction$1, any>>;
        /**
         * @description ### List stellar accounts
         *
         * @tags admin
         * @name AdminStellarAccountsList
         * @request GET:/admin/stellar_accounts/
         * @secure
         */
        adminStellarAccountsList: (query: AdminStellarAccountsListParams$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminStellarAccountsListData$1, any>>;
        /**
         * @description ### View or update a Stellar Account
         *
         * @tags admin
         * @name AdminStellarAccountsGenerateCreate
         * @request POST:/admin/stellar_accounts/generate/
         * @secure
         */
        adminStellarAccountsGenerateCreate: (data: StellarAccountGenerate$1, params?: RequestParams$5) => Promise<HttpResponse$4<StellarAccountGenerate$1, any>>;
        /**
         * @description ### View or update a Stellar Account
         *
         * @tags admin
         * @name AdminStellarAccountsRead
         * @request GET:/admin/stellar_accounts/{id}/
         * @secure
         */
        adminStellarAccountsRead: (id: string, params?: RequestParams$5) => Promise<HttpResponse$4<StellarAccount$1, any>>;
        /**
         * @description ### View or update a Stellar Account
         *
         * @tags admin
         * @name AdminStellarAccountsPartialUpdate
         * @request PATCH:/admin/stellar_accounts/{id}/
         * @secure
         */
        adminStellarAccountsPartialUpdate: (id: string, data: StellarAccount$1, params?: RequestParams$5) => Promise<HttpResponse$4<StellarAccount$1, any>>;
        /**
         * @description ### Change the ownership of a service generated account ### Adds a new primary signer and removes the services secret as a signer
         *
         * @tags admin
         * @name AdminStellarAccountsChangeOwnershipCreate
         * @request POST:/admin/stellar_accounts/{id}/change_ownership/
         * @secure
         */
        adminStellarAccountsChangeOwnershipCreate: (id: string, data: StellarAccountChangeOwnership$1, params?: RequestParams$5) => Promise<HttpResponse$4<StellarAccountChangeOwnership$1, any>>;
        /**
         * @description ### List transactions
         *
         * @tags admin
         * @name AdminTransactionsList
         * @request GET:/admin/transactions/
         * @secure
         */
        adminTransactionsList: (query: AdminTransactionsListParams$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminTransactionsListData$1, any>>;
        /**
         * @description View for sending assets directly out of the hotwallet account
         *
         * @tags admin
         * @name AdminTransactionsSendCreate
         * @request POST:/admin/transactions/send/
         * @secure
         */
        adminTransactionsSendCreate: (data: AdminSendTransaction$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminSendTransaction$1, any>>;
        /**
         * @description ### GET and PATCH a single transaction on the Stellar service
         *
         * @tags admin
         * @name AdminTransactionsRead
         * @request GET:/admin/transactions/{id}/
         * @secure
         */
        adminTransactionsRead: (id: string, params?: RequestParams$5) => Promise<HttpResponse$4<AdminTransaction$1, any>>;
        /**
         * @description ### GET and PATCH a single transaction on the Stellar service
         *
         * @tags admin
         * @name AdminTransactionsPartialUpdate
         * @request PATCH:/admin/transactions/{id}/
         * @secure
         */
        adminTransactionsPartialUpdate: (id: string, data: AdminTransaction$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminTransaction$1, any>>;
        /**
         * @description ### List users
         *
         * @tags admin
         * @name AdminUsersList
         * @request GET:/admin/users/
         * @secure
         */
        adminUsersList: (query: AdminUsersListParams$2, params?: RequestParams$5) => Promise<HttpResponse$4<AdminUsersListData$1, any>>;
        /**
         * @description ### List users
         *
         * @tags admin
         * @name AdminUsersCreate
         * @request POST:/admin/users/
         * @secure
         */
        adminUsersCreate: (data: AdminUserInfoSeralizer$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminUserInfoSeralizer$1, any>>;
        /**
         * @description ### List users
         *
         * @tags admin
         * @name AdminUsersRead
         * @request GET:/admin/users/{id}/
         * @secure
         */
        adminUsersRead: (id: string, params?: RequestParams$5) => Promise<HttpResponse$4<AdminUser$2, any>>;
        /**
         * @description ### List users
         *
         * @tags admin
         * @name AdminUsersPartialUpdate
         * @request PATCH:/admin/users/{id}/
         * @secure
         */
        adminUsersPartialUpdate: (id: string, data: UserSeralizer$1, params?: RequestParams$5) => Promise<HttpResponse$4<UserSeralizer$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUsersMemosList
         * @request GET:/admin/users/{id}/memos/
         * @secure
         */
        adminUsersMemosList: (id: string, params?: RequestParams$5) => Promise<HttpResponse$4<AdminUsersMemosListData$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUsersMemosCreate
         * @request POST:/admin/users/{id}/memos/
         * @secure
         */
        adminUsersMemosCreate: (id: string, data: AdminUserMemo$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminUserMemo$1, any>>;
        /**
         * @description ### View warmstorage balance
         *
         * @tags admin
         * @name AdminWarmstorageList
         * @request GET:/admin/warmstorage/
         * @secure
         */
        adminWarmstorageList: (query: AdminWarmstorageListParams$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminWarmstorageListData$1, any>>;
        /**
         * @description ### List or create warmstorage accounts for monitoring
         *
         * @tags admin
         * @name AdminWarmstorageAccountsList
         * @request GET:/admin/warmstorage/accounts/
         * @secure
         */
        adminWarmstorageAccountsList: (query: AdminWarmstorageAccountsListParams$1, params?: RequestParams$5) => Promise<HttpResponse$4<AdminWarmstorageAccountsListData$1, any>>;
        /**
         * @description ### List or create warmstorage accounts for monitoring
         *
         * @tags admin
         * @name AdminWarmstorageAccountsCreate
         * @request POST:/admin/warmstorage/accounts/
         * @secure
         */
        adminWarmstorageAccountsCreate: (data: WarmstorageAccount$1, params?: RequestParams$5) => Promise<HttpResponse$4<WarmstorageAccount$1, any>>;
        /**
         * @description ### View or update a warm storage account
         *
         * @tags admin
         * @name AdminWarmstorageAccountsRead
         * @request GET:/admin/warmstorage/accounts/{id}/
         * @secure
         */
        adminWarmstorageAccountsRead: (id: string, params?: RequestParams$5) => Promise<HttpResponse$4<WarmstorageAccount$1, any>>;
        /**
         * @description ### View or update a warm storage account
         *
         * @tags admin
         * @name AdminWarmstorageAccountsPartialUpdate
         * @request PATCH:/admin/warmstorage/accounts/{id}/
         * @secure
         */
        adminWarmstorageAccountsPartialUpdate: (id: string, data: WarmstorageAccount$1, params?: RequestParams$5) => Promise<HttpResponse$4<WarmstorageAccount$1, any>>;
    };
    company: {
        /**
         * @description Public details of the Rehive company that was added via the /activate/ endpoint.
         *
         * @tags company
         * @name CompanyList
         * @request GET:/company/
         * @secure
         */
        companyList: (params?: RequestParams$5) => Promise<HttpResponse$4<CompanyListData$1, any>>;
        /**
         * @description Add a new stellar asset to the service, or list existing assets. You'll need to include a valid stellar anchor issuing address and asset ID.
         *
         * @tags company
         * @name CompanyAssetsList
         * @request GET:/company/assets/
         * @secure
         */
        companyAssetsList: (params?: RequestParams$5) => Promise<HttpResponse$4<CompanyAssetsListData$1, any>>;
    };
    deactivate: {
        /**
         * @description This endpoint is used by the Rehive Marketplace to remove this service for a specific company. It requires a permanent API token for that company.
         *
         * @tags deactivate
         * @name DeactivateCreate
         * @request POST:/deactivate/
         * @secure
         */
        deactivateCreate: (data: Deactivate$5, params?: RequestParams$5) => Promise<HttpResponse$4<Deactivate$5, any>>;
    };
    hooks: {
        /**
         * No description
         *
         * @tags hooks
         * @name HooksPrsCreate
         * @request POST:/hooks/prs/
         * @secure
         */
        hooksPrsCreate: (data: PRSWebhook$1, params?: RequestParams$5) => Promise<HttpResponse$4<PRSWebhook$1, any>>;
    };
    info: {
        /**
         * @description Returns node and network data for the service
         *
         * @tags info
         * @name InfoList
         * @request GET:/info/
         * @secure
         */
        infoList: (params?: RequestParams$5) => Promise<HttpResponse$4<InfoListData$1, any>>;
    };
    knownAssets: {
        /**
         * @description Returns node and network data for the service
         *
         * @tags known-assets
         * @name KnownAssetsList
         * @request GET:/known-assets/
         * @secure
         */
        knownAssetsList: (query: KnownAssetsListParams$1, params?: RequestParams$5) => Promise<HttpResponse$4<KnownAssetsListData$1, any>>;
    };
    stellarFederation: {
        /**
         * No description
         *
         * @tags stellar_federation
         * @name StellarFederationRead
         * @request GET:/stellar_federation/{company}/
         * @secure
         */
        stellarFederationRead: (company: string, params?: RequestParams$5) => Promise<HttpResponse$4<any, any>>;
    };
    transactions: {
        /**
         * @description ### List transactions
         *
         * @tags transactions
         * @name TransactionsList
         * @request GET:/transactions/
         * @secure
         */
        transactionsList: (query: TransactionsListParams$1, params?: RequestParams$5) => Promise<HttpResponse$4<TransactionsListData$1, any>>;
        /**
         * @description Create the send transaction on Rehive, and/or on the stellar blockchain. When the an email address, the transaction will be handled off-chain, only on the rehive ledger. When sent to a stellar address, the transaction is created on Rehive. Rehive then sends a webhook to the /hooks/debit/ endpoint and a blockchain transaction is created and broadcasted.
         *
         * @tags transactions
         * @name TransactionsSendCreate
         * @request POST:/transactions/send/
         * @secure
         */
        transactionsSendCreate: (data: SendTransaction$1, params?: RequestParams$5) => Promise<HttpResponse$4<SendTransaction$1, any>>;
    };
    user: {
        /**
         * No description
         *
         * @tags user
         * @name UserList
         * @request GET:/user/
         * @secure
         */
        userList: (params?: RequestParams$5) => Promise<HttpResponse$4<UserListData$1, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserPartialUpdate
         * @request PATCH:/user/
         * @secure
         */
        userPartialUpdate: (data: UserInfoSeralizer$1, params?: RequestParams$5) => Promise<HttpResponse$4<UserInfoSeralizer$1, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserAccountList
         * @request GET:/user/account/
         * @secure
         */
        userAccountList: (params?: RequestParams$5) => Promise<HttpResponse$4<any, any>>;
        /**
         * @description ### Endpoint for validating a specific session id using a valid Rehive user session
         *
         * @tags user
         * @name UserAnchorSessionsValidateCreate
         * @request POST:/user/anchor/sessions/{session_id}/validate/
         * @secure
         */
        userAnchorSessionsValidateCreate: (sessionId: string, data: AnchorAccountValidate$1, params?: RequestParams$5) => Promise<HttpResponse$4<object, any>>;
        /**
         * @description ### Endpoint for validating a specific session id using a valid Rehive user session
         *
         * @tags user
         * @name UserAnchorSessionsValidateAccountCreate
         * @request POST:/user/anchor/sessions/{session_id}/validate_account/
         * @secure
         */
        userAnchorSessionsValidateAccountCreate: (sessionId: string, data: AnchorAccountValidate$1, params?: RequestParams$5) => Promise<HttpResponse$4<object, any>>;
        /**
         * @description ### Endpoint for validating a specific session id using a valid Rehive user session
         *
         * @tags user
         * @name UserAnchorSessionsValidateSessionCreate
         * @request POST:/user/anchor/sessions/{session_id}/validate_session/
         * @secure
         */
        userAnchorSessionsValidateSessionCreate: (sessionId: string, data: AnchorSessionValidate$1, params?: RequestParams$5) => Promise<HttpResponse$4<object, any>>;
        /**
         * @description ### Endpoint for viewing all user SEP-10 sessions
         *
         * @tags user
         * @name UserAnchorTransactionsList
         * @request GET:/user/anchor/transactions/
         * @secure
         */
        userAnchorTransactionsList: (params?: RequestParams$5) => Promise<HttpResponse$4<UserAnchorTransactionsListData$1, any>>;
        /**
         * @description ### Endpoint for viewing all user SEP-10 sessions
         *
         * @tags user
         * @name UserAnchorTransactionsRead
         * @request GET:/user/anchor/transactions/{transaction_id}/
         * @secure
         */
        userAnchorTransactionsRead: (transactionId: string, params?: RequestParams$5) => Promise<HttpResponse$4<UserSEP24Transaction$1, any>>;
        /**
         * @description ### Endpoint for viewing all user SEP-10 sessions
         *
         * @tags user
         * @name UserAnchorTransactionsCreate
         * @request POST:/user/anchor/transactions/{transaction_id}/
         * @secure
         */
        userAnchorTransactionsCreate: (transactionId: string, data: UserSEP24Transaction$1, params?: RequestParams$5) => Promise<HttpResponse$4<UserSEP24Transaction$1, any>>;
        /**
         * @description ### Endpoint for viewing all user SEP-10 sessions
         *
         * @tags user
         * @name UserAnchorTransactionsPartialUpdate
         * @request PATCH:/user/anchor/transactions/{transaction_id}/
         * @secure
         */
        userAnchorTransactionsPartialUpdate: (transactionId: string, data: UserSEP24Transaction$1, params?: RequestParams$5) => Promise<HttpResponse$4<UserSEP24Transaction$1, any>>;
        /**
         * @description ### Endpoint for generating a new unvalidated authentication session using a SEP 10 JWT
         *
         * @tags user
         * @name UserAnchorAuthCreate
         * @request POST:/user/anchor/{company_id}/auth/
         * @secure
         */
        userAnchorAuthCreate: (companyId: string, params?: RequestParams$5) => Promise<HttpResponse$4<any, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserKnownPublicAddressesList
         * @request GET:/user/known-public-addresses/
         * @secure
         */
        userKnownPublicAddressesList: (params?: RequestParams$5) => Promise<HttpResponse$4<UserKnownPublicAddressesListData$1, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserMemosList
         * @request GET:/user/memos/
         * @secure
         */
        userMemosList: (params?: RequestParams$5) => Promise<HttpResponse$4<UserMemosListData$1, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserMemosCreate
         * @request POST:/user/memos/
         * @secure
         */
        userMemosCreate: (data: UserMemo$1, params?: RequestParams$5) => Promise<HttpResponse$4<UserMemo$1, any>>;
        /**
         * @description Create the send transaction on Rehive, and/or on the stellar blockchain. When the an email address, the transaction will be handled off-chain, only on the rehive ledger. When sent to a stellar address, the transaction is created on Rehive. Rehive then sends a webhook to the /hooks/debit/ endpoint and a blockchain transaction is created and broadcasted.
         *
         * @tags user
         * @name UserTransactionsSendCreate
         * @request POST:/user/transactions/send/
         * @secure
         */
        userTransactionsSendCreate: (data: SendTransaction$1, params?: RequestParams$5) => Promise<HttpResponse$4<SendTransaction$1, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserUsernameSetCreate
         * @request POST:/user/username/set/
         * @secure
         */
        userUsernameSetCreate: (data: SetUsernameMemo$1, params?: RequestParams$5) => Promise<HttpResponse$4<SetUsernameMemo$1, any>>;
    };
}

interface Activate$4 {
    /**
     * Token
     * @minLength 1
     */
    token: string;
    /**
     * Id
     * @minLength 1
     */
    id?: string;
    /**
     * Email
     * @minLength 1
     */
    email?: string;
    /**
     * Secret
     * @format uuid
     */
    secret?: string;
}
interface AdminCreateAsset {
    /**
     * Address
     * @minLength 1
     */
    address: string;
    /**
     * Currency code
     * @minLength 1
     * @maxLength 12
     */
    currency_code: string;
    /**
     * Description
     * @minLength 1
     */
    description?: string;
    /**
     * Symbol
     * @minLength 1
     */
    symbol?: string;
    /**
     * Unit
     * @minLength 1
     */
    unit?: string;
    /**
     * Id
     * @minLength 1
     */
    id?: string;
    /** Issued by company */
    issued_by_company?: boolean;
    /** Sep24 enabled */
    sep24_enabled?: boolean;
    /** Auth required */
    auth_required?: boolean;
    /**
     * Auth signing key
     * @minLength 1
     */
    auth_signing_key?: string;
    /**
     * Divisibility
     * @min 0
     * @max 7
     */
    divisibility?: number;
}
interface AdminAsset {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Address
     * @minLength 1
     */
    address?: string | null;
    /**
     * Currency code
     * @minLength 1
     */
    currency_code?: string | null;
    /** Auth required */
    auth_required?: boolean;
    /**
     * Auth signing key
     * @maxLength 100
     */
    auth_signing_key?: string | null;
    /**
     * Display decimals
     * @min 0
     * @max 2147483647
     */
    display_decimals?: number;
}
interface AdminAuthAssetTrust {
    /** Trustor public address */
    trustor_public_address: number;
    /** Authorize */
    authorize: boolean;
    /**
     * Asset id
     * @format uuid
     */
    asset_id: string;
}
interface AdminFundAsset {
    /** Issuer secret */
    issuer_secret?: string | null;
    /** Amount */
    amount: number;
    /**
     * Asset id
     * @format uuid
     */
    asset_id: string;
}
interface BlacklistedAccount {
    /** ID */
    id?: number;
    /**
     * Public address
     * @minLength 1
     * @maxLength 100
     */
    public_address: string;
    /**
     * Name
     * @maxLength 100
     */
    name?: string | null;
    /**
     * Description
     * @maxLength 255
     */
    description?: string | null;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
}
interface Coldstorage {
    /** Balance */
    balance?: string;
    /**
     * Rehive account reference
     * @minLength 1
     */
    rehive_account_reference?: string;
    /** User account identifier */
    user_account_identifier?: string;
}
interface ColdstorageAccount {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Account address
     * @maxLength 100
     */
    account_address?: string | null;
    /** Cursor */
    cursor?: number;
    /** User */
    user?: string;
    /** Status */
    status?: "Active" | "Disabled" | "Removed";
    /** Type */
    type?: "deposit" | "withdraw" | "issue" | null;
    /** Primary */
    primary?: boolean;
    /**
     * Date monitoring was disabled
     * @format date-time
     */
    date_monitoring_was_disabled?: string | null;
    /** Service controlled */
    service_controlled?: boolean;
    /**
     * Note
     * @maxLength 255
     */
    note?: string | null;
}
interface CompanyAdmin {
    /**
     * Identifier
     * @minLength 1
     */
    identifier?: string | null;
    /**
     * Secret
     * @format uuid
     */
    secret?: string | null;
    /**
     * Email
     * @format email
     * @maxLength 254
     */
    email?: string | null;
    /** Has completed setup */
    has_completed_setup: boolean;
    /** Active */
    active?: boolean;
    /** Is federated */
    is_federated?: string;
    /** Federation domain */
    federation_domain?: string;
}
interface DefaultGroupAccountPair {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Group
     * @minLength 1
     * @maxLength 100
     */
    group: string;
    /**
     * Account
     * @minLength 1
     * @maxLength 100
     */
    account: string;
}
interface CompanyConfiguration$1 {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Transaction credit subtype
     * @maxLength 100
     */
    transaction_credit_subtype?: string | null;
    /**
     * Transaction debit subtype
     * @maxLength 100
     */
    transaction_debit_subtype?: string | null;
    /**
     * Transaction fee subtype
     * @maxLength 100
     */
    transaction_fee_subtype?: string | null;
    /** Use default as fallback */
    use_default_as_fallback?: boolean;
    /**
     * Transaction fund subtype
     * @maxLength 100
     */
    transaction_fund_subtype?: string | null;
    /**
     * Transaction issue subtype
     * @maxLength 100
     */
    transaction_issue_subtype?: string | null;
    /**
     * Transaction withdraw subtype
     * @maxLength 100
     */
    transaction_withdraw_subtype?: string | null;
    /**
     * Transaction credit warmstorage subtype
     * @maxLength 100
     */
    transaction_credit_warmstorage_subtype?: string | null;
    /**
     * Transaction debit warmstorage subtype
     * @maxLength 100
     */
    transaction_debit_warmstorage_subtype?: string | null;
    /**
     * Transaction credit hotwallet subtype
     * @maxLength 100
     */
    transaction_credit_hotwallet_subtype?: string | null;
    /**
     * Transaction debit hotwallet subtype
     * @maxLength 100
     */
    transaction_debit_hotwallet_subtype?: string | null;
    /**
     * Transaction credit coldstorage subtype
     * @maxLength 100
     */
    transaction_credit_coldstorage_subtype?: string | null;
    /**
     * Transaction debit coldstorage subtype
     * @maxLength 100
     */
    transaction_debit_coldstorage_subtype?: string | null;
    currency_fees_paid_by_company?: (string | null)[];
    group_account_pairs?: DefaultGroupAccountPair[];
    /** Disable withdrawals */
    disable_withdrawals?: boolean;
    /** Allow multiple memos per user */
    allow_multiple_memos_per_user?: boolean;
    /**
     * External signer url
     * @maxLength 255
     */
    external_signer_url?: string | null;
    /**
     * External signer key
     * @maxLength 255
     */
    external_signer_key?: string | null;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
}
interface AnchorPlatformConfiguration {
    /**
     * Sep10 jwt secret
     * @minLength 1
     * @maxLength 100
     */
    sep10_jwt_secret?: string | null;
    /**
     * Anchor platform api key
     * @minLength 1
     * @maxLength 100
     */
    anchor_platform_api_key?: string | null;
    /**
     * Anchor platform base api
     * @minLength 1
     * @maxLength 255
     */
    anchor_platform_base_api?: string | null;
    /**
     * Anchor tier requirement
     * @minLength 1
     * @maxLength 100
     */
    anchor_tier_requirement?: string | null;
    withdrawable_currencies?: (string | null)[];
    /**
     * Prs return url
     * @minLength 1
     * @maxLength 255
     */
    prs_return_url?: string | null;
}
interface StellarToml {
    /**
     * File
     * @format uri
     */
    file?: string;
}
interface Federation {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Domain
     * @maxLength 255
     */
    domain?: string | null;
    /** Validated */
    validated?: boolean;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
}
interface Hotwallet {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Rehive account reference
     * @minLength 1
     */
    rehive_account_reference?: string;
    /**
     * Low balance percentage
     * @format decimal
     */
    low_balance_percentage?: string;
    /**
     * Low balance amount
     * @min -9223372036854776000
     * @max 9223372036854776000
     */
    low_balance_amount?: number;
    /** Fee priority */
    fee_priority?: "high" | "medium" | "low";
    /** Fee maximum */
    fee_maximum?: "10" | "20" | "30" | "40" | "50" | "60" | "70" | "80" | "90" | "95" | "99";
    /** Externally signed */
    externally_signed?: boolean;
    /** Primary hotwallet account */
    primary_hotwallet_account?: string;
}
interface HotwalletBalance {
    /** Balance */
    balance?: string;
    /** Rehive account reference */
    rehive_account_reference?: string;
    /** Low balance percentage */
    low_balance_percentage?: string;
    /** User account identifier */
    user_account_identifier?: string;
    /** Primary stellar account */
    primary_stellar_account?: string;
}
interface HotwalletFund {
    /** Account address */
    account_address?: string;
}
interface HotwalletFees {
    /** Total fees */
    total_fees?: string;
}
interface HotwalletMerge {
    /**
     * Destination account
     * @minLength 1
     */
    destination_account: string;
}
interface HotwalletSend {
    /**
     * Rehive code
     * @minLength 1
     */
    rehive_code?: string;
    /** Rehive response */
    rehive_response?: object;
    /** Reference */
    reference?: string | null;
    /** To reference */
    to_reference?: string | null;
    /**
     * Amount
     * @min 0
     */
    amount: number;
    /**
     * Currency
     * @default "XLM"
     */
    currency?: string | null;
    /**
     * Account
     * @default "default"
     */
    account?: string | null;
    /**
     * Debit account
     * @default "default"
     */
    debit_account?: string | null;
    /**
     * Memo
     * @maxLength 28
     * @default ""
     */
    memo?: string;
}
interface KnownPublicAddresses {
    /** ID */
    id?: number;
    /**
     * Public address
     * @maxLength 100
     */
    public_address?: string | null;
    /**
     * Name
     * @maxLength 100
     */
    name?: string | null;
    /**
     * Description
     * @maxLength 255
     */
    description?: string | null;
    /**
     * Logo
     * @format uri
     */
    logo?: string | null;
    /** Requires memo */
    requires_memo?: boolean;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
}
interface AdminMemo {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Data
     * @minLength 1
     */
    data?: string | null;
    /** Memo type */
    memo_type?: "MEMO_TEXT" | "MEMO_ID" | "MEMO_HASH" | "MEMO_RETURN" | null;
    /**
     * Rehive account
     * @maxLength 255
     */
    rehive_account?: string | null;
    /** Primary */
    primary?: boolean;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /** User */
    user?: number | null;
}
interface UserSeralizer {
    /**
     * Id
     * @minLength 1
     */
    id?: string;
    /**
     * Email
     * @format email
     * @minLength 1
     */
    email?: string | null;
    /**
     * Identifier
     * @minLength 1
     */
    identifier?: string;
    /**
     * First name
     * @maxLength 50
     */
    first_name?: string | null;
    /**
     * Last name
     * @maxLength 50
     */
    last_name?: string | null;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /**
     * Account id
     * @minLength 1
     */
    account_id?: string | null;
    /**
     * Username
     * @maxLength 150
     */
    username?: string | null;
    /** Memo */
    memo?: string;
}
interface AdminSEP10AuthenticatedAccount {
    /**
     * Identifier
     * @format uuid
     */
    identifier?: string;
    /**
     * Onchain identifier
     * @minLength 1
     */
    onchain_identifier?: string;
    user: UserSeralizer;
    /** Is validated */
    is_validated?: boolean;
    /**
     * Client domain
     * @minLength 1
     */
    client_domain?: string | null;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
}
interface Transaction {
    /** ID */
    id?: number;
    /**
     * User
     * @minLength 1
     */
    user: string;
    /**
     * Reason for assigning
     * @maxLength 255
     */
    reason_for_assigning?: string | null;
    /**
     * Rehive code
     * @minLength 1
     */
    rehive_code?: string | null;
    /**
     * External id
     * @minLength 1
     */
    external_id?: string | null;
    /** Rehive response */
    rehive_response?: object | null;
    /** Tx type */
    tx_type?: "debit" | "credit" | "deposit" | "withdraw" | "transfer" | "fund" | "issue" | "asset_auth";
    /** Amount */
    amount?: number;
    /**
     * Currency
     * @minLength 1
     */
    currency?: string;
    /** Status */
    status?: "Initiated" | "Quoted" | "Unfunded" | "Funded" | "Waiting" | "Pending" | "Confirmed" | "Complete" | "Failed" | "Cancelled" | null;
    /** Fee */
    fee?: number;
    /**
     * To reference
     * @minLength 1
     */
    to_reference?: string | null;
    /**
     * From reference
     * @minLength 1
     */
    from_reference?: string | null;
    /** Horizon response */
    horizon_response?: object | null;
    /** Withdrawal status */
    withdrawal_status?: "pending_withdrawal" | "failed_withdrawal" | "approved_withdrawal" | null;
    /** Transaction hash */
    transaction_hash?: string;
    /**
     * Xdr
     * @minLength 1
     */
    xdr?: string | null;
    /** Signed */
    signed?: boolean;
    /**
     * Memo
     * @minLength 1
     */
    memo?: string;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /**
     * Completed
     * @format date-time
     */
    completed?: string | null;
}
interface AdminSEP24Transaction {
    /**
     * Identifier
     * @format uuid
     */
    identifier?: string;
    /**
     * Anchor platform id
     * @minLength 1
     */
    anchor_platform_id?: string;
    /**
     * Sep10 authenticated account
     * @format uuid
     */
    sep10_authenticated_account?: string | null;
    /** Prs request */
    prs_request?: string;
    /** Tx type */
    tx_type: "deposit" | "withdraw";
    /** Amount */
    amount?: number;
    /**
     * Currency
     * @minLength 1
     */
    currency?: string;
    transaction: Transaction;
    /**
     * Rehive withdrawal account reference
     * @minLength 1
     */
    rehive_withdrawal_account_reference?: string | null;
    /**
     * Rehive withdrawal transaction id
     * @minLength 1
     */
    rehive_withdrawal_transaction_id?: string | null;
    /**
     * Processing account
     * @minLength 1
     */
    processing_account?: string;
    /**
     * Rehive internal dispersal collection id
     * @minLength 1
     */
    rehive_internal_dispersal_collection_id?: string;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /** Status */
    status: "initiated" | "initiated_invoicing" | "prs_requested" | "prs_quoted" | "prs_processing" | "prs_complete" | "processing_internal_dispersal" | "completed_internal_dispersal" | "processing_external_dispersal" | "completed_external_dispersal" | "complete" | "failed";
}
interface StellarAccount {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Account address
     * @maxLength 100
     */
    account_address?: string | null;
    /** Cursor */
    cursor?: number;
    /** User */
    user?: string;
    /** Status */
    status?: "Active" | "Disabled" | "Removed";
    /** Type */
    type?: "deposit" | "withdraw" | "issue" | null;
    /** Primary */
    primary?: boolean;
    /**
     * Date monitoring was disabled
     * @format date-time
     */
    date_monitoring_was_disabled?: string | null;
    /** Service controlled */
    service_controlled?: boolean;
    /**
     * Note
     * @maxLength 255
     */
    note?: string | null;
}
interface StellarAccountGenerate {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Account address
     * @minLength 1
     */
    account_address?: string | null;
    /** Type */
    type?: "deposit" | "withdraw" | "issue" | null;
}
interface StellarAccountChangeOwnership {
    /**
     * New owner address
     * @minLength 1
     */
    new_owner_address: string;
}
interface AdminUserInfoSeralizer {
    /**
     * Id
     * @minLength 1
     */
    id?: string;
    /**
     * Email
     * @format email
     * @minLength 1
     */
    email?: string | null;
    /**
     * Identifier
     * @minLength 1
     */
    identifier?: string;
    /** Crypto */
    crypto?: string;
    /**
     * Username
     * @maxLength 150
     */
    username?: string | null;
    /** Memo */
    memo?: string;
}
interface AdminTransaction {
    /** ID */
    id?: number;
    user: AdminUserInfoSeralizer;
    /**
     * Reason for assigning
     * @maxLength 255
     */
    reason_for_assigning?: string | null;
    /**
     * Rehive code
     * @minLength 1
     */
    rehive_code?: string | null;
    /**
     * External id
     * @minLength 1
     */
    external_id?: string | null;
    /** Rehive response */
    rehive_response?: object | null;
    /** Tx type */
    tx_type?: "debit" | "credit" | "deposit" | "withdraw" | "transfer" | "fund" | "issue" | "asset_auth";
    /** Amount */
    amount?: number;
    /**
     * Currency
     * @minLength 1
     */
    currency?: string;
    /** Status */
    status?: "Initiated" | "Quoted" | "Unfunded" | "Funded" | "Waiting" | "Pending" | "Confirmed" | "Complete" | "Failed" | "Cancelled" | null;
    /** Fee */
    fee?: number;
    /**
     * To reference
     * @minLength 1
     */
    to_reference?: string | null;
    /**
     * From reference
     * @minLength 1
     */
    from_reference?: string | null;
    /** Horizon response */
    horizon_response?: object | null;
    /** Withdrawal status */
    withdrawal_status?: "pending_withdrawal" | "failed_withdrawal" | "approved_withdrawal" | null;
    /** Transaction hash */
    transaction_hash?: string;
    /**
     * Xdr
     * @minLength 1
     */
    xdr?: string | null;
    /** Signed */
    signed?: boolean;
    /**
     * Memo
     * @minLength 1
     */
    memo?: string;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /**
     * Completed
     * @format date-time
     */
    completed?: string | null;
}
interface AdminSendTransaction {
    /**
     * Rehive code
     * @minLength 1
     */
    rehive_code?: string;
    /** Rehive response */
    rehive_response?: object;
    /** Reference */
    reference?: string | null;
    /** To reference */
    to_reference?: string | null;
    /**
     * Amount
     * @min 0
     */
    amount: number;
    /**
     * Currency
     * @default "XLM"
     */
    currency?: string | null;
    /**
     * Account
     * @default "default"
     */
    account?: string | null;
    /**
     * Debit account
     * @default "default"
     */
    debit_account?: string | null;
    /**
     * Memo
     * @maxLength 28
     * @default ""
     */
    memo?: string;
    /**
     * User
     * @minLength 1
     */
    user: string;
}
interface AdminUser$1 {
    /**
     * Id
     * @minLength 1
     */
    id?: string;
    /**
     * Email
     * @format email
     * @minLength 1
     */
    email?: string | null;
    /**
     * Identifier
     * @minLength 1
     */
    identifier?: string;
    /**
     * First name
     * @maxLength 50
     */
    first_name?: string | null;
    /**
     * Last name
     * @maxLength 50
     */
    last_name?: string | null;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /**
     * Account id
     * @minLength 1
     */
    account_id?: string | null;
    /** Crypto */
    crypto?: string;
    /**
     * Username
     * @maxLength 150
     */
    username?: string | null;
    /** Memo */
    memo?: string;
}
interface AdminUserMemo {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Data
     * @minLength 1
     */
    data?: string | null;
    /** Memo type */
    memo_type?: "MEMO_TEXT" | "MEMO_ID" | "MEMO_HASH" | "MEMO_RETURN" | null;
    /**
     * Rehive account
     * @maxLength 255
     */
    rehive_account?: string | null;
    /** Primary */
    primary?: boolean;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /** User */
    user?: number | null;
}
interface Warmstorage {
    /** Balance */
    balance?: string;
    /**
     * Rehive account reference
     * @minLength 1
     */
    rehive_account_reference?: string;
    /** User account identifier */
    user_account_identifier?: string;
}
interface WarmstorageAccount {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Account address
     * @maxLength 100
     */
    account_address?: string | null;
    /** Cursor */
    cursor?: number;
    /** User */
    user?: string;
    /** Status */
    status?: "Active" | "Disabled" | "Removed";
    /** Type */
    type?: "deposit" | "withdraw" | "issue" | null;
    /** Primary */
    primary?: boolean;
    /**
     * Date monitoring was disabled
     * @format date-time
     */
    date_monitoring_was_disabled?: string | null;
    /**
     * Note
     * @maxLength 255
     */
    note?: string | null;
}
interface UserCompanyConfiguration {
    /**
     * Transaction credit subtype
     * @minLength 1
     */
    transaction_credit_subtype?: string | null;
    /**
     * Transaction debit subtype
     * @minLength 1
     */
    transaction_debit_subtype?: string | null;
    /**
     * Transaction fee subtype
     * @minLength 1
     */
    transaction_fee_subtype?: string | null;
    /**
     * Transaction fund subtype
     * @minLength 1
     */
    transaction_fund_subtype?: string | null;
    /**
     * Transaction withdraw subtype
     * @minLength 1
     */
    transaction_withdraw_subtype?: string | null;
    /** Disable withdrawals */
    disable_withdrawals?: boolean;
}
interface Company$1 {
    /**
     * Identifier
     * @minLength 1
     */
    identifier?: string | null;
    /** Active */
    active?: boolean;
    /** Is federated */
    is_federated?: string;
    /** Federation domain */
    federation_domain?: string;
    /** Has service issued acccounts */
    has_service_issued_acccounts?: string;
    company_configuration: UserCompanyConfiguration;
    /** Anchor tier requirement */
    anchor_tier_requirement?: string;
    /** Sep24 withdrawable currencies */
    sep24_withdrawable_currencies?: string;
}
interface Asset {
    /**
     * Hotwallet account id
     * @minLength 1
     */
    hotwallet_account_id?: string;
    /**
     * Currency code
     * @minLength 1
     */
    currency_code?: string;
    /**
     * Display decimals
     * @minLength 1
     */
    display_decimals?: string;
    /**
     * Address
     * @minLength 1
     */
    address?: string;
    /**
     * Id
     * @minLength 1
     */
    id: string;
    /** Sep24 enabled */
    sep24_enabled?: boolean;
}
interface Deactivate$4 {
    /**
     * Token
     * @minLength 1
     */
    token: string;
}
interface PRSWebhook {
    /**
     * Id
     * @minLength 1
     */
    id: string;
    /** Event */
    event: "service_payment_requests.request.update";
    /**
     * Company
     * @minLength 1
     */
    company: string;
    /** Data */
    data: object;
}
interface InfoView {
    /** Stellar network */
    stellar_network?: string;
}
interface KnownAssets {
    /**
     * Address
     * @minLength 1
     */
    address?: string | null;
    /**
     * Code
     * @minLength 1
     */
    code?: string | null;
    /**
     * Description
     * @minLength 1
     */
    description?: string | null;
    /**
     * Symbol
     * @minLength 1
     */
    symbol?: string | null;
    /**
     * Unit
     * @minLength 1
     */
    unit?: string | null;
    /**
     * Icon
     * @minLength 1
     */
    icon?: string | null;
    /**
     * Website
     * @minLength 1
     */
    website?: string | null;
    /**
     * Name
     * @minLength 1
     */
    name?: string | null;
}
interface SendTransaction {
    /**
     * Rehive code
     * @minLength 1
     */
    rehive_code?: string;
    /** Rehive response */
    rehive_response?: object;
    /** Reference */
    reference?: string | null;
    /** To reference */
    to_reference?: string | null;
    /**
     * Amount
     * @min 0
     */
    amount: number;
    /**
     * Currency
     * @default "XLM"
     */
    currency?: string | null;
    /**
     * Account
     * @default "default"
     */
    account?: string | null;
    /**
     * Debit account
     * @default "default"
     */
    debit_account?: string | null;
    /**
     * Memo
     * @maxLength 28
     * @default ""
     */
    memo?: string;
}
interface UserInfoSeralizer {
    /**
     * Id
     * @minLength 1
     */
    id?: string;
    /**
     * Email
     * @format email
     * @minLength 1
     */
    email?: string | null;
    /**
     * Identifier
     * @minLength 1
     */
    identifier?: string;
    /** Crypto */
    crypto?: string;
    /**
     * Username
     * @maxLength 150
     */
    username?: string | null;
    /** Memo */
    memo?: string;
}
type AnchorAccountValidate = object;
type AnchorSessionValidate = object;
interface UserSEP24Transaction {
    /**
     * Identifier
     * @format uuid
     */
    identifier?: string;
    /**
     * Anchor platform id
     * @minLength 1
     */
    anchor_platform_id?: string;
    /** Prs request id */
    prs_request_id?: string;
    /** Tx type */
    tx_type: "deposit" | "withdraw";
    /**
     * Amount
     * @min -9223372036854776000
     * @max 9223372036854776000
     */
    amount?: number;
    /**
     * Currency
     * @minLength 1
     * @maxLength 10
     */
    currency: string;
    /** Transaction hash */
    transaction_hash?: string;
    /**
     * Rehive withdrawal account reference
     * @maxLength 50
     */
    rehive_withdrawal_account_reference?: string | null;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /** Status */
    status: "initiated" | "initiated_invoicing" | "prs_requested" | "prs_quoted" | "prs_processing" | "prs_complete" | "processing_internal_dispersal" | "completed_internal_dispersal" | "processing_external_dispersal" | "completed_external_dispersal" | "complete" | "failed";
}
interface UserMemo {
    /**
     * Id
     * @format uuid
     */
    id?: string;
    /**
     * Data
     * @minLength 1
     */
    data?: string | null;
    /** Memo type */
    memo_type?: "MEMO_TEXT" | "MEMO_ID" | "MEMO_HASH" | "MEMO_RETURN" | null;
    /**
     * Rehive account
     * @maxLength 255
     */
    rehive_account?: string | null;
    /** Primary */
    primary?: boolean;
    /**
     * Created
     * @format date-time
     */
    created?: string;
    /**
     * Updated
     * @format date-time
     */
    updated?: string;
    /** User */
    user?: number | null;
}
interface SetUsernameMemo {
    /**
     * Username
     * @minLength 1
     */
    username: string;
}
type AdminAssetListData = AdminCreateAsset[];
type AdminBlacklistedAccountsListData = BlacklistedAccount[];
interface AdminColdstorageListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminColdstorageListData {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: Coldstorage[];
}
interface AdminColdstorageAccountsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminColdstorageAccountsListData {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: ColdstorageAccount[];
}
type AdminCompanyListData = CompanyAdmin[];
type AdminCompanyConfigurationListData = CompanyConfiguration$1[];
type AdminCompanyConfigurationAccountGroupsListData = DefaultGroupAccountPair[];
type AdminCompanyConfigurationAnchorPlatformListData = AnchorPlatformConfiguration[];
type AdminCompanyStellarTomlListData = StellarToml[];
type AdminFederationListData = Federation[];
type AdminHotwalletListData = Hotwallet[];
type AdminHotwalletActiveListData = HotwalletBalance[];
type AdminHotwalletFeesListData = HotwalletFees[];
type AdminHotwalletFundListData = HotwalletFund[];
type AdminKnownPublicAddressesListData = KnownPublicAddresses[];
type AdminMemosListData = AdminMemo[];
interface AdminSep10AuthenticatedAccountsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminSep10AuthenticatedAccountsListData {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: AdminSEP10AuthenticatedAccount[];
}
interface AdminSep24TransactionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminSep24TransactionsListData {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: AdminSEP24Transaction[];
}
interface AdminStellarAccountsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminStellarAccountsListData {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: StellarAccount[];
}
interface AdminTransactionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminTransactionsListData {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: AdminTransaction[];
}
interface AdminUsersListParams$1 {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminUsersListData {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: AdminUserInfoSeralizer[];
}
type AdminUsersMemosListData = AdminUserMemo[];
interface AdminWarmstorageListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminWarmstorageListData {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: Warmstorage[];
}
interface AdminWarmstorageAccountsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminWarmstorageAccountsListData {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: WarmstorageAccount[];
}
type CompanyListData = Company$1[];
type CompanyAssetsListData = Asset[];
type InfoListData = InfoView[];
interface KnownAssetsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface KnownAssetsListData {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: KnownAssets[];
}
interface TransactionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface TransactionsListData {
    count: number;
    /** @format uri */
    next?: string | null;
    /** @format uri */
    previous?: string | null;
    results: AdminTransaction[];
}
type UserListData = UserInfoSeralizer[];
type UserAnchorTransactionsListData = UserSEP24Transaction[];
type UserKnownPublicAddressesListData = KnownPublicAddresses[];
type UserMemosListData = UserMemo[];
type QueryParamsType$3 = Record<string | number, any>;
type ResponseFormat$3 = keyof Omit<Body, "body" | "bodyUsed">;
interface FullRequestParams$3 extends Omit<RequestInit, "body"> {
    /** set parameter to `true` for call `securityWorker` for this request */
    secure?: boolean;
    /** request path */
    path: string;
    /** content type of request body */
    type?: ContentType$3;
    /** query params */
    query?: QueryParamsType$3;
    /** format of response (i.e. response.json() -> format: "json") */
    format?: ResponseFormat$3;
    /** request body */
    body?: unknown;
    /** base url */
    baseUrl?: string;
    /** request cancellation token */
    cancelToken?: CancelToken$3;
}
type RequestParams$4 = Omit<FullRequestParams$3, "body" | "method" | "query" | "path">;
interface ApiConfig$3<SecurityDataType = unknown> {
    baseUrl?: string;
    baseApiParams?: Omit<RequestParams$4, "baseUrl" | "cancelToken" | "signal">;
    securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams$4 | void> | RequestParams$4 | void;
    customFetch?: typeof fetch;
}
interface HttpResponse$3<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}
type CancelToken$3 = Symbol | string | number;
declare enum ContentType$3 {
    Json = "application/json",
    JsonApi = "application/vnd.api+json",
    FormData = "multipart/form-data",
    UrlEncoded = "application/x-www-form-urlencoded",
    Text = "text/plain"
}
declare class HttpClient$3<SecurityDataType = unknown> {
    baseUrl: string;
    private securityData;
    private securityWorker?;
    private abortControllers;
    private customFetch;
    private baseApiParams;
    constructor(apiConfig?: ApiConfig$3<SecurityDataType>);
    setSecurityData: (data: SecurityDataType | null) => void;
    protected encodeQueryParam(key: string, value: any): string;
    protected addQueryParam(query: QueryParamsType$3, key: string): string;
    protected addArrayQueryParam(query: QueryParamsType$3, key: string): any;
    protected toQueryString(rawQuery?: QueryParamsType$3): string;
    protected addQueryParams(rawQuery?: QueryParamsType$3): string;
    private contentFormatters;
    protected mergeRequestParams(params1: RequestParams$4, params2?: RequestParams$4): RequestParams$4;
    protected createAbortSignal: (cancelToken: CancelToken$3) => AbortSignal | undefined;
    abortRequest: (cancelToken: CancelToken$3) => void;
    request: <T = any, E = any>({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }: FullRequestParams$3) => Promise<HttpResponse$3<T, E>>;
}
/**
 * @title Stellar Service API
 * @version v1
 * @baseUrl https://stellar-testnet.services.rehive.com/api/1
 *
 * Start by clicking Authorize and adding the header: Token <your-api-key>. The user endpoints require a normal rehive user token returned by Rehive's /auth/login/ or /auth/register/ endpoints. The admin endpoints require a permanent token with admin permissions. The /hooks/ enpoint requires the secret from the Rehive webhook settings in the authorization header as Secret <your-webhook-secret>.
 */
declare class Api$4<SecurityDataType extends unknown> extends HttpClient$3<SecurityDataType> {
    activate: {
        /**
         * @description This endpoint is used by the Rehive Marketplace to add this service for a specific company. It requires an permanent API token for that company with admin permissions.
         *
         * @tags activate
         * @name ActivateCreate
         * @request POST:/activate/
         * @secure
         */
        activateCreate: (data: Activate$4, params?: RequestParams$4) => Promise<HttpResponse$3<Activate$4, any>>;
    };
    admin: {
        /**
         * @description Add a new stellar asset to the service, or list existing assets. You'll need to include a valid stellar anchor issuing address and asset ID.
         *
         * @tags admin
         * @name AdminAssetList
         * @request GET:/admin/asset/
         * @secure
         */
        adminAssetList: (params?: RequestParams$4) => Promise<HttpResponse$3<AdminAssetListData, any>>;
        /**
         * @description Add a new stellar asset to the service, or list existing assets. You'll need to include a valid stellar anchor issuing address and asset ID.
         *
         * @tags admin
         * @name AdminAssetCreate
         * @request POST:/admin/asset/
         * @secure
         */
        adminAssetCreate: (data: AdminCreateAsset, params?: RequestParams$4) => Promise<HttpResponse$3<AdminCreateAsset, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminAssetRead
         * @request GET:/admin/asset/{id}/
         * @secure
         */
        adminAssetRead: (id: string, params?: RequestParams$4) => Promise<HttpResponse$3<AdminAsset, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminAssetPartialUpdate
         * @request PATCH:/admin/asset/{id}/
         * @secure
         */
        adminAssetPartialUpdate: (id: string, data: AdminAsset, params?: RequestParams$4) => Promise<HttpResponse$3<AdminAsset, any>>;
        /**
         * @description A simple APIView for funding asset accounts.
         *
         * @tags admin
         * @name AdminAssetAuthoriseHolderCreate
         * @request POST:/admin/asset/{id}/authorise_holder/
         * @secure
         */
        adminAssetAuthoriseHolderCreate: (id: string, data: AdminAuthAssetTrust, params?: RequestParams$4) => Promise<HttpResponse$3<AdminAuthAssetTrust, any>>;
        /**
         * @description A simple APIView for funding asset accounts.
         *
         * @tags admin
         * @name AdminAssetFundCreate
         * @request POST:/admin/asset/{id}/fund/
         * @secure
         */
        adminAssetFundCreate: (id: string, data: AdminFundAsset, params?: RequestParams$4) => Promise<HttpResponse$3<AdminFundAsset, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBlacklistedAccountRead
         * @request GET:/admin/blacklisted-account/{id}/
         * @secure
         */
        adminBlacklistedAccountRead: (id: string, params?: RequestParams$4) => Promise<HttpResponse$3<BlacklistedAccount, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBlacklistedAccountUpdate
         * @request PUT:/admin/blacklisted-account/{id}/
         * @secure
         */
        adminBlacklistedAccountUpdate: (id: string, data: BlacklistedAccount, params?: RequestParams$4) => Promise<HttpResponse$3<BlacklistedAccount, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBlacklistedAccountPartialUpdate
         * @request PATCH:/admin/blacklisted-account/{id}/
         * @secure
         */
        adminBlacklistedAccountPartialUpdate: (id: string, data: BlacklistedAccount, params?: RequestParams$4) => Promise<HttpResponse$3<BlacklistedAccount, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBlacklistedAccountDelete
         * @request DELETE:/admin/blacklisted-account/{id}/
         * @secure
         */
        adminBlacklistedAccountDelete: (id: string, params?: RequestParams$4) => Promise<HttpResponse$3<any, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBlacklistedAccountsList
         * @request GET:/admin/blacklisted-accounts/
         * @secure
         */
        adminBlacklistedAccountsList: (params?: RequestParams$4) => Promise<HttpResponse$3<AdminBlacklistedAccountsListData, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBlacklistedAccountsCreate
         * @request POST:/admin/blacklisted-accounts/
         * @secure
         */
        adminBlacklistedAccountsCreate: (data: BlacklistedAccount, params?: RequestParams$4) => Promise<HttpResponse$3<BlacklistedAccount, any>>;
        /**
         * @description ### View coldstorage balance
         *
         * @tags admin
         * @name AdminColdstorageList
         * @request GET:/admin/coldstorage/
         * @secure
         */
        adminColdstorageList: (query: AdminColdstorageListParams, params?: RequestParams$4) => Promise<HttpResponse$3<AdminColdstorageListData, any>>;
        /**
         * @description ### List or create coldstorage accounts for monitoring
         *
         * @tags admin
         * @name AdminColdstorageAccountsList
         * @request GET:/admin/coldstorage/accounts/
         * @secure
         */
        adminColdstorageAccountsList: (query: AdminColdstorageAccountsListParams, params?: RequestParams$4) => Promise<HttpResponse$3<AdminColdstorageAccountsListData, any>>;
        /**
         * @description ### List or create coldstorage accounts for monitoring
         *
         * @tags admin
         * @name AdminColdstorageAccountsCreate
         * @request POST:/admin/coldstorage/accounts/
         * @secure
         */
        adminColdstorageAccountsCreate: (data: ColdstorageAccount, params?: RequestParams$4) => Promise<HttpResponse$3<ColdstorageAccount, any>>;
        /**
         * @description ### View or update a cold storage account
         *
         * @tags admin
         * @name AdminColdstorageAccountsRead
         * @request GET:/admin/coldstorage/accounts/{id}/
         * @secure
         */
        adminColdstorageAccountsRead: (id: string, params?: RequestParams$4) => Promise<HttpResponse$3<ColdstorageAccount, any>>;
        /**
         * @description ### View or update a cold storage account
         *
         * @tags admin
         * @name AdminColdstorageAccountsPartialUpdate
         * @request PATCH:/admin/coldstorage/accounts/{id}/
         * @secure
         */
        adminColdstorageAccountsPartialUpdate: (id: string, data: ColdstorageAccount, params?: RequestParams$4) => Promise<HttpResponse$3<ColdstorageAccount, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyList
         * @request GET:/admin/company/
         * @secure
         */
        adminCompanyList: (params?: RequestParams$4) => Promise<HttpResponse$3<AdminCompanyListData, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyPartialUpdate
         * @request PATCH:/admin/company/
         * @secure
         */
        adminCompanyPartialUpdate: (data: CompanyAdmin, params?: RequestParams$4) => Promise<HttpResponse$3<CompanyAdmin, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyConfigurationList
         * @request GET:/admin/company/configuration/
         * @secure
         */
        adminCompanyConfigurationList: (params?: RequestParams$4) => Promise<HttpResponse$3<AdminCompanyConfigurationListData, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyConfigurationUpdate
         * @request PUT:/admin/company/configuration/
         * @secure
         */
        adminCompanyConfigurationUpdate: (data: CompanyConfiguration$1, params?: RequestParams$4) => Promise<HttpResponse$3<CompanyConfiguration$1, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyConfigurationPartialUpdate
         * @request PATCH:/admin/company/configuration/
         * @secure
         */
        adminCompanyConfigurationPartialUpdate: (data: CompanyConfiguration$1, params?: RequestParams$4) => Promise<HttpResponse$3<CompanyConfiguration$1, any>>;
        /**
         * @description Group/Account Pairs specified for the company
         *
         * @tags admin
         * @name AdminCompanyConfigurationAccountGroupsList
         * @request GET:/admin/company/configuration/account-groups/
         * @secure
         */
        adminCompanyConfigurationAccountGroupsList: (params?: RequestParams$4) => Promise<HttpResponse$3<AdminCompanyConfigurationAccountGroupsListData, any>>;
        /**
         * @description Group/Account Pairs specified for the company
         *
         * @tags admin
         * @name AdminCompanyConfigurationAccountGroupsCreate
         * @request POST:/admin/company/configuration/account-groups/
         * @secure
         */
        adminCompanyConfigurationAccountGroupsCreate: (data: DefaultGroupAccountPair, params?: RequestParams$4) => Promise<HttpResponse$3<DefaultGroupAccountPair, any>>;
        /**
         * @description Details for a Group/Account pair
         *
         * @tags admin
         * @name AdminCompanyConfigurationAccountGroupsRead
         * @request GET:/admin/company/configuration/account-groups/{id}/
         * @secure
         */
        adminCompanyConfigurationAccountGroupsRead: (id: string, params?: RequestParams$4) => Promise<HttpResponse$3<DefaultGroupAccountPair, any>>;
        /**
         * @description Details for a Group/Account pair
         *
         * @tags admin
         * @name AdminCompanyConfigurationAccountGroupsUpdate
         * @request PUT:/admin/company/configuration/account-groups/{id}/
         * @secure
         */
        adminCompanyConfigurationAccountGroupsUpdate: (id: string, data: DefaultGroupAccountPair, params?: RequestParams$4) => Promise<HttpResponse$3<DefaultGroupAccountPair, any>>;
        /**
         * @description Details for a Group/Account pair
         *
         * @tags admin
         * @name AdminCompanyConfigurationAccountGroupsPartialUpdate
         * @request PATCH:/admin/company/configuration/account-groups/{id}/
         * @secure
         */
        adminCompanyConfigurationAccountGroupsPartialUpdate: (id: string, data: DefaultGroupAccountPair, params?: RequestParams$4) => Promise<HttpResponse$3<DefaultGroupAccountPair, any>>;
        /**
         * @description Details for a Group/Account pair
         *
         * @tags admin
         * @name AdminCompanyConfigurationAccountGroupsDelete
         * @request DELETE:/admin/company/configuration/account-groups/{id}/
         * @secure
         */
        adminCompanyConfigurationAccountGroupsDelete: (id: string, params?: RequestParams$4) => Promise<HttpResponse$3<any, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyConfigurationAnchorPlatformList
         * @request GET:/admin/company/configuration/anchor_platform/
         * @secure
         */
        adminCompanyConfigurationAnchorPlatformList: (params?: RequestParams$4) => Promise<HttpResponse$3<AdminCompanyConfigurationAnchorPlatformListData, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyConfigurationAnchorPlatformUpdate
         * @request PUT:/admin/company/configuration/anchor_platform/
         * @secure
         */
        adminCompanyConfigurationAnchorPlatformUpdate: (data: AnchorPlatformConfiguration, params?: RequestParams$4) => Promise<HttpResponse$3<AnchorPlatformConfiguration, any>>;
        /**
         * @description Details of Rehive company that was added via the /activate/ endpoint.
         *
         * @tags admin
         * @name AdminCompanyConfigurationAnchorPlatformPartialUpdate
         * @request PATCH:/admin/company/configuration/anchor_platform/
         * @secure
         */
        adminCompanyConfigurationAnchorPlatformPartialUpdate: (data: AnchorPlatformConfiguration, params?: RequestParams$4) => Promise<HttpResponse$3<AnchorPlatformConfiguration, any>>;
        /**
         * @description Create and sends back a link to a Stellar.toml file
         *
         * @tags admin
         * @name AdminCompanyStellarTomlList
         * @request GET:/admin/company/stellar-toml/
         * @secure
         */
        adminCompanyStellarTomlList: (params?: RequestParams$4) => Promise<HttpResponse$3<AdminCompanyStellarTomlListData, any>>;
        /**
         * @description ### View or update a Stellar Account
         *
         * @tags admin
         * @name AdminFederationList
         * @request GET:/admin/federation/
         * @secure
         */
        adminFederationList: (params?: RequestParams$4) => Promise<HttpResponse$3<AdminFederationListData, any>>;
        /**
         * @description ### View or update a Stellar Account
         *
         * @tags admin
         * @name AdminFederationCreate
         * @request POST:/admin/federation/
         * @secure
         */
        adminFederationCreate: (data: Federation, params?: RequestParams$4) => Promise<HttpResponse$3<Federation, any>>;
        /**
         * @description ### View, create and update the hot wallet
         *
         * @tags admin
         * @name AdminHotwalletList
         * @request GET:/admin/hotwallet/
         * @secure
         */
        adminHotwalletList: (params?: RequestParams$4) => Promise<HttpResponse$3<AdminHotwalletListData, any>>;
        /**
         * @description ### View, create and update the hot wallet
         *
         * @tags admin
         * @name AdminHotwalletCreate
         * @request POST:/admin/hotwallet/
         * @secure
         */
        adminHotwalletCreate: (data: Hotwallet, params?: RequestParams$4) => Promise<HttpResponse$3<Hotwallet, any>>;
        /**
         * @description ### View, create and update the hot wallet
         *
         * @tags admin
         * @name AdminHotwalletPartialUpdate
         * @request PATCH:/admin/hotwallet/
         * @secure
         */
        adminHotwalletPartialUpdate: (data: Hotwallet, params?: RequestParams$4) => Promise<HttpResponse$3<Hotwallet, any>>;
        /**
         * @description ### View hotwallet balance
         *
         * @tags admin
         * @name AdminHotwalletActiveList
         * @request GET:/admin/hotwallet/active/
         * @secure
         */
        adminHotwalletActiveList: (params?: RequestParams$4) => Promise<HttpResponse$3<AdminHotwalletActiveListData, any>>;
        /**
         * @description A simple APIView for funding asset accounts.
         *
         * @tags admin
         * @name AdminHotwalletEnableMssCreate
         * @request POST:/admin/hotwallet/enable_mss/
         * @secure
         */
        adminHotwalletEnableMssCreate: (data: HotwalletFund, params?: RequestParams$4) => Promise<HttpResponse$3<HotwalletFund, any>>;
        /**
         * @description ### View hotwallet balance
         *
         * @tags admin
         * @name AdminHotwalletFeesList
         * @request GET:/admin/hotwallet/fees/
         * @secure
         */
        adminHotwalletFeesList: (params?: RequestParams$4) => Promise<HttpResponse$3<AdminHotwalletFeesListData, any>>;
        /**
         * @description View and update company. Authenticates requests using a token in the Authorization header.
         *
         * @tags admin
         * @name AdminHotwalletFundList
         * @request GET:/admin/hotwallet/fund/
         * @secure
         */
        adminHotwalletFundList: (params?: RequestParams$4) => Promise<HttpResponse$3<AdminHotwalletFundListData, any>>;
        /**
         * @description ### Merges and deletes the current hotwallet
         *
         * @tags admin
         * @name AdminHotwalletMergeCreate
         * @request POST:/admin/hotwallet/merge/
         * @secure
         */
        adminHotwalletMergeCreate: (data: HotwalletMerge, params?: RequestParams$4) => Promise<HttpResponse$3<HotwalletMerge, any>>;
        /**
         * @description ### Sends an onchain transactions directly from the Hotwallet
         *
         * @tags admin
         * @name AdminHotwalletSendCreate
         * @request POST:/admin/hotwallet/send/
         * @secure
         */
        adminHotwalletSendCreate: (data: HotwalletSend, params?: RequestParams$4) => Promise<HttpResponse$3<HotwalletSend, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminKnownPublicAddressesList
         * @request GET:/admin/known-public-addresses/
         * @secure
         */
        adminKnownPublicAddressesList: (params?: RequestParams$4) => Promise<HttpResponse$3<AdminKnownPublicAddressesListData, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminKnownPublicAddressesCreate
         * @request POST:/admin/known-public-addresses/
         * @secure
         */
        adminKnownPublicAddressesCreate: (data: KnownPublicAddresses, params?: RequestParams$4) => Promise<HttpResponse$3<KnownPublicAddresses, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminKnownPublicAddressesRead
         * @request GET:/admin/known-public-addresses/{id}/
         * @secure
         */
        adminKnownPublicAddressesRead: (id: string, params?: RequestParams$4) => Promise<HttpResponse$3<KnownPublicAddresses, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminKnownPublicAddressesUpdate
         * @request PUT:/admin/known-public-addresses/{id}/
         * @secure
         */
        adminKnownPublicAddressesUpdate: (id: string, data: KnownPublicAddresses, params?: RequestParams$4) => Promise<HttpResponse$3<KnownPublicAddresses, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminKnownPublicAddressesPartialUpdate
         * @request PATCH:/admin/known-public-addresses/{id}/
         * @secure
         */
        adminKnownPublicAddressesPartialUpdate: (id: string, data: KnownPublicAddresses, params?: RequestParams$4) => Promise<HttpResponse$3<KnownPublicAddresses, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminKnownPublicAddressesDelete
         * @request DELETE:/admin/known-public-addresses/{id}/
         * @secure
         */
        adminKnownPublicAddressesDelete: (id: string, params?: RequestParams$4) => Promise<HttpResponse$3<any, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminMemosList
         * @request GET:/admin/memos/
         * @secure
         */
        adminMemosList: (params?: RequestParams$4) => Promise<HttpResponse$3<AdminMemosListData, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminMemosCreate
         * @request POST:/admin/memos/
         * @secure
         */
        adminMemosCreate: (data: AdminMemo, params?: RequestParams$4) => Promise<HttpResponse$3<AdminMemo, any>>;
        /**
         * @description ### List transactions
         *
         * @tags admin
         * @name AdminSep10AuthenticatedAccountsList
         * @request GET:/admin/sep10-authenticated-accounts/
         * @secure
         */
        adminSep10AuthenticatedAccountsList: (query: AdminSep10AuthenticatedAccountsListParams, params?: RequestParams$4) => Promise<HttpResponse$3<AdminSep10AuthenticatedAccountsListData, any>>;
        /**
         * @description ### GET a single SEP10AuthenticatedAccount object
         *
         * @tags admin
         * @name AdminSep10AuthenticatedAccountsRead
         * @request GET:/admin/sep10-authenticated-accounts/{id}/
         * @secure
         */
        adminSep10AuthenticatedAccountsRead: (id: string, params?: RequestParams$4) => Promise<HttpResponse$3<AdminSEP10AuthenticatedAccount, any>>;
        /**
         * @description ### List all SEP24Transaction objects
         *
         * @tags admin
         * @name AdminSep24TransactionsList
         * @request GET:/admin/sep24-transactions/
         * @secure
         */
        adminSep24TransactionsList: (query: AdminSep24TransactionsListParams, params?: RequestParams$4) => Promise<HttpResponse$3<AdminSep24TransactionsListData, any>>;
        /**
         * @description ### GET a single SEP24Transaction object
         *
         * @tags admin
         * @name AdminSep24TransactionsRead
         * @request GET:/admin/sep24-transactions/{id}/
         * @secure
         */
        adminSep24TransactionsRead: (id: string, params?: RequestParams$4) => Promise<HttpResponse$3<AdminSEP24Transaction, any>>;
        /**
         * @description ### List stellar accounts
         *
         * @tags admin
         * @name AdminStellarAccountsList
         * @request GET:/admin/stellar_accounts/
         * @secure
         */
        adminStellarAccountsList: (query: AdminStellarAccountsListParams, params?: RequestParams$4) => Promise<HttpResponse$3<AdminStellarAccountsListData, any>>;
        /**
         * @description ### View or update a Stellar Account
         *
         * @tags admin
         * @name AdminStellarAccountsGenerateCreate
         * @request POST:/admin/stellar_accounts/generate/
         * @secure
         */
        adminStellarAccountsGenerateCreate: (data: StellarAccountGenerate, params?: RequestParams$4) => Promise<HttpResponse$3<StellarAccountGenerate, any>>;
        /**
         * @description ### View or update a Stellar Account
         *
         * @tags admin
         * @name AdminStellarAccountsRead
         * @request GET:/admin/stellar_accounts/{id}/
         * @secure
         */
        adminStellarAccountsRead: (id: string, params?: RequestParams$4) => Promise<HttpResponse$3<StellarAccount, any>>;
        /**
         * @description ### View or update a Stellar Account
         *
         * @tags admin
         * @name AdminStellarAccountsPartialUpdate
         * @request PATCH:/admin/stellar_accounts/{id}/
         * @secure
         */
        adminStellarAccountsPartialUpdate: (id: string, data: StellarAccount, params?: RequestParams$4) => Promise<HttpResponse$3<StellarAccount, any>>;
        /**
         * @description ### Change the ownership of a service generated account ### Adds a new primary signer and removes the services secret as a signer
         *
         * @tags admin
         * @name AdminStellarAccountsChangeOwnershipCreate
         * @request POST:/admin/stellar_accounts/{id}/change_ownership/
         * @secure
         */
        adminStellarAccountsChangeOwnershipCreate: (id: string, data: StellarAccountChangeOwnership, params?: RequestParams$4) => Promise<HttpResponse$3<StellarAccountChangeOwnership, any>>;
        /**
         * @description ### List transactions
         *
         * @tags admin
         * @name AdminTransactionsList
         * @request GET:/admin/transactions/
         * @secure
         */
        adminTransactionsList: (query: AdminTransactionsListParams, params?: RequestParams$4) => Promise<HttpResponse$3<AdminTransactionsListData, any>>;
        /**
         * @description View for sending assets directly out of the hotwallet account
         *
         * @tags admin
         * @name AdminTransactionsSendCreate
         * @request POST:/admin/transactions/send/
         * @secure
         */
        adminTransactionsSendCreate: (data: AdminSendTransaction, params?: RequestParams$4) => Promise<HttpResponse$3<AdminSendTransaction, any>>;
        /**
         * @description ### GET and PATCH a single transaction on the Stellar service
         *
         * @tags admin
         * @name AdminTransactionsRead
         * @request GET:/admin/transactions/{id}/
         * @secure
         */
        adminTransactionsRead: (id: string, params?: RequestParams$4) => Promise<HttpResponse$3<AdminTransaction, any>>;
        /**
         * @description ### GET and PATCH a single transaction on the Stellar service
         *
         * @tags admin
         * @name AdminTransactionsPartialUpdate
         * @request PATCH:/admin/transactions/{id}/
         * @secure
         */
        adminTransactionsPartialUpdate: (id: string, data: AdminTransaction, params?: RequestParams$4) => Promise<HttpResponse$3<AdminTransaction, any>>;
        /**
         * @description ### List users
         *
         * @tags admin
         * @name AdminUsersList
         * @request GET:/admin/users/
         * @secure
         */
        adminUsersList: (query: AdminUsersListParams$1, params?: RequestParams$4) => Promise<HttpResponse$3<AdminUsersListData, any>>;
        /**
         * @description ### List users
         *
         * @tags admin
         * @name AdminUsersCreate
         * @request POST:/admin/users/
         * @secure
         */
        adminUsersCreate: (data: AdminUserInfoSeralizer, params?: RequestParams$4) => Promise<HttpResponse$3<AdminUserInfoSeralizer, any>>;
        /**
         * @description ### List users
         *
         * @tags admin
         * @name AdminUsersRead
         * @request GET:/admin/users/{id}/
         * @secure
         */
        adminUsersRead: (id: string, params?: RequestParams$4) => Promise<HttpResponse$3<AdminUser$1, any>>;
        /**
         * @description ### List users
         *
         * @tags admin
         * @name AdminUsersPartialUpdate
         * @request PATCH:/admin/users/{id}/
         * @secure
         */
        adminUsersPartialUpdate: (id: string, data: UserSeralizer, params?: RequestParams$4) => Promise<HttpResponse$3<UserSeralizer, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUsersMemosList
         * @request GET:/admin/users/{id}/memos/
         * @secure
         */
        adminUsersMemosList: (id: string, params?: RequestParams$4) => Promise<HttpResponse$3<AdminUsersMemosListData, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUsersMemosCreate
         * @request POST:/admin/users/{id}/memos/
         * @secure
         */
        adminUsersMemosCreate: (id: string, data: AdminUserMemo, params?: RequestParams$4) => Promise<HttpResponse$3<AdminUserMemo, any>>;
        /**
         * @description ### View warmstorage balance
         *
         * @tags admin
         * @name AdminWarmstorageList
         * @request GET:/admin/warmstorage/
         * @secure
         */
        adminWarmstorageList: (query: AdminWarmstorageListParams, params?: RequestParams$4) => Promise<HttpResponse$3<AdminWarmstorageListData, any>>;
        /**
         * @description ### List or create warmstorage accounts for monitoring
         *
         * @tags admin
         * @name AdminWarmstorageAccountsList
         * @request GET:/admin/warmstorage/accounts/
         * @secure
         */
        adminWarmstorageAccountsList: (query: AdminWarmstorageAccountsListParams, params?: RequestParams$4) => Promise<HttpResponse$3<AdminWarmstorageAccountsListData, any>>;
        /**
         * @description ### List or create warmstorage accounts for monitoring
         *
         * @tags admin
         * @name AdminWarmstorageAccountsCreate
         * @request POST:/admin/warmstorage/accounts/
         * @secure
         */
        adminWarmstorageAccountsCreate: (data: WarmstorageAccount, params?: RequestParams$4) => Promise<HttpResponse$3<WarmstorageAccount, any>>;
        /**
         * @description ### View or update a warm storage account
         *
         * @tags admin
         * @name AdminWarmstorageAccountsRead
         * @request GET:/admin/warmstorage/accounts/{id}/
         * @secure
         */
        adminWarmstorageAccountsRead: (id: string, params?: RequestParams$4) => Promise<HttpResponse$3<WarmstorageAccount, any>>;
        /**
         * @description ### View or update a warm storage account
         *
         * @tags admin
         * @name AdminWarmstorageAccountsPartialUpdate
         * @request PATCH:/admin/warmstorage/accounts/{id}/
         * @secure
         */
        adminWarmstorageAccountsPartialUpdate: (id: string, data: WarmstorageAccount, params?: RequestParams$4) => Promise<HttpResponse$3<WarmstorageAccount, any>>;
    };
    company: {
        /**
         * @description Public details of the Rehive company that was added via the /activate/ endpoint.
         *
         * @tags company
         * @name CompanyList
         * @request GET:/company/
         * @secure
         */
        companyList: (params?: RequestParams$4) => Promise<HttpResponse$3<CompanyListData, any>>;
        /**
         * @description Add a new stellar asset to the service, or list existing assets. You'll need to include a valid stellar anchor issuing address and asset ID.
         *
         * @tags company
         * @name CompanyAssetsList
         * @request GET:/company/assets/
         * @secure
         */
        companyAssetsList: (params?: RequestParams$4) => Promise<HttpResponse$3<CompanyAssetsListData, any>>;
    };
    deactivate: {
        /**
         * @description This endpoint is used by the Rehive Marketplace to remove this service for a specific company. It requires a permanent API token for that company.
         *
         * @tags deactivate
         * @name DeactivateCreate
         * @request POST:/deactivate/
         * @secure
         */
        deactivateCreate: (data: Deactivate$4, params?: RequestParams$4) => Promise<HttpResponse$3<Deactivate$4, any>>;
    };
    hooks: {
        /**
         * No description
         *
         * @tags hooks
         * @name HooksPrsCreate
         * @request POST:/hooks/prs/
         * @secure
         */
        hooksPrsCreate: (data: PRSWebhook, params?: RequestParams$4) => Promise<HttpResponse$3<PRSWebhook, any>>;
    };
    info: {
        /**
         * @description Returns node and network data for the service
         *
         * @tags info
         * @name InfoList
         * @request GET:/info/
         * @secure
         */
        infoList: (params?: RequestParams$4) => Promise<HttpResponse$3<InfoListData, any>>;
    };
    knownAssets: {
        /**
         * @description Returns node and network data for the service
         *
         * @tags known-assets
         * @name KnownAssetsList
         * @request GET:/known-assets/
         * @secure
         */
        knownAssetsList: (query: KnownAssetsListParams, params?: RequestParams$4) => Promise<HttpResponse$3<KnownAssetsListData, any>>;
    };
    stellarFederation: {
        /**
         * No description
         *
         * @tags stellar_federation
         * @name StellarFederationRead
         * @request GET:/stellar_federation/{company}/
         * @secure
         */
        stellarFederationRead: (company: string, params?: RequestParams$4) => Promise<HttpResponse$3<any, any>>;
    };
    transactions: {
        /**
         * @description ### List transactions
         *
         * @tags transactions
         * @name TransactionsList
         * @request GET:/transactions/
         * @secure
         */
        transactionsList: (query: TransactionsListParams, params?: RequestParams$4) => Promise<HttpResponse$3<TransactionsListData, any>>;
        /**
         * @description Create the send transaction on Rehive, and/or on the stellar blockchain. When the an email address, the transaction will be handled off-chain, only on the rehive ledger. When sent to a stellar address, the transaction is created on Rehive. Rehive then sends a webhook to the /hooks/debit/ endpoint and a blockchain transaction is created and broadcasted.
         *
         * @tags transactions
         * @name TransactionsSendCreate
         * @request POST:/transactions/send/
         * @secure
         */
        transactionsSendCreate: (data: SendTransaction, params?: RequestParams$4) => Promise<HttpResponse$3<SendTransaction, any>>;
    };
    user: {
        /**
         * No description
         *
         * @tags user
         * @name UserList
         * @request GET:/user/
         * @secure
         */
        userList: (params?: RequestParams$4) => Promise<HttpResponse$3<UserListData, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserPartialUpdate
         * @request PATCH:/user/
         * @secure
         */
        userPartialUpdate: (data: UserInfoSeralizer, params?: RequestParams$4) => Promise<HttpResponse$3<UserInfoSeralizer, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserAccountList
         * @request GET:/user/account/
         * @secure
         */
        userAccountList: (params?: RequestParams$4) => Promise<HttpResponse$3<any, any>>;
        /**
         * @description ### Endpoint for validating a specific session id using a valid Rehive user session
         *
         * @tags user
         * @name UserAnchorSessionsValidateCreate
         * @request POST:/user/anchor/sessions/{session_id}/validate/
         * @secure
         */
        userAnchorSessionsValidateCreate: (sessionId: string, data: AnchorAccountValidate, params?: RequestParams$4) => Promise<HttpResponse$3<object, any>>;
        /**
         * @description ### Endpoint for validating a specific session id using a valid Rehive user session
         *
         * @tags user
         * @name UserAnchorSessionsValidateAccountCreate
         * @request POST:/user/anchor/sessions/{session_id}/validate_account/
         * @secure
         */
        userAnchorSessionsValidateAccountCreate: (sessionId: string, data: AnchorAccountValidate, params?: RequestParams$4) => Promise<HttpResponse$3<object, any>>;
        /**
         * @description ### Endpoint for validating a specific session id using a valid Rehive user session
         *
         * @tags user
         * @name UserAnchorSessionsValidateSessionCreate
         * @request POST:/user/anchor/sessions/{session_id}/validate_session/
         * @secure
         */
        userAnchorSessionsValidateSessionCreate: (sessionId: string, data: AnchorSessionValidate, params?: RequestParams$4) => Promise<HttpResponse$3<object, any>>;
        /**
         * @description ### Endpoint for viewing all user SEP-10 sessions
         *
         * @tags user
         * @name UserAnchorTransactionsList
         * @request GET:/user/anchor/transactions/
         * @secure
         */
        userAnchorTransactionsList: (params?: RequestParams$4) => Promise<HttpResponse$3<UserAnchorTransactionsListData, any>>;
        /**
         * @description ### Endpoint for viewing all user SEP-10 sessions
         *
         * @tags user
         * @name UserAnchorTransactionsRead
         * @request GET:/user/anchor/transactions/{transaction_id}/
         * @secure
         */
        userAnchorTransactionsRead: (transactionId: string, params?: RequestParams$4) => Promise<HttpResponse$3<UserSEP24Transaction, any>>;
        /**
         * @description ### Endpoint for viewing all user SEP-10 sessions
         *
         * @tags user
         * @name UserAnchorTransactionsCreate
         * @request POST:/user/anchor/transactions/{transaction_id}/
         * @secure
         */
        userAnchorTransactionsCreate: (transactionId: string, data: UserSEP24Transaction, params?: RequestParams$4) => Promise<HttpResponse$3<UserSEP24Transaction, any>>;
        /**
         * @description ### Endpoint for viewing all user SEP-10 sessions
         *
         * @tags user
         * @name UserAnchorTransactionsPartialUpdate
         * @request PATCH:/user/anchor/transactions/{transaction_id}/
         * @secure
         */
        userAnchorTransactionsPartialUpdate: (transactionId: string, data: UserSEP24Transaction, params?: RequestParams$4) => Promise<HttpResponse$3<UserSEP24Transaction, any>>;
        /**
         * @description ### Endpoint for generating a new unvalidated authentication session using a SEP 10 JWT
         *
         * @tags user
         * @name UserAnchorAuthCreate
         * @request POST:/user/anchor/{company_id}/auth/
         * @secure
         */
        userAnchorAuthCreate: (companyId: string, params?: RequestParams$4) => Promise<HttpResponse$3<any, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserKnownPublicAddressesList
         * @request GET:/user/known-public-addresses/
         * @secure
         */
        userKnownPublicAddressesList: (params?: RequestParams$4) => Promise<HttpResponse$3<UserKnownPublicAddressesListData, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserMemosList
         * @request GET:/user/memos/
         * @secure
         */
        userMemosList: (params?: RequestParams$4) => Promise<HttpResponse$3<UserMemosListData, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserMemosCreate
         * @request POST:/user/memos/
         * @secure
         */
        userMemosCreate: (data: UserMemo, params?: RequestParams$4) => Promise<HttpResponse$3<UserMemo, any>>;
        /**
         * @description Create the send transaction on Rehive, and/or on the stellar blockchain. When the an email address, the transaction will be handled off-chain, only on the rehive ledger. When sent to a stellar address, the transaction is created on Rehive. Rehive then sends a webhook to the /hooks/debit/ endpoint and a blockchain transaction is created and broadcasted.
         *
         * @tags user
         * @name UserTransactionsSendCreate
         * @request POST:/user/transactions/send/
         * @secure
         */
        userTransactionsSendCreate: (data: SendTransaction, params?: RequestParams$4) => Promise<HttpResponse$3<SendTransaction, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserUsernameSetCreate
         * @request POST:/user/username/set/
         * @secure
         */
        userUsernameSetCreate: (data: SetUsernameMemo, params?: RequestParams$4) => Promise<HttpResponse$3<SetUsernameMemo, any>>;
    };
}

/** This serializer can be used if only a `status` is required in the response. */
interface ActionResponse$3 {
    /** @default "sucess" */
    status?: string;
}
interface Activate$3 {
    token: string;
    id: string;
    /** @format uuid */
    secret: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminBusiness {
    id: string;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    owner: string;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    inc_number?: string | null;
    colors?: Record<string, any>;
    categories: BusinessCategory[];
    /** @format uri */
    logo?: string | null;
    /** @format uri */
    icon?: string | null;
    account: string;
    currency: Currency$2;
    timezone: string;
    destinations: AdminBusinessAutomatedPayoutDestination[];
    /** @maxLength 30 */
    vat_number?: string | null;
    /** @maxLength 200 */
    address_line_1?: string | null;
    /** @maxLength 200 */
    address_line_2?: string | null;
    /** @maxLength 100 */
    address_city?: string | null;
    /** @maxLength 100 */
    address_state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia (Federated States of)
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Turkey
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    address_country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    address_postal_code?: string | null;
    /**
     * * `declined` - Declined
     * * `pending` - Pending
     * * `verified` - Verified
     */
    status: "declined" | "pending" | "verified";
    metadata?: Record<string, any>;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminBusinessAutomatedPayoutDestination {
    currency: Currency$2;
    /**
     * * `native` - native
     * * `bank` - bank
     * * `bitcoin` - bitcoin
     */
    type: "native" | "bank" | "bitcoin";
    percentage: number;
    account: string | null;
    bitcoin_account: string | null;
    bank_account: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminBusinessCategory {
    /** @format uuid */
    id: string;
    /** @maxLength 50 */
    name: string;
    /** @format uuid */
    parent?: string;
    /** @format uri */
    image?: string;
    created: number;
    updated: number;
    /** @maxLength 255 */
    description?: string | null;
}
interface AdminBusinessCategoryResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminBusinessCategory;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminBusinessDocument {
    id: string;
    /** @format uri */
    file: string;
    /**
     * * `incorporation_certificate` - incorporation_certificate
     * * `tax_certificate` - tax_certificate
     * * `financial_statement` - financial_statement
     * * `trade_certificate` - trade_certificate
     * * `shareholder_identification` - shareholder_identification
     */
    type: "incorporation_certificate" | "tax_certificate" | "financial_statement" | "trade_certificate" | "shareholder_identification";
    /**
     * * `obsolete` - obsolete
     * * `declined` - declined
     * * `pending` - pending
     * * `incomplete` - incomplete
     * * `verified` - verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    metadata?: Record<string, any>;
    /** @maxLength 250 */
    note?: string | null;
    expires?: number | null;
    created: number;
    updated: number;
}
interface AdminBusinessDocumentResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminBusinessDocument;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminBusinessPayout {
    id: string;
    reference: string | null;
    /**
     * * `queued` - queued
     * * `processing` - processing
     * * `failed` - failed
     * * `complete` - complete
     * * `quarantined` - quarantined
     */
    status: "queued" | "processing" | "failed" | "complete" | "quarantined";
    currency: Currency$2;
    amount: number;
    destinations: AdminBusinessPayoutDestination[];
    errors: string[] | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminBusinessPayoutDestination {
    currency: Currency$2;
    /**
     * * `native` - native
     * * `bank` - bank
     * * `bitcoin` - bitcoin
     */
    type: "native" | "bank" | "bitcoin";
    percentage: number;
    account: string | null;
    bitcoin_account: string | null;
    bank_account: string | null;
    allocation: number | null;
    amount: number;
    conversion_collection: string | null;
    transfer_collection: string | null;
    withdraw_collection: string | null;
}
interface AdminBusinessPayoutResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminBusinessPayout;
}
interface AdminBusinessPayoutTransaction {
    id: string;
    collection: string;
    parent: string;
    partner: Record<string, any>;
    tx_type: string;
    subtype: string;
    note: string;
    metadata: Record<string, any>;
    status: string;
    reference: string;
    amount: number;
    total_amount: number;
    balance: number;
    currency: Record<string, any>;
    account: string;
    created: number;
    updated: number;
}
interface AdminBusinessResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminBusiness;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminBusinessUser {
    id: string;
    business: ShortBusiness;
    /** @format email */
    email: string | null;
    mobile: string | null;
    roles: ("manager" | "customer")[];
    user: User$3;
    first_name: string;
    last_name: string;
    username: string;
    profile: string;
    created: number;
    updated: number;
}
interface AdminBusinessUserResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminBusinessUser;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompany$3 {
    id: string;
    /** @format uuid */
    secret: string;
    /** @maxItems 10 */
    manager_groups?: string[] | null;
    payout_minimums: AdminCompanyPayoutMinimum[];
    /**
     * @min 12
     * @max 168
     */
    payout_exclusion_period?: number;
    /**
     * @min 0
     * @max 6
     */
    payout_day?: number;
    /**
     * @min 0
     * @max 23
     */
    payout_hour?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompanyPayoutMinimum {
    currency: Currency$2;
    amount: number;
}
interface AdminCompanyResponse$3 {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminCompany$3;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateBusinessDocument {
    id: string;
    /** @format uri */
    file: string;
    /**
     * * `incorporation_certificate` - incorporation_certificate
     * * `tax_certificate` - tax_certificate
     * * `financial_statement` - financial_statement
     * * `trade_certificate` - trade_certificate
     * * `shareholder_identification` - shareholder_identification
     */
    type: "incorporation_certificate" | "tax_certificate" | "financial_statement" | "trade_certificate" | "shareholder_identification";
    /**
     * * `obsolete` - obsolete
     * * `declined` - declined
     * * `pending` - pending
     * * `incomplete` - incomplete
     * * `verified` - verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    metadata?: Record<string, any>;
    /** @maxLength 250 */
    note?: string | null;
    expires?: number | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateBusinessPayout {
    id: string;
    /** @maxLength 100 */
    reference?: string | null;
    /**
     * * `queued` - queued
     * * `processing` - processing
     * * `failed` - failed
     * * `complete` - complete
     * * `quarantined` - quarantined
     */
    status: "queued" | "processing" | "failed" | "complete" | "quarantined";
    amount: number;
    destinations?: AdminCreateBusinessPayoutDestination[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateBusinessPayoutDestination {
    currency: string;
    /**
     * * `native` - native
     * * `bank` - bank
     * * `bitcoin` - bitcoin
     */
    type: "native" | "bank" | "bitcoin";
    /**
     * @min 1
     * @max 100
     */
    percentage: number;
    /** @maxLength 30 */
    account?: string | null;
    /** @maxLength 50 */
    bitcoin_account?: string | null;
    /** @maxLength 50 */
    bank_account?: string | null;
    allocation: number | null;
    amount: number;
    conversion_collection: string | null;
    transfer_collection: string | null;
    withdraw_collection: string | null;
    /** @format date-time */
    created: string;
    /** @format date-time */
    updated: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateBusinessUser {
    business: string;
    user?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    email?: string | null;
    /** @maxLength 24 */
    mobile?: string | null;
    roles: ("manager" | "customer")[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateBusiness {
    id: string;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    owner: string;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    inc_number?: string | null;
    colors?: Record<string, any>;
    categories: BusinessCategory[];
    /** @format uri */
    logo?: string | null;
    /** @format uri */
    icon?: string | null;
    account: string;
    currency: Currency$2;
    timezone: string;
    destinations: AdminBusinessAutomatedPayoutDestination[];
    /** @maxLength 30 */
    vat_number?: string | null;
    /** @maxLength 200 */
    address_line_1?: string | null;
    /** @maxLength 200 */
    address_line_2?: string | null;
    /** @maxLength 100 */
    address_city?: string | null;
    /** @maxLength 100 */
    address_state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia (Federated States of)
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Turkey
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    address_country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    address_postal_code?: string | null;
    /**
     * * `declined` - Declined
     * * `pending` - Pending
     * * `verified` - Verified
     */
    status?: "declined" | "pending" | "verified";
    metadata?: Record<string, any>;
    created: number;
    updated: number;
}
interface AdminUpdateBusinessResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminUpdateBusiness;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateBusinessUser {
    business: string;
    /**
     * @maxItems 2
     * @minItems 0
     */
    roles: ("manager" | "customer")[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateCompany$1 {
    id: string;
    /** @format uuid */
    secret: string;
    /** @maxItems 10 */
    manager_groups?: string[] | null;
    payout_minimums?: AdminUpdateCompanyPayoutMinimum[];
    /**
     * @min 12
     * @max 168
     */
    payout_exclusion_period?: number;
    /**
     * @min 0
     * @max 6
     */
    payout_day?: number;
    /**
     * @min 0
     * @max 23
     */
    payout_hour?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateCompanyPayoutMinimum {
    currency: string;
    amount: number;
}
interface BusinessCategories {
    categories: BusinessCategory[];
}
interface BusinessCategoriesResponse {
    /** @example "success" */
    status?: string;
    data?: BusinessCategories;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface BusinessCategory {
    id: string;
    name: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    parent?: BusinessCategoryParent;
    /** @format uri */
    image: string | null;
    created: number;
    updated: number;
    description: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface BusinessCategoryParent {
    /** @format uuid */
    id: string;
    name: string;
    parent: number | null;
    created: number;
    updated: number;
    description: string | null;
}
interface BusinessCategoryResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: BusinessCategory;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface BusinessCategoryUpdate {
    id: string;
    name: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    parent?: BusinessCategoryParent;
    /** @format uri */
    image: string | null;
    created: number;
    updated: number;
    description: string | null;
}
interface BusinessCategoryUpdateResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: BusinessCategoryUpdate;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface BusinessUser {
    id: string;
    /** @format email */
    email: string | null;
    mobile: string | null;
    roles: ("manager" | "customer")[];
    user: User$3;
    first_name: string;
    last_name: string;
    username: string;
    profile: string;
    created: number;
    updated: number;
}
interface BusinessUserResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: BusinessUser;
}
interface BusinsessCategoryCreate {
    categories: string[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Currency$2 {
    /** @maxLength 30 */
    code: string;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
}
interface CurrencyResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Currency$2;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CustomerBusiness {
    id: string;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 100 */
    website?: string | null;
    colors?: Record<string, any>;
    categories: BusinessCategory[];
    /** @format uri */
    logo?: string | null;
    /** @format uri */
    icon?: string | null;
    currency: Currency$2;
    /** @maxLength 200 */
    address_line_1?: string | null;
    /** @maxLength 200 */
    address_line_2?: string | null;
    /** @maxLength 100 */
    address_city?: string | null;
    /** @maxLength 100 */
    address_state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia (Federated States of)
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Turkey
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    address_country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    address_postal_code?: string | null;
    metadata: Record<string, any>;
    created: number;
    updated: number;
}
interface CustomerBusinessResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: CustomerBusiness;
}
interface CustomerEnroll {
    business: string;
}
interface Deactivate$3 {
    token: string;
    /** @default false */
    purge?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerBusiness {
    id: string;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    owner: string;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    inc_number?: string | null;
    colors?: Record<string, any>;
    categories: BusinessCategory[];
    /** @format uri */
    logo?: string | null;
    /** @format uri */
    icon?: string | null;
    account: string;
    currency: Currency$2;
    timezone: string;
    destinations: ManagerBusinessAutomatedPayoutDestination[];
    /** @maxLength 30 */
    vat_number?: string | null;
    /** @maxLength 200 */
    address_line_1?: string | null;
    /** @maxLength 200 */
    address_line_2?: string | null;
    /** @maxLength 100 */
    address_city?: string | null;
    /** @maxLength 100 */
    address_state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia (Federated States of)
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Turkey
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    address_country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    address_postal_code?: string | null;
    /**
     * * `declined` - Declined
     * * `pending` - Pending
     * * `verified` - Verified
     */
    status: "declined" | "pending" | "verified";
    metadata?: Record<string, any>;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerBusinessAutomatedPayoutDestination {
    currency: Currency$2;
    /**
     * * `native` - native
     * * `bank` - bank
     * * `bitcoin` - bitcoin
     */
    type: "native" | "bank" | "bitcoin";
    percentage: number;
    account: string | null;
    bitcoin_account: string | null;
    bank_account: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerBusinessDocument {
    id: string;
    /** @format uri */
    file: string;
    /**
     * * `incorporation_certificate` - incorporation_certificate
     * * `tax_certificate` - tax_certificate
     * * `financial_statement` - financial_statement
     * * `trade_certificate` - trade_certificate
     * * `shareholder_identification` - shareholder_identification
     */
    type: "incorporation_certificate" | "tax_certificate" | "financial_statement" | "trade_certificate" | "shareholder_identification";
    /**
     * * `obsolete` - obsolete
     * * `declined` - declined
     * * `pending` - pending
     * * `incomplete` - incomplete
     * * `verified` - verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    metadata?: Record<string, any>;
    note: string | null;
    expires?: number | null;
    created: number;
    updated: number;
}
interface ManagerBusinessDocumentResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ManagerBusinessDocument;
}
interface ManagerBusinessInvoice {
    id: string;
    user: Record<string, any>;
    account: string;
    request_reference?: string;
    request_currency: Record<string, any>;
    request_amount: number;
    primary_payment_processor: Record<string, any>;
    description?: string;
    status: string;
    return_url?: string;
    redirect_url: string;
    payer_user: Record<string, any>;
    payer_email?: string;
    payer_mobile_number?: string;
    payment_processor_quotes: Record<string, any>;
    expiration_date?: number;
    due_date?: number;
    send_request_on?: number;
    send_reminders?: boolean;
    metadata?: Record<string, any>;
    refunded: boolean;
    created: number;
    updated: number;
}
interface ManagerBusinessInvoiceLog {
    user_agent: string;
    ip_address: string;
    email: string;
    mobile_number: string;
}
interface ManagerBusinessInvoiceRefund {
    identifier: string;
    amount: number;
    currency: Record<string, any>;
    status: string;
    type: string;
    transaction_collection: string;
    request: string;
    reason?: string;
    created: number;
    updated: number;
}
interface ManagerBusinessInvoiceResponse {
    /** @example "success" */
    status?: string;
    data?: ManagerBusinessInvoice;
}
interface ManagerBusinessInvoiceTransaction {
    rehive_code: string;
    settled: boolean;
    payment_processor_quote: number;
    details: Record<string, any>;
}
interface ManagerBusinessMetric {
    id: string;
    name: string;
    resource: string;
    function: string;
    expression: string;
    currency: Record<string, any>;
    timezone: string;
    query: Record<string, any>;
    metadata: Record<string, any>;
    created: number;
    updated: number;
}
interface ManagerBusinessMetricPoint {
    id: string;
    value: number;
    date: number;
}
interface ManagerBusinessMetricResponse {
    /** @example "success" */
    status?: string;
    data?: ManagerBusinessMetric;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerBusinessPayout {
    id: string;
    reference: string | null;
    /**
     * * `queued` - queued
     * * `processing` - processing
     * * `failed` - failed
     * * `complete` - complete
     * * `quarantined` - quarantined
     */
    status: "queued" | "processing" | "failed" | "complete" | "quarantined";
    currency: Currency$2;
    amount: number;
    destinations: ManagerBusinessPayoutDestination[];
    errors: string[] | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerBusinessPayoutDestination {
    currency: Currency$2;
    /**
     * * `native` - native
     * * `bank` - bank
     * * `bitcoin` - bitcoin
     */
    type: "native" | "bank" | "bitcoin";
    percentage: number;
    account: string | null;
    bitcoin_account: string | null;
    bank_account: string | null;
    allocation: number | null;
    amount: number;
    conversion_collection: string | null;
    transfer_collection: string | null;
    withdraw_collection: string | null;
}
interface ManagerBusinessPayoutResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ManagerBusinessPayout;
}
interface ManagerBusinessPayoutTransaction {
    id: string;
    collection: string;
    parent: string;
    partner: Record<string, any>;
    tx_type: string;
    subtype: string;
    note: string;
    metadata: Record<string, any>;
    status: string;
    reference: string;
    amount: number;
    total_amount: number;
    balance: number;
    currency: Record<string, any>;
    account: string;
    created: number;
    updated: number;
}
interface ManagerBusinessResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ManagerBusiness;
}
interface ManagerBusinessTransaction {
    id: string;
    collection: string;
    parent: string;
    partner: Record<string, any>;
    tx_type: string;
    subtype: string;
    note: string;
    metadata: Record<string, any>;
    status: string;
    reference: string;
    amount: number;
    total_amount: number;
    balance: number;
    currency: Record<string, any>;
    account: string;
    created: number;
    updated: number;
}
interface ManagerBusinessTransactionResponse {
    /** @example "success" */
    status?: string;
    data?: ManagerBusinessTransaction;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCompany {
    id: string;
    manager_groups: string[] | null;
    payout_minimums: ManagerCompanyPayoutMinimum[];
    payout_exclusion_period: number;
    payout_day: number;
    payout_hour: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCompanyPayoutMinimum {
    currency: Currency$2;
    amount: number;
}
interface ManagerCompanyResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: ManagerCompany;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateBusiness {
    id: string;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    owner: string;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    inc_number?: string | null;
    colors?: Record<string, any>;
    categories: BusinessCategory[];
    /** @format uri */
    logo?: string | null;
    /** @format uri */
    icon?: string | null;
    account: string;
    currency: string;
    timezone: string;
    destinations?: ManagerCreateUpdateBusinessAutomatedPayoutDestination[];
    /** @maxLength 30 */
    vat_number?: string | null;
    /** @maxLength 200 */
    address_line_1?: string | null;
    /** @maxLength 200 */
    address_line_2?: string | null;
    /** @maxLength 100 */
    address_city?: string | null;
    /** @maxLength 100 */
    address_state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia (Federated States of)
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Turkey
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    address_country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    address_postal_code?: string | null;
    /**
     * * `declined` - Declined
     * * `pending` - Pending
     * * `verified` - Verified
     */
    status: "declined" | "pending" | "verified";
    metadata?: Record<string, any>;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateBusinessDocument {
    id: string;
    /** @format uri */
    file: string;
    /**
     * * `incorporation_certificate` - incorporation_certificate
     * * `tax_certificate` - tax_certificate
     * * `financial_statement` - financial_statement
     * * `trade_certificate` - trade_certificate
     * * `shareholder_identification` - shareholder_identification
     */
    type: "incorporation_certificate" | "tax_certificate" | "financial_statement" | "trade_certificate" | "shareholder_identification";
    /**
     * * `obsolete` - obsolete
     * * `declined` - declined
     * * `pending` - pending
     * * `incomplete` - incomplete
     * * `verified` - verified
     */
    status: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    metadata?: Record<string, any>;
    /** @maxLength 250 */
    note?: string | null;
    expires?: number | null;
    created: number;
    updated: number;
}
interface ManagerCreateBusinessInvoice {
    id: string;
    user: Record<string, any>;
    account: string;
    request_reference?: string;
    request_currency: Record<string, any>;
    request_amount: number;
    primary_payment_processor: Record<string, any>;
    description?: string;
    status: string;
    return_url?: string;
    redirect_url: string;
    payer_user: Record<string, any>;
    payer_email?: string;
    payer_mobile_number?: string;
    payment_processor_quotes: Record<string, any>;
    expiration_date?: number;
    due_date?: number;
    send_request_on?: number;
    send_reminders?: boolean;
    metadata?: Record<string, any>;
    refunded: boolean;
    created: number;
    updated: number;
}
interface ManagerCreateBusinessInvoiceRefund {
    identifier: string;
    amount: number;
    currency: string;
    status: string;
    type: string;
    transaction_collection: string;
    request: string;
    reason?: string;
    created: number;
    updated: number;
}
interface ManagerCreateBusinessInvoiceRefundResponse {
    /** @example "success" */
    status?: string;
    data?: ManagerCreateBusinessInvoiceRefund;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateBusinessPayout {
    id: string;
    /** @maxLength 100 */
    reference?: string | null;
    /**
     * * `queued` - queued
     * * `processing` - processing
     * * `failed` - failed
     * * `complete` - complete
     * * `quarantined` - quarantined
     */
    status: "queued" | "processing" | "failed" | "complete" | "quarantined";
    amount: number;
    destinations?: ManagerCreateBusinessPayoutDestination[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateBusinessPayoutDestination {
    currency: string;
    /**
     * * `native` - native
     * * `bank` - bank
     * * `bitcoin` - bitcoin
     */
    type: "native" | "bank" | "bitcoin";
    /**
     * @min 1
     * @max 100
     */
    percentage: number;
    /** @maxLength 30 */
    account?: string | null;
    /** @maxLength 50 */
    bitcoin_account?: string | null;
    /** @maxLength 50 */
    bank_account?: string | null;
    allocation: number | null;
    amount: number;
    conversion_collection: string | null;
    transfer_collection: string | null;
    withdraw_collection: string | null;
    /** @format date-time */
    created: string;
    /** @format date-time */
    updated: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateBusinessUser {
    user?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    email?: string | null;
    /** @maxLength 24 */
    mobile?: string | null;
    roles: ("manager" | "customer")[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerCreateUpdateBusinessAutomatedPayoutDestination {
    currency: string;
    /**
     * * `native` - native
     * * `bank` - bank
     * * `bitcoin` - bitcoin
     */
    type: "native" | "bank" | "bitcoin";
    /**
     * @min 1
     * @max 100
     */
    percentage: number;
    /** @maxLength 30 */
    account?: string | null;
    /** @maxLength 50 */
    bitcoin_account?: string | null;
    /** @maxLength 50 */
    bank_account?: string | null;
    /** @format date-time */
    created: string;
    /** @format date-time */
    updated: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerUpdateBusiness {
    id: string;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    owner: string;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    inc_number?: string | null;
    colors?: Record<string, any>;
    categories: BusinessCategory[];
    /** @format uri */
    logo?: string | null;
    /** @format uri */
    icon?: string | null;
    account: string;
    currency: Currency$2;
    timezone: string;
    destinations?: ManagerCreateUpdateBusinessAutomatedPayoutDestination[];
    /** @maxLength 30 */
    vat_number?: string | null;
    /** @maxLength 200 */
    address_line_1?: string | null;
    /** @maxLength 200 */
    address_line_2?: string | null;
    /** @maxLength 100 */
    address_city?: string | null;
    /** @maxLength 100 */
    address_state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia (Federated States of)
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Turkey
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    address_country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    address_postal_code?: string | null;
    /**
     * * `declined` - Declined
     * * `pending` - Pending
     * * `verified` - Verified
     */
    status: "declined" | "pending" | "verified";
    metadata?: Record<string, any>;
    created: number;
    updated: number;
}
interface ManagerUpdateBusinessInvoice {
    id: string;
    user: Record<string, any>;
    account: string;
    request_reference?: string;
    request_currency: Record<string, any>;
    request_amount: number;
    primary_payment_processor: Record<string, any>;
    description?: string;
    status: string;
    return_url?: string;
    redirect_url: string;
    payer_user: Record<string, any>;
    payer_email?: string;
    payer_mobile_number?: string;
    payment_processor_quotes: Record<string, any>;
    expiration_date?: number;
    due_date?: number;
    send_request_on?: number;
    send_reminders?: boolean;
    metadata?: Record<string, any>;
    refunded: boolean;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ManagerUpdateBusinessUser {
    /**
     * @maxItems 2
     * @minItems 0
     */
    roles: ("manager" | "customer")[];
}
interface PaginatedAdminBusinessCategoryList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminBusinessCategory[];
}
interface PaginatedAdminBusinessCategoryListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminBusinessCategoryList;
}
interface PaginatedAdminBusinessDocumentList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminBusinessDocument[];
}
interface PaginatedAdminBusinessDocumentListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminBusinessDocumentList;
}
interface PaginatedAdminBusinessList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminBusiness[];
}
interface PaginatedAdminBusinessListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminBusinessList;
}
interface PaginatedAdminBusinessPayoutList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminBusinessPayout[];
}
interface PaginatedAdminBusinessPayoutListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminBusinessPayoutList;
}
interface PaginatedAdminBusinessPayoutTransactionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminBusinessPayoutTransaction[];
}
interface PaginatedAdminBusinessPayoutTransactionListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminBusinessPayoutTransactionList;
}
interface PaginatedAdminBusinessUserList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminBusinessUser[];
}
interface PaginatedAdminBusinessUserListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminBusinessUserList;
}
interface PaginatedBusinessCategoryList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: BusinessCategory[];
}
interface PaginatedBusinessCategoryListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedBusinessCategoryList;
}
interface PaginatedBusinessUserList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: BusinessUser[];
}
interface PaginatedBusinessUserListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedBusinessUserList;
}
interface PaginatedCurrencyList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Currency$2[];
}
interface PaginatedCurrencyListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedCurrencyList;
}
interface PaginatedCustomerBusinessList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: CustomerBusiness[];
}
interface PaginatedCustomerBusinessListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedCustomerBusinessList;
}
interface PaginatedManagerBusinessDocumentList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerBusinessDocument[];
}
interface PaginatedManagerBusinessDocumentListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerBusinessDocumentList;
}
interface PaginatedManagerBusinessInvoiceList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerBusinessInvoice[];
}
interface PaginatedManagerBusinessInvoiceListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerBusinessInvoiceList;
}
interface PaginatedManagerBusinessInvoiceLogList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerBusinessInvoiceLog[];
}
interface PaginatedManagerBusinessInvoiceLogListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerBusinessInvoiceLogList;
}
interface PaginatedManagerBusinessInvoiceRefundList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerBusinessInvoiceRefund[];
}
interface PaginatedManagerBusinessInvoiceRefundListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerBusinessInvoiceRefundList;
}
interface PaginatedManagerBusinessInvoiceTransactionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerBusinessInvoiceTransaction[];
}
interface PaginatedManagerBusinessInvoiceTransactionListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerBusinessInvoiceTransactionList;
}
interface PaginatedManagerBusinessList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerBusiness[];
}
interface PaginatedManagerBusinessListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerBusinessList;
}
interface PaginatedManagerBusinessMetricList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerBusinessMetric[];
}
interface PaginatedManagerBusinessMetricListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerBusinessMetricList;
}
interface PaginatedManagerBusinessMetricPointList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerBusinessMetricPoint[];
}
interface PaginatedManagerBusinessMetricPointListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerBusinessMetricPointList;
}
interface PaginatedManagerBusinessPayoutList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerBusinessPayout[];
}
interface PaginatedManagerBusinessPayoutListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerBusinessPayoutList;
}
interface PaginatedManagerBusinessPayoutTransactionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerBusinessPayoutTransaction[];
}
interface PaginatedManagerBusinessPayoutTransactionListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerBusinessPayoutTransactionList;
}
interface PaginatedManagerBusinessTransactionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: ManagerBusinessTransaction[];
}
interface PaginatedManagerBusinessTransactionListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedManagerBusinessTransactionList;
}
interface PaginatedUserBusinessList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: UserBusiness[];
}
interface PaginatedUserBusinessListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedUserBusinessList;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminBusinessCategory {
    /** @format uuid */
    id?: string;
    /** @maxLength 50 */
    name?: string;
    /** @format uuid */
    parent?: string;
    /** @format uri */
    image?: string;
    created?: number;
    updated?: number;
    /** @maxLength 255 */
    description?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminBusinessDocument {
    id?: string;
    /** @format uri */
    file?: string;
    /**
     * * `incorporation_certificate` - incorporation_certificate
     * * `tax_certificate` - tax_certificate
     * * `financial_statement` - financial_statement
     * * `trade_certificate` - trade_certificate
     * * `shareholder_identification` - shareholder_identification
     */
    type?: "incorporation_certificate" | "tax_certificate" | "financial_statement" | "trade_certificate" | "shareholder_identification";
    /**
     * * `obsolete` - obsolete
     * * `declined` - declined
     * * `pending` - pending
     * * `incomplete` - incomplete
     * * `verified` - verified
     */
    status?: "obsolete" | "declined" | "pending" | "incomplete" | "verified";
    metadata?: Record<string, any>;
    /** @maxLength 250 */
    note?: string | null;
    expires?: number | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateBusiness {
    id?: string;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    owner?: string;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    inc_number?: string | null;
    colors?: Record<string, any>;
    categories?: BusinessCategory[];
    /** @format uri */
    logo?: string | null;
    /** @format uri */
    icon?: string | null;
    account?: string;
    currency?: Currency$2;
    timezone?: string;
    destinations?: AdminBusinessAutomatedPayoutDestination[];
    /** @maxLength 30 */
    vat_number?: string | null;
    /** @maxLength 200 */
    address_line_1?: string | null;
    /** @maxLength 200 */
    address_line_2?: string | null;
    /** @maxLength 100 */
    address_city?: string | null;
    /** @maxLength 100 */
    address_state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia (Federated States of)
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Turkey
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    address_country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    address_postal_code?: string | null;
    /**
     * * `declined` - Declined
     * * `pending` - Pending
     * * `verified` - Verified
     */
    status?: "declined" | "pending" | "verified";
    metadata?: Record<string, any>;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateBusinessUser {
    business?: string;
    /**
     * @maxItems 2
     * @minItems 0
     */
    roles?: ("manager" | "customer")[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateCompany$1 {
    id?: string;
    /** @format uuid */
    secret?: string;
    /** @maxItems 10 */
    manager_groups?: string[] | null;
    payout_minimums?: AdminUpdateCompanyPayoutMinimum[];
    /**
     * @min 12
     * @max 168
     */
    payout_exclusion_period?: number;
    /**
     * @min 0
     * @max 6
     */
    payout_day?: number;
    /**
     * @min 0
     * @max 23
     */
    payout_hour?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerUpdateBusiness {
    id?: string;
    /** @maxLength 200 */
    name?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    owner?: string;
    /** @maxLength 100 */
    website?: string | null;
    /** @maxLength 100 */
    inc_number?: string | null;
    colors?: Record<string, any>;
    categories?: BusinessCategory[];
    /** @format uri */
    logo?: string | null;
    /** @format uri */
    icon?: string | null;
    account?: string;
    currency?: Currency$2;
    timezone?: string;
    destinations?: ManagerCreateUpdateBusinessAutomatedPayoutDestination[];
    /** @maxLength 30 */
    vat_number?: string | null;
    /** @maxLength 200 */
    address_line_1?: string | null;
    /** @maxLength 200 */
    address_line_2?: string | null;
    /** @maxLength 100 */
    address_city?: string | null;
    /** @maxLength 100 */
    address_state_province?: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia (Federated States of)
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Turkey
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    address_country?: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "" | null;
    /** @maxLength 10 */
    address_postal_code?: string | null;
    /**
     * * `declined` - Declined
     * * `pending` - Pending
     * * `verified` - Verified
     */
    status?: "declined" | "pending" | "verified";
    metadata?: Record<string, any>;
    created?: number;
    updated?: number;
}
interface PatchedManagerUpdateBusinessInvoice {
    id?: string;
    user?: Record<string, any>;
    account?: string;
    request_reference?: string;
    request_currency?: Record<string, any>;
    request_amount?: number;
    primary_payment_processor?: Record<string, any>;
    description?: string;
    status?: string;
    return_url?: string;
    redirect_url?: string;
    payer_user?: Record<string, any>;
    payer_email?: string;
    payer_mobile_number?: string;
    payment_processor_quotes?: Record<string, any>;
    expiration_date?: number;
    due_date?: number;
    send_request_on?: number;
    send_reminders?: boolean;
    metadata?: Record<string, any>;
    refunded?: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedManagerUpdateBusinessUser {
    /**
     * @maxItems 2
     * @minItems 0
     */
    roles?: ("manager" | "customer")[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ShortBusiness {
    id: string;
    /** @maxLength 200 */
    name?: string | null;
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface User$3 {
    id: string;
    first_name: string | null;
    last_name: string | null;
    username: string | null;
    profile: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserBusiness {
    id: string;
    name: string | null;
    description: string | null;
    website: string | null;
    inc_number: string | null;
    colors: Record<string, any>;
    categories: BusinessCategory[];
    /** @format uri */
    logo: string | null;
    /** @format uri */
    icon: string | null;
    timezone: string;
    vat_number: string | null;
    address_line_1: string | null;
    address_line_2: string | null;
    address_city: string | null;
    address_state_province: string | null;
    /**
     * * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia (Federated States of)
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Turkey
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe
     */
    address_country: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | null;
    address_postal_code: string | null;
    metadata: Record<string, any>;
    created: number;
    updated: number;
}
interface UserBusinessResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: UserBusiness;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface UserCompany {
    id: string;
    manager_groups: string[] | null;
}
interface UserCompanyResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: UserCompany;
}
interface Webhook$2 {
    id: string;
    /**
     * * `transaction.create` - transaction.create
     * * `currency.create` - currency.create
     * * `currency.update` - currency.update
     * * `user.update` - User Update
     */
    event: "transaction.create" | "currency.create" | "currency.update" | "user.update";
    company: string;
    data: Record<string, any>;
}
interface AdminBusinessCategoriesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminBusinessUsersListParams {
    business?: string;
    email?: string;
    mobile?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    roles?: string;
    user?: string;
}
interface AdminBusinessesListParams {
    categories?: string;
    identifier?: string;
    owner?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
}
interface AdminBusinessesDocumentsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    businessId: string;
}
interface AdminBusinessesPayoutsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    businessId: string;
}
interface AdminBusinessesPayoutsTransactionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    businessId: string;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    payoutId: string;
}
interface AdminBusinessesCategoriesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    identifier: string;
}
interface AdminCurrenciesListParams$1 {
    code?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface CustomerBusinessesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface ManagerBusinessCategoriesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface ManagerBusinessesListParams {
    categories?: string;
    identifier?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
}
interface ManagerBusinessesDocumentsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    businessId: string;
}
interface ManagerBusinessesInvoicesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    businessId: string;
}
interface ManagerBusinessesInvoicesLogsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    businessId: string;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    invoiceId: string;
}
interface ManagerBusinessesInvoicesRefundsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    businessId: string;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    invoiceId: string;
}
interface ManagerBusinessesInvoicesTransactionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    businessId: string;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    invoiceId: string;
}
interface ManagerBusinessesMetricsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    businessId: string;
}
interface ManagerBusinessesMetricsPointsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    businessId: string;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    metricId: string;
}
interface ManagerBusinessesPayoutsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    businessId: string;
}
interface ManagerBusinessesPayoutsTransactionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    businessId: string;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    payoutId: string;
}
interface ManagerBusinessesTransactionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^\w+$ */
    businessId: string;
}
interface ManagerBusinessesUsersListParams {
    email?: string;
    mobile?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    roles?: string;
    user?: string;
    /** @pattern ^\w+$ */
    businessId: string;
}
interface ManagerBusinessesCategoriesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    identifier: string;
}
interface UserBusinessCategoriesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface UserBusinessesListParams {
    categories?: string;
    identifier?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    status?: string;
}
type QueryParamsType$2 = Record<string | number, any>;
type ResponseFormat$2 = keyof Omit<Body, "body" | "bodyUsed">;
interface FullRequestParams$2 extends Omit<RequestInit, "body"> {
    /** set parameter to `true` for call `securityWorker` for this request */
    secure?: boolean;
    /** request path */
    path: string;
    /** content type of request body */
    type?: ContentType$2;
    /** query params */
    query?: QueryParamsType$2;
    /** format of response (i.e. response.json() -> format: "json") */
    format?: ResponseFormat$2;
    /** request body */
    body?: unknown;
    /** base url */
    baseUrl?: string;
    /** request cancellation token */
    cancelToken?: CancelToken$2;
}
type RequestParams$3 = Omit<FullRequestParams$2, "body" | "method" | "query" | "path">;
interface ApiConfig$2<SecurityDataType = unknown> {
    baseUrl?: string;
    baseApiParams?: Omit<RequestParams$3, "baseUrl" | "cancelToken" | "signal">;
    securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams$3 | void> | RequestParams$3 | void;
    customFetch?: typeof fetch;
}
interface HttpResponse$2<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}
type CancelToken$2 = Symbol | string | number;
declare enum ContentType$2 {
    Json = "application/json",
    JsonApi = "application/vnd.api+json",
    FormData = "multipart/form-data",
    UrlEncoded = "application/x-www-form-urlencoded",
    Text = "text/plain"
}
declare class HttpClient$2<SecurityDataType = unknown> {
    baseUrl: string;
    private securityData;
    private securityWorker?;
    private abortControllers;
    private customFetch;
    private baseApiParams;
    constructor(apiConfig?: ApiConfig$2<SecurityDataType>);
    setSecurityData: (data: SecurityDataType | null) => void;
    protected encodeQueryParam(key: string, value: any): string;
    protected addQueryParam(query: QueryParamsType$2, key: string): string;
    protected addArrayQueryParam(query: QueryParamsType$2, key: string): any;
    protected toQueryString(rawQuery?: QueryParamsType$2): string;
    protected addQueryParams(rawQuery?: QueryParamsType$2): string;
    private contentFormatters;
    protected mergeRequestParams(params1: RequestParams$3, params2?: RequestParams$3): RequestParams$3;
    protected createAbortSignal: (cancelToken: CancelToken$2) => AbortSignal | undefined;
    abortRequest: (cancelToken: CancelToken$2) => void;
    request: <T = any, E = any>({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }: FullRequestParams$2) => Promise<HttpResponse$2<T, E>>;
}
/**
 * @title Business Service API
 * @version 1 (1)
 * @termsOfService https://rehive.com/terms/
 * @baseUrl https://business.services.rehive.com/api/
 * @externalDocs https://docs.rehive.com
 * @contact Rehive Support <support@rehive.com> (https://rehive.com/support/)
 *
 *
 * The **Business Service API** is used for managing businesses in Rehive.
 *
 */
declare class Api$3<SecurityDataType extends unknown> extends HttpClient$2<SecurityDataType> {
    activate: {
        /**
         * No description
         *
         * @tags activate
         * @name ActivateCreate
         * @summary Activate service
         * @request POST:/activate/
         * @secure
         */
        activateCreate: (data: Activate$3, params?: RequestParams$3) => Promise<HttpResponse$2<ActionResponse$3, any>>;
    };
    admin: {
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessCategoriesList
         * @summary List categories
         * @request GET:/admin/business-categories/
         * @secure
         */
        adminBusinessCategoriesList: (query: AdminBusinessCategoriesListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedAdminBusinessCategoryListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessCategoriesCreate
         * @summary Create category
         * @request POST:/admin/business-categories/
         * @secure
         */
        adminBusinessCategoriesCreate: (data: AdminBusinessCategory, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessCategoryResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessCategoriesRetrieve
         * @summary Retrieve category
         * @request GET:/admin/business-categories/{identifier}/
         * @secure
         */
        adminBusinessCategoriesRetrieve: (identifier: string, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessCategoryResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessCategoriesUpdate
         * @summary Update category
         * @request PUT:/admin/business-categories/{identifier}/
         * @secure
         */
        adminBusinessCategoriesUpdate: (identifier: string, data: AdminBusinessCategory, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessCategoryResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessCategoriesPartialUpdate
         * @summary Partially update category
         * @request PATCH:/admin/business-categories/{identifier}/
         * @secure
         */
        adminBusinessCategoriesPartialUpdate: (identifier: string, data: PatchedAdminBusinessCategory, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessCategoryResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessCategoriesDestroy
         * @summary Delete category
         * @request DELETE:/admin/business-categories/{identifier}/
         * @secure
         */
        adminBusinessCategoriesDestroy: (identifier: string, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessCategoryResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessUsersList
         * @summary List business users
         * @request GET:/admin/business-users/
         * @secure
         */
        adminBusinessUsersList: (query: AdminBusinessUsersListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedAdminBusinessUserListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessUsersCreate
         * @summary Create business user
         * @request POST:/admin/business-users/
         * @secure
         */
        adminBusinessUsersCreate: (data: AdminCreateBusinessUser, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessUserResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessUsersRetrieve
         * @summary Retrieve business user
         * @request GET:/admin/business-users/{user_id}/
         * @secure
         */
        adminBusinessUsersRetrieve: (userId: string, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessUserResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessUsersUpdate
         * @summary Update business user
         * @request PUT:/admin/business-users/{user_id}/
         * @secure
         */
        adminBusinessUsersUpdate: (userId: string, data: AdminUpdateBusinessUser, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessUserResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessUsersPartialUpdate
         * @summary Partially update business user
         * @request PATCH:/admin/business-users/{user_id}/
         * @secure
         */
        adminBusinessUsersPartialUpdate: (userId: string, data: PatchedAdminUpdateBusinessUser, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessUserResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesList
         * @summary List businesses
         * @request GET:/admin/businesses/
         * @secure
         */
        adminBusinessesList: (query: AdminBusinessesListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedAdminBusinessListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesRetrieve
         * @summary Retrieve business
         * @request GET:/admin/businesses/{business_id}/
         * @secure
         */
        adminBusinessesRetrieve: (businessId: string, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesUpdate
         * @summary Update business
         * @request PUT:/admin/businesses/{business_id}/
         * @secure
         */
        adminBusinessesUpdate: (businessId: string, data: AdminUpdateBusiness, params?: RequestParams$3) => Promise<HttpResponse$2<AdminUpdateBusinessResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesPartialUpdate
         * @summary Partially update business
         * @request PATCH:/admin/businesses/{business_id}/
         * @secure
         */
        adminBusinessesPartialUpdate: (businessId: string, data: PatchedAdminUpdateBusiness, params?: RequestParams$3) => Promise<HttpResponse$2<AdminUpdateBusinessResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesCategoriesRetrieve
         * @summary Retrieve business category
         * @request GET:/admin/businesses/{business_id}/categories/{category_id}/
         * @secure
         */
        adminBusinessesCategoriesRetrieve: (businessId: string, categoryId: string, params?: RequestParams$3) => Promise<HttpResponse$2<BusinessCategoryUpdateResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesCategoriesDestroy
         * @summary Delete business category
         * @request DELETE:/admin/businesses/{business_id}/categories/{category_id}/
         * @secure
         */
        adminBusinessesCategoriesDestroy: (businessId: string, categoryId: string, params?: RequestParams$3) => Promise<HttpResponse$2<BusinessCategoryUpdateResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesDocumentsList
         * @summary List business documents
         * @request GET:/admin/businesses/{business_id}/documents/
         * @secure
         */
        adminBusinessesDocumentsList: ({ businessId, ...query }: AdminBusinessesDocumentsListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedAdminBusinessDocumentListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesDocumentsCreate
         * @summary Create business document
         * @request POST:/admin/businesses/{business_id}/documents/
         * @secure
         */
        adminBusinessesDocumentsCreate: (businessId: string, data: AdminCreateBusinessDocument, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessDocumentResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesDocumentsRetrieve
         * @summary Retrieve business document
         * @request GET:/admin/businesses/{business_id}/documents/{document_id}/
         * @secure
         */
        adminBusinessesDocumentsRetrieve: (businessId: string, documentId: string, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessDocumentResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesDocumentsUpdate
         * @summary Update business document
         * @request PUT:/admin/businesses/{business_id}/documents/{document_id}/
         * @secure
         */
        adminBusinessesDocumentsUpdate: (businessId: string, documentId: string, data: AdminBusinessDocument, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessDocumentResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesDocumentsPartialUpdate
         * @summary Partially update business document
         * @request PATCH:/admin/businesses/{business_id}/documents/{document_id}/
         * @secure
         */
        adminBusinessesDocumentsPartialUpdate: (businessId: string, documentId: string, data: PatchedAdminBusinessDocument, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessDocumentResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesDocumentsDestroy
         * @summary Delete business document
         * @request DELETE:/admin/businesses/{business_id}/documents/{document_id}/
         * @secure
         */
        adminBusinessesDocumentsDestroy: (businessId: string, documentId: string, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessDocumentResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesPayoutsList
         * @summary List business payouts
         * @request GET:/admin/businesses/{business_id}/payouts/
         * @secure
         */
        adminBusinessesPayoutsList: ({ businessId, ...query }: AdminBusinessesPayoutsListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedAdminBusinessPayoutListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesPayoutsCreate
         * @summary Create business payout
         * @request POST:/admin/businesses/{business_id}/payouts/
         * @secure
         */
        adminBusinessesPayoutsCreate: (businessId: string, data: AdminCreateBusinessPayout, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessPayoutResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesPayoutsRetrieve
         * @summary Retrieve business payout
         * @request GET:/admin/businesses/{business_id}/payouts/{payout_id}/
         * @secure
         */
        adminBusinessesPayoutsRetrieve: (businessId: string, payoutId: string, params?: RequestParams$3) => Promise<HttpResponse$2<AdminBusinessPayoutResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesPayoutsTransactionsList
         * @summary List business payout transactions
         * @request GET:/admin/businesses/{business_id}/payouts/{payout_id}/transactions/
         * @secure
         */
        adminBusinessesPayoutsTransactionsList: ({ businessId, payoutId, ...query }: AdminBusinessesPayoutsTransactionsListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedAdminBusinessPayoutTransactionListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesCategoriesList
         * @summary List business categories
         * @request GET:/admin/businesses/{identifier}/categories/
         * @secure
         */
        adminBusinessesCategoriesList: ({ identifier, ...query }: AdminBusinessesCategoriesListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedBusinessCategoryListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminBusinessesCategoriesCreate
         * @summary Create business category
         * @request POST:/admin/businesses/{identifier}/categories/
         * @secure
         */
        adminBusinessesCategoriesCreate: (identifier: string, data: BusinsessCategoryCreate, params?: RequestParams$3) => Promise<HttpResponse$2<BusinessCategoriesResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyRetrieve
         * @summary Retrieve company
         * @request GET:/admin/company/
         * @secure
         */
        adminCompanyRetrieve: (params?: RequestParams$3) => Promise<HttpResponse$2<AdminCompanyResponse$3, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyUpdate
         * @summary Update company
         * @request PUT:/admin/company/
         * @secure
         */
        adminCompanyUpdate: (data: AdminUpdateCompany$1, params?: RequestParams$3) => Promise<HttpResponse$2<AdminCompanyResponse$3, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyPartialUpdate
         * @summary Partially update company
         * @request PATCH:/admin/company/
         * @secure
         */
        adminCompanyPartialUpdate: (data: PatchedAdminUpdateCompany$1, params?: RequestParams$3) => Promise<HttpResponse$2<AdminCompanyResponse$3, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCurrenciesList
         * @summary List currencies
         * @request GET:/admin/currencies/
         * @secure
         */
        adminCurrenciesList: (query: AdminCurrenciesListParams$1, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedCurrencyListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCurrenciesRetrieve
         * @summary Retrieve currency
         * @request GET:/admin/currencies/{code}/
         * @secure
         */
        adminCurrenciesRetrieve: (code: string, params?: RequestParams$3) => Promise<HttpResponse$2<CurrencyResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminWebhookCreate
         * @summary Receive Platform webhook
         * @request POST:/admin/webhook/
         * @secure
         */
        adminWebhookCreate: (data: Webhook$2, params?: RequestParams$3) => Promise<HttpResponse$2<ActionResponse$3, any>>;
    };
    customer: {
        /**
         * No description
         *
         * @tags customer
         * @name CustomerBusinessesList
         * @summary List businesses
         * @request GET:/customer/businesses/
         * @secure
         */
        customerBusinessesList: (query: CustomerBusinessesListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedCustomerBusinessListResponse, any>>;
        /**
         * No description
         *
         * @tags customer
         * @name CustomerBusinessesRetrieve
         * @summary Retrieve business
         * @request GET:/customer/businesses/{business_id}/
         * @secure
         */
        customerBusinessesRetrieve: (businessId: string, params?: RequestParams$3) => Promise<HttpResponse$2<CustomerBusinessResponse, any>>;
        /**
         * No description
         *
         * @tags customer
         * @name CustomerEnrollCreate
         * @summary Enroll customer
         * @request POST:/customer/enroll/
         * @secure
         */
        customerEnrollCreate: (data: CustomerEnroll, params?: RequestParams$3) => Promise<HttpResponse$2<CustomerBusinessResponse, any>>;
    };
    deactivate: {
        /**
         * No description
         *
         * @tags deactivate
         * @name DeactivateCreate
         * @summary Deactivate service
         * @request POST:/deactivate/
         * @secure
         */
        deactivateCreate: (data: Deactivate$3, params?: RequestParams$3) => Promise<HttpResponse$2<ActionResponse$3, any>>;
    };
    manager: {
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessCategoriesList
         * @summary List categories
         * @request GET:/manager/business-categories/
         * @secure
         */
        managerBusinessCategoriesList: (query: ManagerBusinessCategoriesListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedBusinessCategoryListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessCategoriesRetrieve
         * @summary Retrieve business category
         * @request GET:/manager/business-categories/{identifier}/
         * @secure
         */
        managerBusinessCategoriesRetrieve: (identifier: string, params?: RequestParams$3) => Promise<HttpResponse$2<BusinessCategoryResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesList
         * @summary List businesses
         * @request GET:/manager/businesses/
         * @secure
         */
        managerBusinessesList: (query: ManagerBusinessesListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedManagerBusinessListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesCreate
         * @summary Create business
         * @request POST:/manager/businesses/
         * @secure
         */
        managerBusinessesCreate: (data: ManagerCreateBusiness, params?: RequestParams$3) => Promise<HttpResponse$2<ManagerBusinessResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesRetrieve
         * @summary Retrieve business
         * @request GET:/manager/businesses/{business_id}/
         * @secure
         */
        managerBusinessesRetrieve: (businessId: string, params?: RequestParams$3) => Promise<HttpResponse$2<ManagerBusinessResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesUpdate
         * @summary Update business
         * @request PUT:/manager/businesses/{business_id}/
         * @secure
         */
        managerBusinessesUpdate: (businessId: string, data: ManagerUpdateBusiness, params?: RequestParams$3) => Promise<HttpResponse$2<ManagerBusinessResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesPartialUpdate
         * @summary Partially update business
         * @request PATCH:/manager/businesses/{business_id}/
         * @secure
         */
        managerBusinessesPartialUpdate: (businessId: string, data: PatchedManagerUpdateBusiness, params?: RequestParams$3) => Promise<HttpResponse$2<ManagerBusinessResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesCategoriesRetrieve
         * @summary Retrieve business category
         * @request GET:/manager/businesses/{business_id}/categories/{category_id}/
         * @secure
         */
        managerBusinessesCategoriesRetrieve: (businessId: string, categoryId: string, params?: RequestParams$3) => Promise<HttpResponse$2<BusinessCategoryUpdateResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesCategoriesDestroy
         * @summary Delete business category
         * @request DELETE:/manager/businesses/{business_id}/categories/{category_id}/
         * @secure
         */
        managerBusinessesCategoriesDestroy: (businessId: string, categoryId: string, params?: RequestParams$3) => Promise<HttpResponse$2<BusinessCategoryUpdateResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesDocumentsList
         * @summary List business documents
         * @request GET:/manager/businesses/{business_id}/documents/
         * @secure
         */
        managerBusinessesDocumentsList: ({ businessId, ...query }: ManagerBusinessesDocumentsListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedManagerBusinessDocumentListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesDocumentsCreate
         * @summary Create business document
         * @request POST:/manager/businesses/{business_id}/documents/
         * @secure
         */
        managerBusinessesDocumentsCreate: (businessId: string, data: ManagerCreateBusinessDocument, params?: RequestParams$3) => Promise<HttpResponse$2<ManagerBusinessDocumentResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesDocumentsRetrieve
         * @summary Retrieve business document
         * @request GET:/manager/businesses/{business_id}/documents/{document_id}/
         * @secure
         */
        managerBusinessesDocumentsRetrieve: (businessId: string, documentId: string, params?: RequestParams$3) => Promise<HttpResponse$2<ManagerBusinessDocumentResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesInvoicesList
         * @summary List business invoices
         * @request GET:/manager/businesses/{business_id}/invoices/
         * @secure
         */
        managerBusinessesInvoicesList: ({ businessId, ...query }: ManagerBusinessesInvoicesListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedManagerBusinessInvoiceListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesInvoicesCreate
         * @summary Create business invoice
         * @request POST:/manager/businesses/{business_id}/invoices/
         * @secure
         */
        managerBusinessesInvoicesCreate: (businessId: string, data: ManagerCreateBusinessInvoice, params?: RequestParams$3) => Promise<HttpResponse$2<ManagerBusinessInvoiceResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesInvoicesRetrieve
         * @summary Retrieve business invoice
         * @request GET:/manager/businesses/{business_id}/invoices/{invoice_id}/
         * @secure
         */
        managerBusinessesInvoicesRetrieve: (businessId: string, invoiceId: string, params?: RequestParams$3) => Promise<HttpResponse$2<ManagerBusinessInvoiceResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesInvoicesUpdate
         * @summary Update business invoice
         * @request PUT:/manager/businesses/{business_id}/invoices/{invoice_id}/
         * @secure
         */
        managerBusinessesInvoicesUpdate: (businessId: string, invoiceId: string, data: ManagerUpdateBusinessInvoice, params?: RequestParams$3) => Promise<HttpResponse$2<ManagerBusinessInvoiceResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesInvoicesPartialUpdate
         * @summary Partially update business invoice
         * @request PATCH:/manager/businesses/{business_id}/invoices/{invoice_id}/
         * @secure
         */
        managerBusinessesInvoicesPartialUpdate: (businessId: string, invoiceId: string, data: PatchedManagerUpdateBusinessInvoice, params?: RequestParams$3) => Promise<HttpResponse$2<ManagerBusinessInvoiceResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesInvoicesLogsList
         * @summary List business invoice logs
         * @request GET:/manager/businesses/{business_id}/invoices/{invoice_id}/logs/
         * @secure
         */
        managerBusinessesInvoicesLogsList: ({ businessId, invoiceId, ...query }: ManagerBusinessesInvoicesLogsListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedManagerBusinessInvoiceLogListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesInvoicesRefundsList
         * @summary List business invoice refunds
         * @request GET:/manager/businesses/{business_id}/invoices/{invoice_id}/refunds/
         * @secure
         */
        managerBusinessesInvoicesRefundsList: ({ businessId, invoiceId, ...query }: ManagerBusinessesInvoicesRefundsListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedManagerBusinessInvoiceRefundListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesInvoicesRefundsCreate
         * @summary Create business invoice refund
         * @request POST:/manager/businesses/{business_id}/invoices/{invoice_id}/refunds/
         * @secure
         */
        managerBusinessesInvoicesRefundsCreate: (businessId: string, invoiceId: string, data: ManagerCreateBusinessInvoiceRefund, params?: RequestParams$3) => Promise<HttpResponse$2<ManagerCreateBusinessInvoiceRefundResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesInvoicesTransactionsList
         * @summary List business invoice transactions
         * @request GET:/manager/businesses/{business_id}/invoices/{invoice_id}/transactions/
         * @secure
         */
        managerBusinessesInvoicesTransactionsList: ({ businessId, invoiceId, ...query }: ManagerBusinessesInvoicesTransactionsListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedManagerBusinessInvoiceTransactionListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesMetricsList
         * @summary List business metrics
         * @request GET:/manager/businesses/{business_id}/metrics/
         * @secure
         */
        managerBusinessesMetricsList: ({ businessId, ...query }: ManagerBusinessesMetricsListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedManagerBusinessMetricListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesMetricsRetrieve
         * @summary Retrieve business metric
         * @request GET:/manager/businesses/{business_id}/metrics/{metric_id}/
         * @secure
         */
        managerBusinessesMetricsRetrieve: (businessId: string, metricId: string, params?: RequestParams$3) => Promise<HttpResponse$2<ManagerBusinessMetricResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesMetricsPointsList
         * @summary List business metric points
         * @request GET:/manager/businesses/{business_id}/metrics/{metric_id}/points/
         * @secure
         */
        managerBusinessesMetricsPointsList: ({ businessId, metricId, ...query }: ManagerBusinessesMetricsPointsListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedManagerBusinessMetricPointListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesPayoutsList
         * @summary List business payouts
         * @request GET:/manager/businesses/{business_id}/payouts/
         * @secure
         */
        managerBusinessesPayoutsList: ({ businessId, ...query }: ManagerBusinessesPayoutsListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedManagerBusinessPayoutListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesPayoutsCreate
         * @summary Create business payout
         * @request POST:/manager/businesses/{business_id}/payouts/
         * @secure
         */
        managerBusinessesPayoutsCreate: (businessId: string, data: ManagerCreateBusinessPayout, params?: RequestParams$3) => Promise<HttpResponse$2<ManagerBusinessPayoutResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesPayoutsRetrieve
         * @summary Retrieve business payout
         * @request GET:/manager/businesses/{business_id}/payouts/{payout_id}/
         * @secure
         */
        managerBusinessesPayoutsRetrieve: (businessId: string, payoutId: string, params?: RequestParams$3) => Promise<HttpResponse$2<ManagerBusinessPayoutResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesPayoutsTransactionsList
         * @summary List business payout transactions
         * @request GET:/manager/businesses/{business_id}/payouts/{payout_id}/transactions/
         * @secure
         */
        managerBusinessesPayoutsTransactionsList: ({ businessId, payoutId, ...query }: ManagerBusinessesPayoutsTransactionsListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedManagerBusinessPayoutTransactionListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesTransactionsList
         * @summary List business transactions
         * @request GET:/manager/businesses/{business_id}/transactions/
         * @secure
         */
        managerBusinessesTransactionsList: ({ businessId, ...query }: ManagerBusinessesTransactionsListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedManagerBusinessTransactionListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesTransactionsRetrieve
         * @summary Retrieve business transaction
         * @request GET:/manager/businesses/{business_id}/transactions/{transaction_id}/
         * @secure
         */
        managerBusinessesTransactionsRetrieve: (businessId: string, transactionId: string, params?: RequestParams$3) => Promise<HttpResponse$2<ManagerBusinessTransactionResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesUsersList
         * @summary List business users
         * @request GET:/manager/businesses/{business_id}/users/
         * @secure
         */
        managerBusinessesUsersList: ({ businessId, ...query }: ManagerBusinessesUsersListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedBusinessUserListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesUsersCreate
         * @summary Create business user
         * @request POST:/manager/businesses/{business_id}/users/
         * @secure
         */
        managerBusinessesUsersCreate: (businessId: string, data: ManagerCreateBusinessUser, params?: RequestParams$3) => Promise<HttpResponse$2<BusinessUserResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesUsersRetrieve
         * @summary Retrieve business user
         * @request GET:/manager/businesses/{business_id}/users/{user_id}/
         * @secure
         */
        managerBusinessesUsersRetrieve: (businessId: string, userId: string, params?: RequestParams$3) => Promise<HttpResponse$2<BusinessUserResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesUsersUpdate
         * @summary Update business user
         * @request PUT:/manager/businesses/{business_id}/users/{user_id}/
         * @secure
         */
        managerBusinessesUsersUpdate: (businessId: string, userId: string, data: ManagerUpdateBusinessUser, params?: RequestParams$3) => Promise<HttpResponse$2<BusinessUserResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesUsersPartialUpdate
         * @summary Partially update business user
         * @request PATCH:/manager/businesses/{business_id}/users/{user_id}/
         * @secure
         */
        managerBusinessesUsersPartialUpdate: (businessId: string, userId: string, data: PatchedManagerUpdateBusinessUser, params?: RequestParams$3) => Promise<HttpResponse$2<BusinessUserResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesCategoriesList
         * @summary List business categories
         * @request GET:/manager/businesses/{identifier}/categories/
         * @secure
         */
        managerBusinessesCategoriesList: ({ identifier, ...query }: ManagerBusinessesCategoriesListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedBusinessCategoryListResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerBusinessesCategoriesCreate
         * @summary Create business category
         * @request POST:/manager/businesses/{identifier}/categories/
         * @secure
         */
        managerBusinessesCategoriesCreate: (identifier: string, data: BusinsessCategoryCreate, params?: RequestParams$3) => Promise<HttpResponse$2<BusinessCategoryResponse, any>>;
        /**
         * No description
         *
         * @tags manager
         * @name ManagerCompanyRetrieve
         * @summary Retrieve company
         * @request GET:/manager/company/
         * @secure
         */
        managerCompanyRetrieve: (params?: RequestParams$3) => Promise<HttpResponse$2<ManagerCompanyResponse, any>>;
    };
    user: {
        /**
         * No description
         *
         * @tags user
         * @name UserBusinessCategoriesList
         * @summary List categories
         * @request GET:/user/business-categories/
         * @secure
         */
        userBusinessCategoriesList: (query: UserBusinessCategoriesListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedBusinessCategoryListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserBusinessCategoriesRetrieve
         * @summary Retrieve category
         * @request GET:/user/business-categories/{identifier}/
         * @secure
         */
        userBusinessCategoriesRetrieve: (identifier: string, params?: RequestParams$3) => Promise<HttpResponse$2<BusinessCategoryResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserBusinessesList
         * @summary List businesses
         * @request GET:/user/businesses/
         * @secure
         */
        userBusinessesList: (query: UserBusinessesListParams, params?: RequestParams$3) => Promise<HttpResponse$2<PaginatedUserBusinessListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserBusinessesRetrieve
         * @summary Retrieve business
         * @request GET:/user/businesses/{identifier}/
         * @secure
         */
        userBusinessesRetrieve: (identifier: string, params?: RequestParams$3) => Promise<HttpResponse$2<UserBusinessResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserCompanyRetrieve
         * @summary Retrieve company
         * @request GET:/user/company/
         * @secure
         */
        userCompanyRetrieve: (params?: RequestParams$3) => Promise<HttpResponse$2<UserCompanyResponse, any>>;
    };
    webhook: {
        /**
         * No description
         *
         * @tags webhook
         * @name WebhookCreate
         * @summary Receive Platform webhook
         * @request POST:/webhook/
         * @secure
         */
        webhookCreate: (data: Webhook$2, params?: RequestParams$3) => Promise<HttpResponse$2<ActionResponse$3, any>>;
    };
}

/** This serializer can be used if only a `status` is required in the response. */
interface ActionResponse$2 {
    /** @default "sucess" */
    status?: string;
}
/**
 * Serialize the activation data, should be a token that represents an admin
 * user.
 */
interface Activate$2 {
    token: string;
    id: string;
    name: string;
    /** @format uuid */
    secret: string;
}
/** Serialize company, update and delete. */
interface AdminCompany$2 {
    id: string;
    /** @format uuid */
    secret: string;
    name: string;
    reminder_intervals?: number[];
}
/** Serialize Company Payment Processors, view, create and update. */
interface AdminCompanyPaymentProcessor {
    id: string;
    active?: boolean;
    /** @maxLength 255 */
    company_base_endpoint: string;
    /** @maxLength 255 */
    company_external_api_key: string;
    payment_processor?: string;
    /** @maxItems 100 */
    currencies?: string[];
    generate_accounts?: boolean;
}
interface AdminCompanyPaymentProcessorResponse {
    /** @example "success" */
    status?: string;
    /** Serialize Company Payment Processors, view, create and update. */
    data?: AdminCompanyPaymentProcessor;
}
interface AdminCompanyResponse$2 {
    /** @example "success" */
    status?: string;
    /** Serialize company, update and delete. */
    data?: AdminCompany$2;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminPaymentProcessor {
    id: string;
    native: boolean;
    /** @maxLength 100 */
    unique_string_name: string;
    /** @maxLength 100 */
    logo?: string | null;
    /** @maxLength 100 */
    name: string;
    /**
     * * `wallet` - Wallet
     * * `crypto` - Crypto
     * * `credit_card` - Credit Card
     * * `redirect` - Redirect
     * * `bank` - Bank
     * * `custom` - Custom
     */
    type: "wallet" | "crypto" | "credit_card" | "redirect" | "bank" | "custom";
    /** @maxLength 255 */
    description: string;
    /** @maxLength 255 */
    selector_description?: string | null;
    /** @maxLength 255 */
    pending_processing_description?: string | null;
    /** @maxLength 255 */
    processing_description?: string | null;
    currencies?: (string | null)[];
    /**
     * @format int64
     * @min -9223372036854776000
     * @max 9223372036854776000
     */
    longest_expiration_time?: number;
    rehive_transaction_identifier?: Record<string, any>;
    /** @maxLength 255 */
    rehive_subtype?: string | null;
    generate_accounts?: boolean;
}
interface AdminPaymentProcessorResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminPaymentProcessor;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminRefund {
    id: string;
    /**
     * @format int64
     * @min -9223372036854776000
     * @max 9223372036854776000
     */
    amount?: number;
    currency: string;
    /**
     * * `pending` - Pending
     * * `processing` - Processing
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "pending" | "processing" | "complete" | "failed";
    /** * `native` - Native */
    type?: "native";
    transaction_collection: string | null;
    /** @maxLength 100 */
    reason?: string | null;
    request: number;
    created?: number;
    updated?: number;
}
interface AdminRefundResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminRefund;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminRequestCreateUpdate {
    id: string;
    /** @format uuid */
    user: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    payer_user?: User$2;
    /** @maxLength 255 */
    request_reference?: string | null;
    request_currency: string;
    /**
     * @format int64
     * @min -9223372036854776000
     * @max 9223372036854776000
     */
    request_amount?: number | null;
    primary_payment_processor?: string;
    /** @maxLength 255 */
    description?: string | null;
    metadata?: Record<string, any>;
    /**
     * * `draft` - Draft
     * * `initiated` - Initiated
     * * `processing` - Processing
     * * `received` - Received
     * * `paid` - Paid
     * * `complete` - Complete
     * * `failed` - Failed
     * * `overpaid` - Overpaid
     * * `cancelled` - Cancelled
     * * `expired` - Expired
     * * `late` - Late
     * * `underpaid` - Underpaid
     */
    status?: "draft" | "initiated" | "processing" | "received" | "paid" | "complete" | "failed" | "overpaid" | "cancelled" | "expired" | "late" | "underpaid";
    expiration_date?: number;
    due_date?: number;
    send_request_on?: number;
    redirect_url: string;
    /** @format email */
    payer_email?: string;
    /** @maxLength 255 */
    account: string;
    send_reminders?: boolean;
    reminder_intervals?: number[];
    /** @maxLength 255 */
    note?: string | null;
    /** @maxLength 255 */
    return_url?: string | null;
    payer_mobile_number?: string;
    payment_processor_quotes?: PaymentProcessorQuote[];
}
interface AdminRequestCreateUpdateResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminRequestCreateUpdate;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUser {
    id: string;
    /** @maxLength 30 */
    base_currency?: string | null;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate_padding?: string | null;
    email: string | null;
    mobile_number: string | null;
    first_name: string | null;
    profile: string | null;
    last_name: string | null;
}
interface AdminUserResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminUser;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminWebhook {
    id: string;
    /** @maxLength 150 */
    secret?: string | null;
    /** @maxLength 150 */
    url: string;
    /**
     * * `service_payment_requests.request.create` - service_payment_requests.request.create
     * * `service_payment_requests.request.update` - service_payment_requests.request.update
     * * `service_payment_requests.quote.create` - Payment Requests Quote Create
     * * `service_payment_requests.otp.create` - service_payment_requests.otp.create
     * * `service_payment_requests.payer_reminder` - Payment Requests Payer Reminder
     * * `service_payment_requests.payer_requested` - Payment Requests Request Payer Requested
     */
    event: "service_payment_requests.request.create" | "service_payment_requests.request.update" | "service_payment_requests.quote.create" | "service_payment_requests.otp.create" | "service_payment_requests.payer_reminder" | "service_payment_requests.payer_requested";
}
interface AdminWebhookResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminWebhook;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AvailablePaymentProcessor {
    id: string;
    native: boolean;
    unique_string_name: string;
    logo: string | null;
    name: string;
    description: string;
    selector_description: string | null;
    pending_processing_description: string | null;
    processing_description: string | null;
    currencies: (string | null)[];
    /**
     * * `wallet` - Wallet
     * * `crypto` - Crypto
     * * `credit_card` - Credit Card
     * * `redirect` - Redirect
     * * `bank` - Bank
     * * `custom` - Custom
     */
    type: "wallet" | "crypto" | "credit_card" | "redirect" | "bank" | "custom";
    longest_expiration_time: number;
    rehive_transaction_identifier: Record<string, any>;
    rehive_subtype: string | null;
    active_weight: number;
    generate_accounts: boolean;
    selectable_currencies: string[];
    weight: number;
}
/** Serialize company, update and delete. */
interface CompanyConfiguration {
    /** @maxLength 100 */
    base_redirect_url?: string | null;
    otp_notification_id: string | null;
    request_notification_id: string | null;
    reminder_default?: boolean;
    /** @maxLength 50 */
    request_param_config?: string | null;
}
interface CompanyConfigurationResponse {
    /** @example "success" */
    status?: string;
    /** Serialize company, update and delete. */
    data?: CompanyConfiguration;
}
/** Serialize Company Payment Processor, view, create and update. */
interface CompanyPaymentProcessor {
    id: string;
    active: boolean;
    payment_processor: PaymentProcessor;
    currencies: Currency$1[];
}
interface CompanyPaymentProcessorResponse {
    /** @example "success" */
    status?: string;
    /** Serialize Company Payment Processor, view, create and update. */
    data?: CompanyPaymentProcessor;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface ConversionQuote {
    /**
     * * `quoted` - Quoted
     * * `pending` - Pending
     * * `complete` - Complete
     * * `failed` - Failed
     * * `cancelled` - Cancelled
     */
    status: "quoted" | "pending" | "complete" | "failed" | "cancelled";
    conversion_quote_id: string;
    rate: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface CreateRefund {
    id: string;
    /**
     * @format int64
     * @min -9223372036854776000
     * @max 9223372036854776000
     */
    amount?: number;
    currency: string;
    /**
     * * `pending` - Pending
     * * `processing` - Processing
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "pending" | "processing" | "complete" | "failed";
    /** * `native` - Native */
    type?: "native";
    transaction_collection: string | null;
    /** @maxLength 100 */
    reason?: string | null;
    request: number;
    created?: number;
    updated?: number;
}
interface CreateRefundResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: CreateRefund;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Currency$1 {
    /** @maxLength 30 */
    code: string;
    /** @maxLength 30 */
    display_code?: string | null;
    /** @maxLength 255 */
    description?: string | null;
    /** @maxLength 30 */
    symbol?: string | null;
    /** @maxLength 30 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
}
/**
 * Serialize the deactivation data, should be a token that represents an admin
 * user.
 */
interface Deactivate$2 {
    token: string;
    /** @default false */
    purge?: boolean;
}
interface OTPChallenge {
    otp: string;
}
interface PaginatedAdminUserList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminUser[];
}
interface PaginatedAdminUserListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminUserList;
}
interface PaginatedAdminWebhookList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminWebhook[];
}
interface PaginatedAdminWebhookListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminWebhookList;
}
interface PaginatedCompanyPaymentProcessorList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: CompanyPaymentProcessor[];
}
interface PaginatedCompanyPaymentProcessorListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedCompanyPaymentProcessorList;
}
interface PaginatedPaymentProcessorList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: PaymentProcessor[];
}
interface PaginatedPaymentProcessorListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedPaymentProcessorList;
}
interface PaginatedPaymentProcessorQuoteList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: PaymentProcessorQuote[];
}
interface PaginatedPaymentProcessorQuoteListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedPaymentProcessorQuoteList;
}
interface PaginatedRefundList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Refund[];
}
interface PaginatedRefundListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedRefundList;
}
interface PaginatedRequestList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Request[];
}
interface PaginatedRequestListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedRequestList;
}
interface PaginatedRequestLogsList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: RequestLogs[];
}
interface PaginatedRequestLogsListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedRequestLogsList;
}
interface PaginatedRequestTransactionList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: RequestTransaction[];
}
interface PaginatedRequestTransactionListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedRequestTransactionList;
}
interface PaginatedUserCompanyPaymentProcessorList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: UserCompanyPaymentProcessor[];
}
interface PaginatedUserCompanyPaymentProcessorListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedUserCompanyPaymentProcessorList;
}
interface PaginatedWebhookList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Webhook$1[];
}
interface PaginatedWebhookListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedWebhookList;
}
/** Serialize company, update and delete. */
interface PatchedAdminCompany$1 {
    id?: string;
    /** @format uuid */
    secret?: string;
    name?: string;
    reminder_intervals?: number[];
}
/** Serialize Company Payment Processors, view, create and update. */
interface PatchedAdminCompanyPaymentProcessor {
    id?: string;
    active?: boolean;
    /** @maxLength 255 */
    company_base_endpoint?: string;
    /** @maxLength 255 */
    company_external_api_key?: string;
    payment_processor?: string;
    /** @maxItems 100 */
    currencies?: string[];
    generate_accounts?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminPaymentProcessor {
    id?: string;
    native?: boolean;
    /** @maxLength 100 */
    unique_string_name?: string;
    /** @maxLength 100 */
    logo?: string | null;
    /** @maxLength 100 */
    name?: string;
    /**
     * * `wallet` - Wallet
     * * `crypto` - Crypto
     * * `credit_card` - Credit Card
     * * `redirect` - Redirect
     * * `bank` - Bank
     * * `custom` - Custom
     */
    type?: "wallet" | "crypto" | "credit_card" | "redirect" | "bank" | "custom";
    /** @maxLength 255 */
    description?: string;
    /** @maxLength 255 */
    selector_description?: string | null;
    /** @maxLength 255 */
    pending_processing_description?: string | null;
    /** @maxLength 255 */
    processing_description?: string | null;
    currencies?: (string | null)[];
    /**
     * @format int64
     * @min -9223372036854776000
     * @max 9223372036854776000
     */
    longest_expiration_time?: number;
    rehive_transaction_identifier?: Record<string, any>;
    /** @maxLength 255 */
    rehive_subtype?: string | null;
    generate_accounts?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminRequestCreateUpdate {
    id?: string;
    /** @format uuid */
    user?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    payer_user?: User$2;
    /** @maxLength 255 */
    request_reference?: string | null;
    request_currency?: string;
    /**
     * @format int64
     * @min -9223372036854776000
     * @max 9223372036854776000
     */
    request_amount?: number | null;
    primary_payment_processor?: string;
    /** @maxLength 255 */
    description?: string | null;
    metadata?: Record<string, any>;
    /**
     * * `draft` - Draft
     * * `initiated` - Initiated
     * * `processing` - Processing
     * * `received` - Received
     * * `paid` - Paid
     * * `complete` - Complete
     * * `failed` - Failed
     * * `overpaid` - Overpaid
     * * `cancelled` - Cancelled
     * * `expired` - Expired
     * * `late` - Late
     * * `underpaid` - Underpaid
     */
    status?: "draft" | "initiated" | "processing" | "received" | "paid" | "complete" | "failed" | "overpaid" | "cancelled" | "expired" | "late" | "underpaid";
    expiration_date?: number;
    due_date?: number;
    send_request_on?: number;
    redirect_url?: string;
    /** @format email */
    payer_email?: string;
    /** @maxLength 255 */
    account?: string;
    send_reminders?: boolean;
    reminder_intervals?: number[];
    /** @maxLength 255 */
    note?: string | null;
    /** @maxLength 255 */
    return_url?: string | null;
    payer_mobile_number?: string;
    payment_processor_quotes?: PaymentProcessorQuote[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUser {
    id?: string;
    /** @maxLength 30 */
    base_currency?: string | null;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    rate_padding?: string | null;
    email?: string | null;
    mobile_number?: string | null;
    first_name?: string | null;
    profile?: string | null;
    last_name?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminWebhook {
    id?: string;
    /** @maxLength 150 */
    secret?: string | null;
    /** @maxLength 150 */
    url?: string;
    /**
     * * `service_payment_requests.request.create` - service_payment_requests.request.create
     * * `service_payment_requests.request.update` - service_payment_requests.request.update
     * * `service_payment_requests.quote.create` - Payment Requests Quote Create
     * * `service_payment_requests.otp.create` - service_payment_requests.otp.create
     * * `service_payment_requests.payer_reminder` - Payment Requests Payer Reminder
     * * `service_payment_requests.payer_requested` - Payment Requests Request Payer Requested
     */
    event?: "service_payment_requests.request.create" | "service_payment_requests.request.update" | "service_payment_requests.quote.create" | "service_payment_requests.otp.create" | "service_payment_requests.payer_reminder" | "service_payment_requests.payer_requested";
}
/** Serialize company, update and delete. */
interface PatchedCompanyConfiguration {
    /** @maxLength 100 */
    base_redirect_url?: string | null;
    otp_notification_id?: string | null;
    request_notification_id?: string | null;
    reminder_default?: boolean;
    /** @maxLength 50 */
    request_param_config?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedPublicRequestUpdate {
    id?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    user?: User$2;
    request_reference?: string | null;
    request_currency?: Record<string, any>;
    request_amount?: number | null;
    primary_payment_processor?: string;
    description?: string | null;
    metadata?: Record<string, any>;
    /**
     * * `draft` - Draft
     * * `initiated` - Initiated
     * * `processing` - Processing
     * * `received` - Received
     * * `paid` - Paid
     * * `complete` - Complete
     * * `failed` - Failed
     * * `overpaid` - Overpaid
     * * `cancelled` - Cancelled
     * * `expired` - Expired
     * * `late` - Late
     * * `underpaid` - Underpaid
     */
    status?: "draft" | "initiated" | "processing" | "received" | "paid" | "complete" | "failed" | "overpaid" | "cancelled" | "expired" | "late" | "underpaid";
    redirect_url?: string;
    account?: string;
    /** @format email */
    payer_email?: string;
    return_url?: string | null;
    payer_mobile_number?: string;
    refunded?: boolean;
    payment_processor_quotes?: PaymentProcessorQuote[];
    payment_processor_currency?: string;
    available_payment_processors?: AvailablePaymentProcessor[];
    quote_amount?: string;
    /** @maxLength 255 */
    note?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedRequestCreateUpdate {
    id?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    user?: User$2;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    payer_user?: User$2;
    /** @maxLength 255 */
    request_reference?: string | null;
    request_currency?: string;
    /**
     * @format int64
     * @min -9223372036854776000
     * @max 9223372036854776000
     */
    request_amount?: number | null;
    primary_payment_processor?: string;
    /** @maxLength 255 */
    description?: string | null;
    metadata?: Record<string, any>;
    /**
     * * `draft` - Draft
     * * `initiated` - Initiated
     * * `processing` - Processing
     * * `received` - Received
     * * `paid` - Paid
     * * `complete` - Complete
     * * `failed` - Failed
     * * `overpaid` - Overpaid
     * * `cancelled` - Cancelled
     * * `expired` - Expired
     * * `late` - Late
     * * `underpaid` - Underpaid
     */
    status?: "draft" | "initiated" | "processing" | "received" | "paid" | "complete" | "failed" | "overpaid" | "cancelled" | "expired" | "late" | "underpaid";
    expiration_date?: number;
    due_date?: number;
    send_request_on?: number;
    redirect_url?: string;
    /** @maxLength 255 */
    account?: string;
    send_reminders?: boolean;
    reminder_intervals?: number[];
    /** @maxLength 255 */
    note?: string | null;
    /** @format email */
    payer_email?: string;
    /** @maxLength 255 */
    return_url?: string | null;
    payer_mobile_number?: string;
    payment_processor_quotes?: PaymentProcessorQuote[];
}
/** Serialize Company Payment Processors, view, create and update. */
interface PatchedUserCRUDCompanyPaymentProcessor {
    id?: string;
    active?: boolean;
    company_payment_processor?: number;
    /** @maxItems 100 */
    currencies?: string[];
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedWebhook {
    id?: string;
    /** @maxLength 150 */
    secret?: string | null;
    /** @maxLength 150 */
    url?: string;
    /**
     * * `service_payment_requests.request.create` - service_payment_requests.request.create
     * * `service_payment_requests.request.update` - service_payment_requests.request.update
     * * `service_payment_requests.quote.create` - Payment Requests Quote Create
     * * `service_payment_requests.otp.create` - service_payment_requests.otp.create
     * * `service_payment_requests.payer_reminder` - Payment Requests Payer Reminder
     * * `service_payment_requests.payer_requested` - Payment Requests Request Payer Requested
     */
    event?: "service_payment_requests.request.create" | "service_payment_requests.request.update" | "service_payment_requests.quote.create" | "service_payment_requests.otp.create" | "service_payment_requests.payer_reminder" | "service_payment_requests.payer_requested";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PaymentProcessor {
    id: string;
    native: boolean;
    unique_string_name: string;
    logo: string | null;
    name: string;
    description: string;
    selector_description: string | null;
    pending_processing_description: string | null;
    processing_description: string | null;
    currencies: (string | null)[];
    /**
     * * `wallet` - Wallet
     * * `crypto` - Crypto
     * * `credit_card` - Credit Card
     * * `redirect` - Redirect
     * * `bank` - Bank
     * * `custom` - Custom
     */
    type: "wallet" | "crypto" | "credit_card" | "redirect" | "bank" | "custom";
    longest_expiration_time: number;
    rehive_transaction_identifier: Record<string, any>;
    rehive_subtype: string | null;
    active_weight: number;
    generate_accounts: boolean;
    weight: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PaymentProcessorQuote {
    id: string;
    request: number;
    reference: string | null;
    deposit_details: Record<string, any>;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    payment_processor?: PaymentProcessor;
    currency: Record<string, any>;
    amount: number;
    total_paid: number;
    total_pending: number;
    expiration_date?: number;
    /**
     * * `pending` - Pending
     * * `processing` - Processing
     * * `received` - Received
     * * `overpaid` - Overpaid
     * * `paid` - Paid
     * * `failed` - Failed
     * * `expired` - Expired
     * * `late` - Late
     * * `underpaid` - Underpaid
     */
    status: "pending" | "processing" | "received" | "overpaid" | "paid" | "failed" | "expired" | "late" | "underpaid";
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    conversion_quote?: ConversionQuote;
    created?: number;
    account: string | null;
    updated?: number;
}
interface PaymentProcessorQuoteResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: PaymentProcessorQuote;
}
interface PaymentProcessorResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: PaymentProcessor;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PublicRequest {
    id: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    user?: User$2;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    payer_user?: User$2;
    request_reference: string | null;
    request_currency: Record<string, any>;
    request_amount: number | null;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    primary_payment_processor?: PaymentProcessor;
    description: string | null;
    metadata: Record<string, any>;
    /**
     * * `draft` - Draft
     * * `initiated` - Initiated
     * * `processing` - Processing
     * * `received` - Received
     * * `paid` - Paid
     * * `complete` - Complete
     * * `failed` - Failed
     * * `overpaid` - Overpaid
     * * `cancelled` - Cancelled
     * * `expired` - Expired
     * * `late` - Late
     * * `underpaid` - Underpaid
     */
    status: "draft" | "initiated" | "processing" | "received" | "paid" | "complete" | "failed" | "overpaid" | "cancelled" | "expired" | "late" | "underpaid";
    account: string;
    redirect_url: string;
    /** @format email */
    payer_email?: string;
    payer_mobile_number: string;
    return_url: string | null;
    payment_processor_quotes?: PaymentProcessorQuote[];
    available_payment_processors?: AvailablePaymentProcessor[];
    expiration_date?: number;
    /** @maxLength 255 */
    note?: string | null;
    refunded: boolean;
    due_date?: number;
    created?: number;
    updated?: number;
}
interface PublicRequestResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: PublicRequest;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Refund {
    id: string;
    /**
     * @format int64
     * @min -9223372036854776000
     * @max 9223372036854776000
     */
    amount?: number;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    currency: Currency$1;
    /**
     * * `pending` - Pending
     * * `processing` - Processing
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "pending" | "processing" | "complete" | "failed";
    /** * `native` - Native */
    type?: "native";
    transaction_collection: string | null;
    /** @maxLength 100 */
    reason?: string | null;
    request: number;
    created?: number;
    updated?: number;
}
interface RehiveWebhook {
    id: string;
    /**
     * * `currency.create` - currency.create
     * * `currency.update` - currency.update
     * * `transaction.initiate` - transaction.initiate
     * * `transaction.execute` - transaction.execute
     * * `user.create` - user.create
     * * `user.update` - user.update
     */
    event: "currency.create" | "currency.update" | "transaction.initiate" | "transaction.execute" | "user.create" | "user.update";
    company: string;
    data: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Request {
    id: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    user?: User$2;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    payer_user?: User$2;
    payer_email: string;
    payer_mobile_number: string;
    /** @maxLength 255 */
    request_reference?: string | null;
    request_currency: Record<string, any>;
    /**
     * @format int64
     * @min -9223372036854776000
     * @max 9223372036854776000
     */
    request_amount?: number | null;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    primary_payment_processor?: PaymentProcessor;
    /** @maxLength 255 */
    description?: string | null;
    metadata?: Record<string, any>;
    /**
     * * `draft` - Draft
     * * `initiated` - Initiated
     * * `processing` - Processing
     * * `received` - Received
     * * `paid` - Paid
     * * `complete` - Complete
     * * `failed` - Failed
     * * `overpaid` - Overpaid
     * * `cancelled` - Cancelled
     * * `expired` - Expired
     * * `late` - Late
     * * `underpaid` - Underpaid
     */
    status: "draft" | "initiated" | "processing" | "received" | "paid" | "complete" | "failed" | "overpaid" | "cancelled" | "expired" | "late" | "underpaid";
    expiration_date?: number;
    due_date?: number;
    redirect_url: string;
    payment_processor_quotes?: PaymentProcessorQuote[];
    refunds?: Refund[];
    /** @maxLength 255 */
    return_url?: string | null;
    send_request_on?: number;
    /** @maxLength 255 */
    account: string;
    send_reminders?: boolean;
    reminder_intervals?: number[];
    /** @maxLength 255 */
    note?: string | null;
    refunded: boolean;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface RequestCreateUpdate {
    id: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    user?: User$2;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    payer_user?: User$2;
    /** @maxLength 255 */
    request_reference?: string | null;
    request_currency: string;
    /**
     * @format int64
     * @min -9223372036854776000
     * @max 9223372036854776000
     */
    request_amount?: number | null;
    primary_payment_processor?: string;
    /** @maxLength 255 */
    description?: string | null;
    metadata?: Record<string, any>;
    /**
     * * `draft` - Draft
     * * `initiated` - Initiated
     * * `processing` - Processing
     * * `received` - Received
     * * `paid` - Paid
     * * `complete` - Complete
     * * `failed` - Failed
     * * `overpaid` - Overpaid
     * * `cancelled` - Cancelled
     * * `expired` - Expired
     * * `late` - Late
     * * `underpaid` - Underpaid
     */
    status?: "draft" | "initiated" | "processing" | "received" | "paid" | "complete" | "failed" | "overpaid" | "cancelled" | "expired" | "late" | "underpaid";
    expiration_date?: number;
    due_date?: number;
    send_request_on?: number;
    redirect_url: string;
    /** @maxLength 255 */
    account: string;
    send_reminders?: boolean;
    reminder_intervals?: number[];
    /** @maxLength 255 */
    note?: string | null;
    /** @format email */
    payer_email?: string;
    /** @maxLength 255 */
    return_url?: string | null;
    payer_mobile_number?: string;
    payment_processor_quotes?: PaymentProcessorQuote[];
}
interface RequestCreateUpdateResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: RequestCreateUpdate;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface RequestLogs {
    request: number;
    user_agent: string | null;
    ip_address: string | null;
    email: string | null;
    mobile_number: string | null;
}
interface RequestResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Request;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface RequestTransaction {
    rehive_code: string;
    /**
     * * `pending` - Pending
     * * `pending_settled` - Pending Settled
     * * `settled` - Settled
     * * `complete` - Complete
     * * `failed` - Failed
     */
    status: "pending" | "pending_settled" | "settled" | "complete" | "failed";
    payment_processor_quote: number;
    details: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface User$2 {
    id: string;
    /** @maxLength 30 */
    base_currency?: string | null;
    company: string;
    mobile_number: string | null;
    email: string | null;
    first_name: string | null;
    profile: string | null;
    last_name: string | null;
}
/** Serialize Company Payment Processors, view, create and update. */
interface UserCRUDCompanyPaymentProcessor {
    id: string;
    active?: boolean;
    company_payment_processor: number;
    /** @maxItems 100 */
    currencies?: string[];
}
interface UserCRUDCompanyPaymentProcessorResponse {
    /** @example "success" */
    status?: string;
    /** Serialize Company Payment Processors, view, create and update. */
    data?: UserCRUDCompanyPaymentProcessor;
}
/** Serialize Company Payment Processors, view, create and update. */
interface UserCompanyPaymentProcessor {
    id: string;
    active: boolean;
    /** Serialize Company Payment Processor, view, create and update. */
    company_payment_processor: CompanyPaymentProcessor;
    currencies: Currency$1[];
}
interface UserCompanyPaymentProcessorResponse {
    /** @example "success" */
    status?: string;
    /** Serialize Company Payment Processors, view, create and update. */
    data?: UserCompanyPaymentProcessor;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Webhook$1 {
    id: string;
    /** @maxLength 150 */
    secret?: string | null;
    /** @maxLength 150 */
    url: string;
    /**
     * * `service_payment_requests.request.create` - service_payment_requests.request.create
     * * `service_payment_requests.request.update` - service_payment_requests.request.update
     * * `service_payment_requests.quote.create` - Payment Requests Quote Create
     * * `service_payment_requests.otp.create` - service_payment_requests.otp.create
     * * `service_payment_requests.payer_reminder` - Payment Requests Payer Reminder
     * * `service_payment_requests.payer_requested` - Payment Requests Request Payer Requested
     */
    event: "service_payment_requests.request.create" | "service_payment_requests.request.update" | "service_payment_requests.quote.create" | "service_payment_requests.otp.create" | "service_payment_requests.payer_reminder" | "service_payment_requests.payer_requested";
}
interface WebhookResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Webhook$1;
}
interface AdminCompanyPaymentProcessorsListParams {
    /** @format date-time */
    created?: string;
    /** @format date-time */
    created__gt?: string;
    /** @format date-time */
    created__gte?: string;
    /** @format date-time */
    created__lt?: string;
    /** @format date-time */
    created__lte?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    unique_string_name?: string;
}
interface AdminPaymentProcessorQuoteListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminPaymentProcessorsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminRequestsListParams {
    /** @format date-time */
    created?: string;
    created__gt?: string;
    created__gte?: string;
    created__lt?: string;
    created__lte?: string;
    expiration_date__gt?: string;
    expiration_date__gte?: string;
    expiration_date__lt?: string;
    expiration_date__lte?: string;
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    payer_email?: string;
    payer_mobile_number?: string;
    payment_processor_quote_reference?: string;
    refund_status?: string;
    refunded?: string;
    request_currency?: string;
    request_reference?: string;
    request_type?: string;
    status?: string;
    status__in?: string;
}
interface AdminRequestsLogsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    identifier: string;
}
interface AdminRequestsPaymentProcessQuotesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    identifier: string;
}
interface AdminRequestsRefundsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    identifier: string;
}
interface AdminRequestsTransactionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    identifier: string;
}
interface AdminUsersListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminWebhooksListParams {
    event?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    secret?: string;
    url?: string;
}
interface RequestsPaymentProcessorsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    identifier: string;
}
interface RequestsTransactionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    identifier: string;
}
interface UserPaymentProcessorsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface UserRequestsListParams {
    /** @format date-time */
    created?: string;
    created__gt?: string;
    created__gte?: string;
    created__lt?: string;
    created__lte?: string;
    expiration_date__gt?: string;
    expiration_date__gte?: string;
    expiration_date__lt?: string;
    expiration_date__lte?: string;
    id?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    payer_email?: string;
    payer_mobile_number?: string;
    payment_processor_quote_reference?: string;
    refund_status?: string;
    refunded?: string;
    request_currency?: string;
    request_reference?: string;
    request_type?: string;
    status?: string;
    status__in?: string;
}
interface UserRequestsRefundsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    identifier: string;
}
interface UserRequestsTransactionsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    identifier: string;
}
interface UserWebhooksListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
type QueryParamsType$1 = Record<string | number, any>;
type ResponseFormat$1 = keyof Omit<Body, "body" | "bodyUsed">;
interface FullRequestParams$1 extends Omit<RequestInit, "body"> {
    /** set parameter to `true` for call `securityWorker` for this request */
    secure?: boolean;
    /** request path */
    path: string;
    /** content type of request body */
    type?: ContentType$1;
    /** query params */
    query?: QueryParamsType$1;
    /** format of response (i.e. response.json() -> format: "json") */
    format?: ResponseFormat$1;
    /** request body */
    body?: unknown;
    /** base url */
    baseUrl?: string;
    /** request cancellation token */
    cancelToken?: CancelToken$1;
}
type RequestParams$2 = Omit<FullRequestParams$1, "body" | "method" | "query" | "path">;
interface ApiConfig$1<SecurityDataType = unknown> {
    baseUrl?: string;
    baseApiParams?: Omit<RequestParams$2, "baseUrl" | "cancelToken" | "signal">;
    securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams$2 | void> | RequestParams$2 | void;
    customFetch?: typeof fetch;
}
interface HttpResponse$1<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}
type CancelToken$1 = Symbol | string | number;
declare enum ContentType$1 {
    Json = "application/json",
    JsonApi = "application/vnd.api+json",
    FormData = "multipart/form-data",
    UrlEncoded = "application/x-www-form-urlencoded",
    Text = "text/plain"
}
declare class HttpClient$1<SecurityDataType = unknown> {
    baseUrl: string;
    private securityData;
    private securityWorker?;
    private abortControllers;
    private customFetch;
    private baseApiParams;
    constructor(apiConfig?: ApiConfig$1<SecurityDataType>);
    setSecurityData: (data: SecurityDataType | null) => void;
    protected encodeQueryParam(key: string, value: any): string;
    protected addQueryParam(query: QueryParamsType$1, key: string): string;
    protected addArrayQueryParam(query: QueryParamsType$1, key: string): any;
    protected toQueryString(rawQuery?: QueryParamsType$1): string;
    protected addQueryParams(rawQuery?: QueryParamsType$1): string;
    private contentFormatters;
    protected mergeRequestParams(params1: RequestParams$2, params2?: RequestParams$2): RequestParams$2;
    protected createAbortSignal: (cancelToken: CancelToken$1) => AbortSignal | undefined;
    abortRequest: (cancelToken: CancelToken$1) => void;
    request: <T = any, E = any>({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }: FullRequestParams$1) => Promise<HttpResponse$1<T, E>>;
}
/**
 * @title Payment Request Service API
 * @version 1 (1)
 * @termsOfService https://rehive.com/terms/
 * @baseUrl https://payment-requests.services.rehive.com/api/
 * @externalDocs https://docs.rehive.com
 * @contact Rehive Support <support@rehive.com> (https://rehive.com/support/)
 *
 *
 * The **Payment Request Service API** is used for payments, payment requests, and invoices in Rehive.
 *
 */
declare class Api$2<SecurityDataType extends unknown> extends HttpClient$1<SecurityDataType> {
    activate: {
        /**
         * No description
         *
         * @tags activate
         * @name ActivateCreate
         * @summary Activate service
         * @request POST:/activate/
         * @secure
         */
        activateCreate: (data: Activate$2, params?: RequestParams$2) => Promise<HttpResponse$1<ActionResponse$2, any>>;
    };
    admin: {
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyRetrieve
         * @summary Retrieve company
         * @request GET:/admin/company/
         * @secure
         */
        adminCompanyRetrieve: (params?: RequestParams$2) => Promise<HttpResponse$1<AdminCompanyResponse$2, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyUpdate
         * @summary Update company
         * @request PUT:/admin/company/
         * @secure
         */
        adminCompanyUpdate: (data: AdminCompany$2, params?: RequestParams$2) => Promise<HttpResponse$1<AdminCompanyResponse$2, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyPartialUpdate
         * @summary Partially update company
         * @request PATCH:/admin/company/
         * @secure
         */
        adminCompanyPartialUpdate: (data: PatchedAdminCompany$1, params?: RequestParams$2) => Promise<HttpResponse$1<AdminCompanyResponse$2, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyConfigurationRetrieve
         * @summary Retrieve configuration
         * @request GET:/admin/company/configuration/
         * @secure
         */
        adminCompanyConfigurationRetrieve: (params?: RequestParams$2) => Promise<HttpResponse$1<CompanyConfigurationResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyConfigurationUpdate
         * @summary Update configuration
         * @request PUT:/admin/company/configuration/
         * @secure
         */
        adminCompanyConfigurationUpdate: (data: CompanyConfiguration, params?: RequestParams$2) => Promise<HttpResponse$1<CompanyConfigurationResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyConfigurationPartialUpdate
         * @summary Partially update configuration
         * @request PATCH:/admin/company/configuration/
         * @secure
         */
        adminCompanyConfigurationPartialUpdate: (data: PatchedCompanyConfiguration, params?: RequestParams$2) => Promise<HttpResponse$1<CompanyConfigurationResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyPaymentProcessorsList
         * @summary List company payment processors
         * @request GET:/admin/company_payment_processors/
         * @secure
         */
        adminCompanyPaymentProcessorsList: (query: AdminCompanyPaymentProcessorsListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedCompanyPaymentProcessorListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyPaymentProcessorsCreate
         * @summary Create company payment processor
         * @request POST:/admin/company_payment_processors/
         * @secure
         */
        adminCompanyPaymentProcessorsCreate: (data: AdminCompanyPaymentProcessor, params?: RequestParams$2) => Promise<HttpResponse$1<CompanyPaymentProcessorResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyPaymentProcessorsRetrieve
         * @summary Retrieve company payment processor
         * @request GET:/admin/company_payment_processors/{identifier}/
         * @secure
         */
        adminCompanyPaymentProcessorsRetrieve: (identifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<CompanyPaymentProcessorResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyPaymentProcessorsUpdate
         * @summary Update company payment processor
         * @request PUT:/admin/company_payment_processors/{identifier}/
         * @secure
         */
        adminCompanyPaymentProcessorsUpdate: (identifier: string, data: AdminCompanyPaymentProcessor, params?: RequestParams$2) => Promise<HttpResponse$1<AdminCompanyPaymentProcessorResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyPaymentProcessorsPartialUpdate
         * @summary Partially update company payment processor
         * @request PATCH:/admin/company_payment_processors/{identifier}/
         * @secure
         */
        adminCompanyPaymentProcessorsPartialUpdate: (identifier: string, data: PatchedAdminCompanyPaymentProcessor, params?: RequestParams$2) => Promise<HttpResponse$1<AdminCompanyPaymentProcessorResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyPaymentProcessorsDestroy
         * @summary Delete company payment processor
         * @request DELETE:/admin/company_payment_processors/{identifier}/
         * @secure
         */
        adminCompanyPaymentProcessorsDestroy: (identifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<AdminCompanyPaymentProcessorResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminPaymentProcessorQuoteList
         * @summary List payment processor quotes
         * @request GET:/admin/payment_processor_quote/
         * @secure
         */
        adminPaymentProcessorQuoteList: (query: AdminPaymentProcessorQuoteListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedPaymentProcessorQuoteListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminPaymentProcessorsList
         * @summary List payment processors
         * @request GET:/admin/payment_processors/
         * @secure
         */
        adminPaymentProcessorsList: (query: AdminPaymentProcessorsListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedPaymentProcessorListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminPaymentProcessorsCreate
         * @summary Create payment processor
         * @request POST:/admin/payment_processors/
         * @secure
         */
        adminPaymentProcessorsCreate: (data: AdminPaymentProcessor, params?: RequestParams$2) => Promise<HttpResponse$1<PaymentProcessorResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminPaymentProcessorsRetrieve
         * @summary Retrieve payment processor
         * @request GET:/admin/payment_processors/{identifier}/
         * @secure
         */
        adminPaymentProcessorsRetrieve: (identifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<PaymentProcessorResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminPaymentProcessorsUpdate
         * @summary Update payment processor
         * @request PUT:/admin/payment_processors/{identifier}/
         * @secure
         */
        adminPaymentProcessorsUpdate: (identifier: string, data: AdminPaymentProcessor, params?: RequestParams$2) => Promise<HttpResponse$1<AdminPaymentProcessorResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminPaymentProcessorsPartialUpdate
         * @summary Partially update payment processor
         * @request PATCH:/admin/payment_processors/{identifier}/
         * @secure
         */
        adminPaymentProcessorsPartialUpdate: (identifier: string, data: PatchedAdminPaymentProcessor, params?: RequestParams$2) => Promise<HttpResponse$1<AdminPaymentProcessorResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminPaymentProcessorsDestroy
         * @summary Delete payment processor
         * @request DELETE:/admin/payment_processors/{identifier}/
         * @secure
         */
        adminPaymentProcessorsDestroy: (identifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<AdminPaymentProcessorResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRequestsList
         * @summary List requests
         * @request GET:/admin/requests/
         * @secure
         */
        adminRequestsList: (query: AdminRequestsListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedRequestListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRequestsCreate
         * @summary Create request
         * @request POST:/admin/requests/
         * @secure
         */
        adminRequestsCreate: (data: AdminRequestCreateUpdate, params?: RequestParams$2) => Promise<HttpResponse$1<RequestResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRequestsRetrieve
         * @summary Retrieve request
         * @request GET:/admin/requests/{identifier}/
         * @secure
         */
        adminRequestsRetrieve: (identifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<RequestResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRequestsUpdate
         * @summary Update request
         * @request PUT:/admin/requests/{identifier}/
         * @secure
         */
        adminRequestsUpdate: (identifier: string, data: Request, params?: RequestParams$2) => Promise<HttpResponse$1<RequestResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRequestsPartialUpdate
         * @summary Partially update request
         * @request PATCH:/admin/requests/{identifier}/
         * @secure
         */
        adminRequestsPartialUpdate: (identifier: string, data: PatchedAdminRequestCreateUpdate, params?: RequestParams$2) => Promise<HttpResponse$1<AdminRequestCreateUpdateResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRequestsLogsList
         * @summary List request logs
         * @request GET:/admin/requests/{identifier}/logs/
         * @secure
         */
        adminRequestsLogsList: ({ identifier, ...query }: AdminRequestsLogsListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedRequestLogsListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRequestsPaymentProcessQuotesList
         * @summary List request payment processor quotes
         * @request GET:/admin/requests/{identifier}/payment-process-quotes/
         * @secure
         */
        adminRequestsPaymentProcessQuotesList: ({ identifier, ...query }: AdminRequestsPaymentProcessQuotesListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedPaymentProcessorQuoteListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRequestsPaymentProcessQuotesRetrieve
         * @summary Retrieve request payment processor quote
         * @request GET:/admin/requests/{identifier}/payment-process-quotes/{quote_identifier}/
         * @secure
         */
        adminRequestsPaymentProcessQuotesRetrieve: (identifier: string, quoteIdentifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<PaymentProcessorQuoteResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRequestsPaymentProcessQuotesExecuteRetrieve
         * @summary Retrieve request payment processor quote conversion
         * @request GET:/admin/requests/{identifier}/payment-process-quotes/{quote_identifier}/execute/
         * @secure
         */
        adminRequestsPaymentProcessQuotesExecuteRetrieve: (identifier: string, quoteIdentifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<PaymentProcessorQuoteResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRequestsRefundsList
         * @summary List request refunds
         * @request GET:/admin/requests/{identifier}/refunds/
         * @secure
         */
        adminRequestsRefundsList: ({ identifier, ...query }: AdminRequestsRefundsListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedRefundListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRequestsRefundsCreate
         * @summary Create request refund
         * @request POST:/admin/requests/{identifier}/refunds/
         * @secure
         */
        adminRequestsRefundsCreate: (identifier: string, data: AdminRefund, params?: RequestParams$2) => Promise<HttpResponse$1<AdminRefundResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminRequestsTransactionsList
         * @summary List request transactions
         * @request GET:/admin/requests/{identifier}/transactions/
         * @secure
         */
        adminRequestsTransactionsList: ({ identifier, ...query }: AdminRequestsTransactionsListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedRequestTransactionListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUsersList
         * @summary List users
         * @request GET:/admin/users/
         * @secure
         */
        adminUsersList: (query: AdminUsersListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedAdminUserListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUsersRetrieve
         * @summary Retrieve user
         * @request GET:/admin/users/{identifier}/
         * @secure
         */
        adminUsersRetrieve: (identifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<AdminUserResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUsersUpdate
         * @summary Update user
         * @request PUT:/admin/users/{identifier}/
         * @secure
         */
        adminUsersUpdate: (identifier: string, data: AdminUser, params?: RequestParams$2) => Promise<HttpResponse$1<AdminUserResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminUsersPartialUpdate
         * @summary Partially update user
         * @request PATCH:/admin/users/{identifier}/
         * @secure
         */
        adminUsersPartialUpdate: (identifier: string, data: PatchedAdminUser, params?: RequestParams$2) => Promise<HttpResponse$1<AdminUserResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminWebhooksList
         * @summary List webhooks
         * @request GET:/admin/webhooks/
         * @secure
         */
        adminWebhooksList: (query: AdminWebhooksListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedAdminWebhookListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminWebhooksCreate
         * @summary Create webhook
         * @request POST:/admin/webhooks/
         * @secure
         */
        adminWebhooksCreate: (data: AdminWebhook, params?: RequestParams$2) => Promise<HttpResponse$1<AdminWebhookResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminWebhooksRetrieve
         * @summary Retrieve webhook
         * @request GET:/admin/webhooks/{identifier}/
         * @secure
         */
        adminWebhooksRetrieve: (identifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<AdminWebhookResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminWebhooksUpdate
         * @summary Update webhook
         * @request PUT:/admin/webhooks/{identifier}/
         * @secure
         */
        adminWebhooksUpdate: (identifier: string, data: AdminWebhook, params?: RequestParams$2) => Promise<HttpResponse$1<AdminWebhookResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminWebhooksPartialUpdate
         * @summary Partially update webhook
         * @request PATCH:/admin/webhooks/{identifier}/
         * @secure
         */
        adminWebhooksPartialUpdate: (identifier: string, data: PatchedAdminWebhook, params?: RequestParams$2) => Promise<HttpResponse$1<AdminWebhookResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminWebhooksDestroy
         * @summary Delete webhook
         * @request DELETE:/admin/webhooks/{identifier}/
         * @secure
         */
        adminWebhooksDestroy: (identifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<AdminWebhookResponse, any>>;
    };
    deactivate: {
        /**
         * No description
         *
         * @tags deactivate
         * @name DeactivateCreate
         * @summary Deactivate service
         * @request POST:/deactivate/
         * @secure
         */
        deactivateCreate: (data: Deactivate$2, params?: RequestParams$2) => Promise<HttpResponse$1<ActionResponse$2, any>>;
    };
    requests: {
        /**
         * No description
         *
         * @tags requests
         * @name RequestsRetrieve
         * @summary Retrieve request
         * @request GET:/requests/{identifier}/
         * @secure
         */
        requestsRetrieve: (identifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<PublicRequestResponse, any>>;
        /**
         * No description
         *
         * @tags requests
         * @name RequestsUpdate
         * @summary Update request
         * @request PUT:/requests/{identifier}/
         * @secure
         */
        requestsUpdate: (identifier: string, data: PublicRequest, params?: RequestParams$2) => Promise<HttpResponse$1<PublicRequestResponse, any>>;
        /**
         * No description
         *
         * @tags requests
         * @name RequestsPartialUpdate
         * @summary Partially update request
         * @request PATCH:/requests/{identifier}/
         * @secure
         */
        requestsPartialUpdate: (identifier: string, data: PatchedPublicRequestUpdate, params?: RequestParams$2) => Promise<HttpResponse$1<PublicRequestResponse, any>>;
        /**
         * No description
         *
         * @tags requests
         * @name RequestsOtpChallengeCreate
         * @summary Create OTP challenge
         * @request POST:/requests/{identifier}/otp_challenge/
         * @secure
         */
        requestsOtpChallengeCreate: (identifier: string, data: OTPChallenge, params?: RequestParams$2) => Promise<HttpResponse$1<ActionResponse$2, any>>;
        /**
         * No description
         *
         * @tags requests
         * @name RequestsPaymentProcessorsList
         * @summary List request payment processors
         * @request GET:/requests/{identifier}/payment_processors/
         * @secure
         */
        requestsPaymentProcessorsList: ({ identifier, ...query }: RequestsPaymentProcessorsListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedPaymentProcessorListResponse, any>>;
        /**
         * No description
         *
         * @tags requests
         * @name RequestsResendOtpCreate
         * @summary Resend OTP challenge
         * @request POST:/requests/{identifier}/resend_otp/
         * @secure
         */
        requestsResendOtpCreate: (identifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<ActionResponse$2, any>>;
        /**
         * No description
         *
         * @tags requests
         * @name RequestsTransactionsList
         * @summary List request transactions
         * @request GET:/requests/{identifier}/transactions/
         * @secure
         */
        requestsTransactionsList: ({ identifier, ...query }: RequestsTransactionsListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedRequestTransactionListResponse, any>>;
    };
    user: {
        /**
         * No description
         *
         * @tags user
         * @name UserPaymentProcessorsList
         * @summary List payment processors
         * @request GET:/user/payment_processors/
         * @secure
         */
        userPaymentProcessorsList: (query: UserPaymentProcessorsListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedUserCompanyPaymentProcessorListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserPaymentProcessorsCreate
         * @summary Create payment processor
         * @request POST:/user/payment_processors/
         * @secure
         */
        userPaymentProcessorsCreate: (data: UserCRUDCompanyPaymentProcessor, params?: RequestParams$2) => Promise<HttpResponse$1<UserCompanyPaymentProcessorResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserPaymentProcessorsRetrieve
         * @summary Retrieve payment processor
         * @request GET:/user/payment_processors/{id}/
         * @secure
         */
        userPaymentProcessorsRetrieve: (id: string, params?: RequestParams$2) => Promise<HttpResponse$1<UserCompanyPaymentProcessorResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserPaymentProcessorsUpdate
         * @summary Update payment processor
         * @request PUT:/user/payment_processors/{id}/
         * @secure
         */
        userPaymentProcessorsUpdate: (id: string, data: UserCRUDCompanyPaymentProcessor, params?: RequestParams$2) => Promise<HttpResponse$1<UserCRUDCompanyPaymentProcessorResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserPaymentProcessorsPartialUpdate
         * @summary Partially update payment processor
         * @request PATCH:/user/payment_processors/{id}/
         * @secure
         */
        userPaymentProcessorsPartialUpdate: (id: string, data: PatchedUserCRUDCompanyPaymentProcessor, params?: RequestParams$2) => Promise<HttpResponse$1<UserCRUDCompanyPaymentProcessorResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserPaymentProcessorsDestroy
         * @summary Delete payment processor
         * @request DELETE:/user/payment_processors/{id}/
         * @secure
         */
        userPaymentProcessorsDestroy: (id: string, params?: RequestParams$2) => Promise<HttpResponse$1<UserCRUDCompanyPaymentProcessorResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRequestsList
         * @summary List request
         * @request GET:/user/requests/
         * @secure
         */
        userRequestsList: (query: UserRequestsListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedRequestListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRequestsCreate
         * @summary Create request
         * @request POST:/user/requests/
         * @secure
         */
        userRequestsCreate: (data: RequestCreateUpdate, params?: RequestParams$2) => Promise<HttpResponse$1<RequestCreateUpdateResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRequestsRetrieve
         * @summary Retrieve request
         * @request GET:/user/requests/{identifier}/
         * @secure
         */
        userRequestsRetrieve: (identifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<RequestResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRequestsUpdate
         * @summary Update request
         * @request PUT:/user/requests/{identifier}/
         * @secure
         */
        userRequestsUpdate: (identifier: string, data: Request, params?: RequestParams$2) => Promise<HttpResponse$1<RequestResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRequestsPartialUpdate
         * @summary Partially update request
         * @request PATCH:/user/requests/{identifier}/
         * @secure
         */
        userRequestsPartialUpdate: (identifier: string, data: PatchedRequestCreateUpdate, params?: RequestParams$2) => Promise<HttpResponse$1<RequestCreateUpdateResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRequestsNotifyCreate
         * @summary Send notification
         * @request POST:/user/requests/{identifier}/notify/
         * @secure
         */
        userRequestsNotifyCreate: (identifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<ActionResponse$2, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRequestsRefundsList
         * @summary List request refunds
         * @request GET:/user/requests/{identifier}/refunds/
         * @secure
         */
        userRequestsRefundsList: ({ identifier, ...query }: UserRequestsRefundsListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedRefundListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRequestsRefundsCreate
         * @summary Create request refund
         * @request POST:/user/requests/{identifier}/refunds/
         * @secure
         */
        userRequestsRefundsCreate: (identifier: string, data: CreateRefund, params?: RequestParams$2) => Promise<HttpResponse$1<CreateRefundResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserRequestsTransactionsList
         * @summary List request transactions
         * @request GET:/user/requests/{identifier}/transactions/
         * @secure
         */
        userRequestsTransactionsList: ({ identifier, ...query }: UserRequestsTransactionsListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedRequestTransactionListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserWebhooksList
         * @summary List webhooks
         * @request GET:/user/webhooks/
         * @secure
         */
        userWebhooksList: (query: UserWebhooksListParams, params?: RequestParams$2) => Promise<HttpResponse$1<PaginatedWebhookListResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserWebhooksCreate
         * @summary Create webhook
         * @request POST:/user/webhooks/
         * @secure
         */
        userWebhooksCreate: (data: Webhook$1, params?: RequestParams$2) => Promise<HttpResponse$1<WebhookResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserWebhooksRetrieve
         * @summary Retrieve webhook
         * @request GET:/user/webhooks/{identifier}/
         * @secure
         */
        userWebhooksRetrieve: (identifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<WebhookResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserWebhooksUpdate
         * @summary Update webhook
         * @request PUT:/user/webhooks/{identifier}/
         * @secure
         */
        userWebhooksUpdate: (identifier: string, data: Webhook$1, params?: RequestParams$2) => Promise<HttpResponse$1<WebhookResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserWebhooksPartialUpdate
         * @summary Partially webhook
         * @request PATCH:/user/webhooks/{identifier}/
         * @secure
         */
        userWebhooksPartialUpdate: (identifier: string, data: PatchedWebhook, params?: RequestParams$2) => Promise<HttpResponse$1<WebhookResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserWebhooksDestroy
         * @summary Delete webhook
         * @request DELETE:/user/webhooks/{identifier}/
         * @secure
         */
        userWebhooksDestroy: (identifier: string, params?: RequestParams$2) => Promise<HttpResponse$1<WebhookResponse, any>>;
    };
    webhook: {
        /**
         * No description
         *
         * @tags webhook
         * @name WebhookCreate
         * @summary Receive Platform webhook
         * @request POST:/webhook/
         * @secure
         */
        webhookCreate: (data: RehiveWebhook, params?: RequestParams$2) => Promise<HttpResponse$1<ActionResponse$2, any>>;
    };
    webhooks: {
        /**
         * No description
         *
         * @tags webhooks
         * @name WebhooksRehiveTransactionExecutedCreate
         * @summary Receive Platform webhook
         * @request POST:/webhooks/rehive_transaction/executed/
         * @secure
         */
        webhooksRehiveTransactionExecutedCreate: (data: RehiveWebhook, params?: RequestParams$2) => Promise<HttpResponse$1<ActionResponse$2, any>>;
        /**
         * No description
         *
         * @tags webhooks
         * @name WebhooksRehiveTransactionInitiatedCreate
         * @summary Receive Platform webhook
         * @request POST:/webhooks/rehive_transaction/initiated/
         * @secure
         */
        webhooksRehiveTransactionInitiatedCreate: (data: RehiveWebhook, params?: RequestParams$2) => Promise<HttpResponse$1<ActionResponse$2, any>>;
        /**
         * No description
         *
         * @tags webhooks
         * @name WebhooksRehiveUserCreateCreate
         * @summary Receive Platform webhook
         * @request POST:/webhooks/rehive_user/create/
         * @secure
         */
        webhooksRehiveUserCreateCreate: (data: RehiveWebhook, params?: RequestParams$2) => Promise<HttpResponse$1<ActionResponse$2, any>>;
        /**
         * No description
         *
         * @tags webhooks
         * @name WebhooksRehiveUserEmailUpdateCreate
         * @summary Receive Platform webhook
         * @request POST:/webhooks/rehive_user/email_update/
         * @secure
         */
        webhooksRehiveUserEmailUpdateCreate: (data: RehiveWebhook, params?: RequestParams$2) => Promise<HttpResponse$1<ActionResponse$2, any>>;
        /**
         * No description
         *
         * @tags webhooks
         * @name WebhooksRehiveUserUpdateCreate
         * @summary Receive Platform webhook
         * @request POST:/webhooks/rehive_user/update/
         * @secure
         */
        webhooksRehiveUserUpdateCreate: (data: RehiveWebhook, params?: RequestParams$2) => Promise<HttpResponse$1<ActionResponse$2, any>>;
    };
}

/** This serializer can be used if only a `status` is required in the response. */
interface ActionResponse$1 {
    status: string;
}
/**
 * Serialize the activation data, should be a token that represents an admin
 * user.
 */
interface Activate$1 {
    token: string;
    id: string;
    name: string;
    /** @format uuid */
    secret: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCard {
    id: string;
    currency: Currency;
    account: string | null;
    bridge_id: string | null;
    user: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompany$1 {
    id: string;
    /** @format uuid */
    secret: string;
    /**
     * * `test` - Test
     * * `production` - Production
     */
    mode: "test" | "production";
    bridge_api_key: string;
    bridge_webhook_id: string | null;
    admin_user_bridge_id: string | null;
}
interface AdminCompanyResponse$1 {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminCompany$1;
}
interface AdminCryptoReturnPolicy {
    id: string;
    refund_destination_address?: string | null;
    refund_destination_blockchain_memo?: string | null;
    refund_destination_chain?: string | null;
    refund_destination_currency?: string | null;
    /**
     * * `refund_to_sender` - refund_to_sender
     * * `static_address` - static_address
     */
    strategy: "refund_to_sender" | "static_address";
}
type AdminCryptoReturnPolicyList = AdminCryptoReturnPolicy[];
interface AdminCryptoReturnPolicyListResponse {
    status: string;
    data: AdminCryptoReturnPolicyList;
}
interface AdminCryptoReturnPolicyResponse {
    status: string;
    data: AdminCryptoReturnPolicy;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCurrency {
    code: string;
    /** * `usdc` - Usdc */
    bridge_code?: "usdc";
    /** * `solana` - Solana */
    bridge_chain?: "solana";
    display_code: string | null;
    description: string | null;
    symbol: string | null;
    unit: string | null;
    divisibility: number;
    manager: string | null;
}
interface AdminCurrencyResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminCurrency;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminExtendedCard {
    id: string;
    currency: Currency;
    account: string | null;
    bridge_id: string | null;
    client_reference_id: string;
    card_image_url: string;
    status: string;
    status_reason: string;
    card_details: Record<string, any>;
    balances: Record<string, any>;
    freezes: Record<string, any>;
    funding_instructions: Record<string, any>;
    user: string;
}
interface AdminExtendedCardResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminExtendedCard;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminPaymentProcessorQuote {
    id: string;
    /** @maxLength 256 */
    account?: string | null;
    currency: Record<string, any>;
    /**
     * @format decimal
     * @pattern ^-?\d{0,12}(?:\.\d{0,18})?$
     */
    amount?: string | null;
    /** @format date-time */
    expiration_date?: string | null;
    payer_user?: Record<string, any>;
    /**
     * * `bank` - Bank
     * * `wallet` - Wallet
     * * `crypto` - Crypto
     */
    processor_type: "bank" | "wallet" | "crypto";
}
interface AdminPaymentProcessorQuoteResponse {
    reference: string;
    account: string;
    deposit_details: Record<string, any>;
}
interface AdminPaymentProcessorQuoteResponseResponse {
    status: string;
    data: AdminPaymentProcessorQuoteResponse;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminUpdateCompany {
    id: string;
    /** @format uuid */
    secret: string;
    /**
     * * `test` - Test
     * * `production` - Production
     */
    mode: "test" | "production";
    bridge_api_key?: string;
    bridge_webhook_id: string | null;
    /** @maxLength 64 */
    admin_user_bridge_id?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminWallet {
    id: string;
    user: string;
    currency: Currency;
    account: string | null;
    bridge_id: string | null;
}
interface AdminWalletResponse {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: AdminWallet;
}
interface BridgeWebhook {
    event_id: string;
    event_category: string;
    event_type: string;
    event_object_id: string;
    event_object_status?: string | null;
    event_object_changes?: Record<string, any>;
    event_object: Record<string, any>;
    event_created_at: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Currency {
    /** @maxLength 32 */
    code: string;
    /** * `usdc` - Usdc */
    bridge_code?: "usdc";
    /** * `solana` - Solana */
    bridge_chain?: "solana";
    /** @maxLength 32 */
    display_code?: string | null;
    /** @maxLength 256 */
    description?: string | null;
    /** @maxLength 32 */
    symbol?: string | null;
    /** @maxLength 32 */
    unit?: string | null;
    /**
     * @min -2147483648
     * @max 2147483647
     */
    divisibility?: number;
}
/**
 * Serialize the deactivation data, should be a token that represents an admin
 * user.
 */
interface Deactivate$1 {
    token: string;
    /** @default false */
    purge?: boolean;
}
interface PaginatedAdminCardList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminCard[];
}
interface PaginatedAdminCardListResponse {
    status: string;
    data: PaginatedAdminCardList;
}
interface PaginatedAdminCurrencyList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminCurrency[];
}
interface PaginatedAdminCurrencyListResponse {
    status: string;
    data: PaginatedAdminCurrencyList;
}
interface PaginatedAdminWalletList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminWallet[];
}
interface PaginatedAdminWalletListResponse {
    status: string;
    data: PaginatedAdminWalletList;
}
interface PatchedAdminCryptoReturnPolicy {
    id?: string;
    refund_destination_address?: string | null;
    refund_destination_blockchain_memo?: string | null;
    refund_destination_chain?: string | null;
    refund_destination_currency?: string | null;
    /**
     * * `refund_to_sender` - refund_to_sender
     * * `static_address` - static_address
     */
    strategy?: "refund_to_sender" | "static_address";
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCurrency {
    code?: string;
    /** * `usdc` - Usdc */
    bridge_code?: "usdc";
    /** * `solana` - Solana */
    bridge_chain?: "solana";
    display_code?: string | null;
    description?: string | null;
    symbol?: string | null;
    unit?: string | null;
    divisibility?: number;
    manager?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminUpdateCompany {
    id?: string;
    /** @format uuid */
    secret?: string;
    /**
     * * `test` - Test
     * * `production` - Production
     */
    mode?: "test" | "production";
    bridge_api_key?: string;
    bridge_webhook_id?: string | null;
    /** @maxLength 64 */
    admin_user_bridge_id?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedUser$1 {
    id?: string;
    bridge_id?: string;
    bridge_signed_agreement_id?: string;
    business_id?: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface User$1 {
    id: string;
    bridge_id: string;
    bridge_signed_agreement_id: string;
    business_id: string;
}
interface UserCreateCustomerKYCLink {
    /**
     * * `individual` - Individual
     * * `business` - Business
     * @default "individual"
     */
    customer_type?: "individual" | "business";
    /** @format uri */
    redirect_uri?: string | null;
}
interface UserCryptoDeposit {
    account_currency: string;
    /**
     * * `solana` - Solana
     * * `base` - Base
     * * `ethereum` - Ethereum
     * * `stellar` - Stellar
     * * `tron` - Tron
     * * `polygon` - Polygon
     * * `arbitrum` - Arbitrum
     * * `optimism` - Optimism
     */
    chain: "solana" | "base" | "ethereum" | "stellar" | "tron" | "polygon" | "arbitrum" | "optimism";
}
interface UserCryptoDepositResponse {
    chain: string;
    currency: string;
    address: string;
    memo: string;
}
interface UserCryptoDepositResponseResponse {
    status: string;
    data: UserCryptoDepositResponse;
}
interface UserCustomerKYCLink {
    kyc: Record<string, any>;
    tos: Record<string, any>;
}
interface UserCustomerKYCLinkResponse {
    status: string;
    data: UserCustomerKYCLink;
}
interface UserResponse$1 {
    status: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data: User$1;
}
interface Webhook {
    id: string;
    /**
     * * `account.currency.create` - Account Currency Create
     * * `bank_account.create` - Bank Account Create
     * * `bank_account.update` - Bank Account Update
     * * `currency.create` - Currency Create
     * * `currency.update` - Currency Update
     * * `transaction.initiate` - Transaction Initiate
     * * `transaction.transition.update` - Transaction Transition Update
     * * `user.update` - User Update
     */
    event: "account.currency.create" | "bank_account.create" | "bank_account.update" | "currency.create" | "currency.update" | "transaction.initiate" | "transaction.transition.update" | "user.update";
    company: string;
    data: Record<string, any>;
}
interface AdminCardsListParams {
    account?: string;
    bridge_id?: string;
    currency?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    user?: string;
}
interface AdminCurrenciesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminWalletsListParams {
    account?: string;
    bridge_id?: string;
    currency?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    user?: string;
}
type QueryParamsType = Record<string | number, any>;
type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;
interface FullRequestParams extends Omit<RequestInit, "body"> {
    /** set parameter to `true` for call `securityWorker` for this request */
    secure?: boolean;
    /** request path */
    path: string;
    /** content type of request body */
    type?: ContentType;
    /** query params */
    query?: QueryParamsType;
    /** format of response (i.e. response.json() -> format: "json") */
    format?: ResponseFormat;
    /** request body */
    body?: unknown;
    /** base url */
    baseUrl?: string;
    /** request cancellation token */
    cancelToken?: CancelToken;
}
type RequestParams$1 = Omit<FullRequestParams, "body" | "method" | "query" | "path">;
interface ApiConfig<SecurityDataType = unknown> {
    baseUrl?: string;
    baseApiParams?: Omit<RequestParams$1, "baseUrl" | "cancelToken" | "signal">;
    securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams$1 | void> | RequestParams$1 | void;
    customFetch?: typeof fetch;
}
interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}
type CancelToken = Symbol | string | number;
declare enum ContentType {
    Json = "application/json",
    JsonApi = "application/vnd.api+json",
    FormData = "multipart/form-data",
    UrlEncoded = "application/x-www-form-urlencoded",
    Text = "text/plain"
}
declare class HttpClient<SecurityDataType = unknown> {
    baseUrl: string;
    private securityData;
    private securityWorker?;
    private abortControllers;
    private customFetch;
    private baseApiParams;
    constructor(apiConfig?: ApiConfig<SecurityDataType>);
    setSecurityData: (data: SecurityDataType | null) => void;
    protected encodeQueryParam(key: string, value: any): string;
    protected addQueryParam(query: QueryParamsType, key: string): string;
    protected addArrayQueryParam(query: QueryParamsType, key: string): any;
    protected toQueryString(rawQuery?: QueryParamsType): string;
    protected addQueryParams(rawQuery?: QueryParamsType): string;
    private contentFormatters;
    protected mergeRequestParams(params1: RequestParams$1, params2?: RequestParams$1): RequestParams$1;
    protected createAbortSignal: (cancelToken: CancelToken) => AbortSignal | undefined;
    abortRequest: (cancelToken: CancelToken) => void;
    request: <T = any, E = any>({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }: FullRequestParams) => Promise<HttpResponse<T, E>>;
}
/**
 * @title Bridge Service API
 * @version 1 (1)
 * @termsOfService https://rehive.com/terms/
 * @baseUrl https://bridge.services.rehive.com/api/
 * @externalDocs https://docs.rehive.com
 * @contact Rehive Support <support@rehive.com> (https://rehive.com/support/)
 *
 *
 * The **Bridge Service API** is used for managing and processing Rehive transactions using Bridge.
 *
 */
declare class Api$1<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
    activate: {
        /**
         * No description
         *
         * @tags activate
         * @name ActivateCreate
         * @request POST:/activate/
         * @secure
         */
        activateCreate: (data: Activate$1, params?: RequestParams$1) => Promise<HttpResponse<ActionResponse$1, any>>;
    };
    admin: {
        /**
         * No description
         *
         * @tags admin
         * @name AdminCardsList
         * @request GET:/admin/cards/
         * @secure
         */
        adminCardsList: (query: AdminCardsListParams, params?: RequestParams$1) => Promise<HttpResponse<PaginatedAdminCardListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCardsRetrieve
         * @request GET:/admin/cards/{identifier}/
         * @secure
         */
        adminCardsRetrieve: (identifier: string, params?: RequestParams$1) => Promise<HttpResponse<AdminExtendedCardResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyRetrieve
         * @request GET:/admin/company/
         * @secure
         */
        adminCompanyRetrieve: (params?: RequestParams$1) => Promise<HttpResponse<AdminCompanyResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyUpdate
         * @request PUT:/admin/company/
         * @secure
         */
        adminCompanyUpdate: (data: AdminUpdateCompany, params?: RequestParams$1) => Promise<HttpResponse<AdminCompanyResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyPartialUpdate
         * @request PATCH:/admin/company/
         * @secure
         */
        adminCompanyPartialUpdate: (data: PatchedAdminUpdateCompany, params?: RequestParams$1) => Promise<HttpResponse<AdminCompanyResponse$1, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCryptoReturnPoliciesList
         * @request GET:/admin/crypto-return-policies/
         * @secure
         */
        adminCryptoReturnPoliciesList: (params?: RequestParams$1) => Promise<HttpResponse<AdminCryptoReturnPolicyListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCryptoReturnPoliciesCreate
         * @request POST:/admin/crypto-return-policies/
         * @secure
         */
        adminCryptoReturnPoliciesCreate: (data: AdminCryptoReturnPolicy, params?: RequestParams$1) => Promise<HttpResponse<AdminCryptoReturnPolicyResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCryptoReturnPoliciesRetrieve
         * @request GET:/admin/crypto-return-policies/{identifier}/
         * @secure
         */
        adminCryptoReturnPoliciesRetrieve: (identifier: string, params?: RequestParams$1) => Promise<HttpResponse<AdminCryptoReturnPolicyResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCryptoReturnPoliciesUpdate
         * @request PUT:/admin/crypto-return-policies/{identifier}/
         * @secure
         */
        adminCryptoReturnPoliciesUpdate: (identifier: string, data: AdminCryptoReturnPolicy, params?: RequestParams$1) => Promise<HttpResponse<AdminCryptoReturnPolicyResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCryptoReturnPoliciesPartialUpdate
         * @request PATCH:/admin/crypto-return-policies/{identifier}/
         * @secure
         */
        adminCryptoReturnPoliciesPartialUpdate: (identifier: string, data: PatchedAdminCryptoReturnPolicy, params?: RequestParams$1) => Promise<HttpResponse<AdminCryptoReturnPolicyResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCryptoReturnPoliciesDestroy
         * @request DELETE:/admin/crypto-return-policies/{identifier}/
         * @secure
         */
        adminCryptoReturnPoliciesDestroy: (identifier: string, params?: RequestParams$1) => Promise<HttpResponse<AdminCryptoReturnPolicyResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCurrenciesList
         * @request GET:/admin/currencies/
         * @secure
         */
        adminCurrenciesList: (query: AdminCurrenciesListParams, params?: RequestParams$1) => Promise<HttpResponse<PaginatedAdminCurrencyListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCurrenciesRetrieve
         * @request GET:/admin/currencies/{code}/
         * @secure
         */
        adminCurrenciesRetrieve: (code: string, params?: RequestParams$1) => Promise<HttpResponse<AdminCurrencyResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCurrenciesUpdate
         * @request PUT:/admin/currencies/{code}/
         * @secure
         */
        adminCurrenciesUpdate: (code: string, data: AdminCurrency, params?: RequestParams$1) => Promise<HttpResponse<AdminCurrencyResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCurrenciesPartialUpdate
         * @request PATCH:/admin/currencies/{code}/
         * @secure
         */
        adminCurrenciesPartialUpdate: (code: string, data: PatchedAdminCurrency, params?: RequestParams$1) => Promise<HttpResponse<AdminCurrencyResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminPaymentProcessorQuoteCreate
         * @request POST:/admin/payment-processor-quote/
         * @secure
         */
        adminPaymentProcessorQuoteCreate: (data: AdminPaymentProcessorQuote, params?: RequestParams$1) => Promise<HttpResponse<AdminPaymentProcessorQuoteResponseResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminWalletsList
         * @request GET:/admin/wallets/
         * @secure
         */
        adminWalletsList: (query: AdminWalletsListParams, params?: RequestParams$1) => Promise<HttpResponse<PaginatedAdminWalletListResponse, any>>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminWalletsRetrieve
         * @request GET:/admin/wallets/{identifier}/
         * @secure
         */
        adminWalletsRetrieve: (identifier: string, params?: RequestParams$1) => Promise<HttpResponse<AdminWalletResponse, any>>;
    };
    bridge: {
        /**
         * No description
         *
         * @tags bridge
         * @name BridgeWebhookCreate
         * @request POST:/bridge/webhook/{company_id}/
         * @secure
         */
        bridgeWebhookCreate: (companyId: string, data: BridgeWebhook, params?: RequestParams$1) => Promise<HttpResponse<ActionResponse$1, any>>;
    };
    deactivate: {
        /**
         * No description
         *
         * @tags deactivate
         * @name DeactivateCreate
         * @request POST:/deactivate/
         * @secure
         */
        deactivateCreate: (data: Deactivate$1, params?: RequestParams$1) => Promise<HttpResponse<ActionResponse$1, any>>;
    };
    user: {
        /**
         * No description
         *
         * @tags user
         * @name UserRetrieve
         * @request GET:/user/
         * @secure
         */
        userRetrieve: (params?: RequestParams$1) => Promise<HttpResponse<UserResponse$1, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserUpdate
         * @request PUT:/user/
         * @secure
         */
        userUpdate: (data: User$1, params?: RequestParams$1) => Promise<HttpResponse<UserResponse$1, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserPartialUpdate
         * @request PATCH:/user/
         * @secure
         */
        userPartialUpdate: (data: PatchedUser$1, params?: RequestParams$1) => Promise<HttpResponse<UserResponse$1, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserCryptoDepositCreate
         * @request POST:/user/crypto-deposit/
         * @secure
         */
        userCryptoDepositCreate: (data: UserCryptoDeposit, params?: RequestParams$1) => Promise<HttpResponse<UserCryptoDepositResponseResponse, any>>;
        /**
         * No description
         *
         * @tags user
         * @name UserKycLinksCreate
         * @request POST:/user/kyc-links/
         * @secure
         */
        userKycLinksCreate: (data: UserCreateCustomerKYCLink, params?: RequestParams$1) => Promise<HttpResponse<UserCustomerKYCLinkResponse, any>>;
    };
    webhook: {
        /**
         * No description
         *
         * @tags webhook
         * @name WebhookCreate
         * @request POST:/webhook/
         * @secure
         */
        webhookCreate: (data: Webhook, params?: RequestParams$1) => Promise<HttpResponse<ActionResponse$1, any>>;
    };
}

/** This serializer can be used if only a `status` is required in the response. */
interface ActionResponse {
    /** @default "sucess" */
    status?: string;
}
interface Activate {
    token: string;
    id: string;
    /** @format uuid */
    secret: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCompany {
    id: string;
    /** @format uuid */
    secret: string;
    config?: Record<string, any>;
    /** @format uri */
    android_play_store_url?: string | null;
    /** @format uri */
    apple_app_store_url?: string | null;
}
interface AdminCompanyResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminCompany;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateDomain {
    id: string;
    /**
     * * `native` - Native
     * * `client` - Client
     */
    host?: "native" | "client";
    /** @maxLength 100 */
    domain: string;
    /**
     * * `active` - Active
     * * `inactive` - Inactive
     */
    status: "active" | "inactive";
    created: number;
    updated: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminCreateLocale {
    /** @pattern ^[a-zA-Z0-9\_\-]+$ */
    id: string;
    translation: Record<string, any>;
    /** @format uri */
    icon?: string | null;
    /** @maxLength 50 */
    name?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AdminDomain {
    id: string;
    /**
     * * `native` - Native
     * * `client` - Client
     */
    host: "native" | "client";
    domain: string;
    /**
     * * `active` - Active
     * * `inactive` - Inactive
     */
    status: "active" | "inactive";
    created: number;
    updated: number;
}
interface AdminDomainResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AdminDomain;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AndroidApp {
    id: string;
    /** @maxLength 50 */
    package: string;
    /** @maxLength 30 */
    name?: string | null;
    /** @maxLength 80 */
    short_description?: string | null;
    /** @maxLength 4000 */
    full_description?: string | null;
    /** @maxLength 3807 */
    whats_new?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    website?: string | null;
    /** @maxLength 24 */
    contact_phone_number?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email_address?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    terms_and_conditions?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    privacy_policy?: string | null;
    created: number;
    updated: number;
}
interface AndroidAppResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AndroidApp;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface AppCodebase {
    id: string;
    /**
     * * `mobile` - Mobile
     * * `web` - Web
     */
    type: "mobile" | "web";
    /** @format uri */
    file: string;
    /** @maxLength 24 */
    version: string;
    /** @maxLength 24 */
    title?: string | null;
    description?: string | null;
    /** @format date-time */
    created: string;
    /** @format date-time */
    updated: string;
}
interface AppCodebaseResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: AppCodebase;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Company {
    id: string;
    config: Record<string, any>;
    /** @format uri */
    android_play_store_url?: string | null;
    /** @format uri */
    apple_app_store_url?: string | null;
}
interface CompanyResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Company;
}
interface Deactivate {
    token: string;
    /** @default false */
    purge?: boolean;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface IOSApp {
    id: string;
    /** @maxLength 50 */
    bundle_identifier: string;
    /** @maxLength 30 */
    name?: string | null;
    /** @maxLength 30 */
    subtitle?: string | null;
    /** @maxLength 3110 */
    description?: string | null;
    /** @maxLength 170 */
    promotional_text?: string | null;
    /** @maxLength 3807 */
    whats_new?: string | null;
    /** @maxLength 70 */
    keywords?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    support_url?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    marketing_url?: string | null;
    /** @maxLength 30 */
    contact_first_name?: string | null;
    /** @maxLength 30 */
    contact_last_name?: string | null;
    /** @maxLength 24 */
    contact_phone_number?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email_address?: string | null;
    /** @maxLength 70 */
    copyright?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    terms_and_conditions?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    privacy_policy?: string | null;
    created: number;
    updated: number;
}
interface IOSAppResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: IOSApp;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface Locale {
    id: string;
    translation: Record<string, any>;
    created: number;
    updated: number;
    /** @format uri */
    icon?: string | null;
    /** @maxLength 50 */
    name?: string | null;
}
interface LocaleResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: Locale;
}
interface PaginatedAdminDomainList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AdminDomain[];
}
interface PaginatedAdminDomainListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAdminDomainList;
}
interface PaginatedAndroidAppList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AndroidApp[];
}
interface PaginatedAndroidAppListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAndroidAppList;
}
interface PaginatedAppCodebaseList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: AppCodebase[];
}
interface PaginatedAppCodebaseListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedAppCodebaseList;
}
interface PaginatedIOSAppList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: IOSApp[];
}
interface PaginatedIOSAppListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedIOSAppList;
}
interface PaginatedLocaleList {
    /** @example 123 */
    count?: number;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=4"
     */
    next?: string | null;
    /**
     * @format uri
     * @example "http://api.example.org/accounts/?page=2"
     */
    previous?: string | null;
    results?: Locale[];
}
interface PaginatedLocaleListResponse {
    /** @example "success" */
    status?: string;
    data?: PaginatedLocaleList;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminCompany {
    id?: string;
    /** @format uuid */
    secret?: string;
    config?: Record<string, any>;
    /** @format uri */
    android_play_store_url?: string | null;
    /** @format uri */
    apple_app_store_url?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAdminDomain {
    id?: string;
    /**
     * * `native` - Native
     * * `client` - Client
     */
    host?: "native" | "client";
    domain?: string;
    /**
     * * `active` - Active
     * * `inactive` - Inactive
     */
    status?: "active" | "inactive";
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAndroidApp {
    id?: string;
    /** @maxLength 50 */
    package?: string;
    /** @maxLength 30 */
    name?: string | null;
    /** @maxLength 80 */
    short_description?: string | null;
    /** @maxLength 4000 */
    full_description?: string | null;
    /** @maxLength 3807 */
    whats_new?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    website?: string | null;
    /** @maxLength 24 */
    contact_phone_number?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email_address?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    terms_and_conditions?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    privacy_policy?: string | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedAppCodebase {
    id?: string;
    /**
     * * `mobile` - Mobile
     * * `web` - Web
     */
    type?: "mobile" | "web";
    /** @format uri */
    file?: string;
    /** @maxLength 24 */
    version?: string;
    /** @maxLength 24 */
    title?: string | null;
    description?: string | null;
    /** @format date-time */
    created?: string;
    /** @format date-time */
    updated?: string;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedIOSApp {
    id?: string;
    /** @maxLength 50 */
    bundle_identifier?: string;
    /** @maxLength 30 */
    name?: string | null;
    /** @maxLength 30 */
    subtitle?: string | null;
    /** @maxLength 3110 */
    description?: string | null;
    /** @maxLength 170 */
    promotional_text?: string | null;
    /** @maxLength 3807 */
    whats_new?: string | null;
    /** @maxLength 70 */
    keywords?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    support_url?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    marketing_url?: string | null;
    /** @maxLength 30 */
    contact_first_name?: string | null;
    /** @maxLength 30 */
    contact_last_name?: string | null;
    /** @maxLength 24 */
    contact_phone_number?: string | null;
    /**
     * @format email
     * @maxLength 254
     */
    contact_email_address?: string | null;
    /** @maxLength 70 */
    copyright?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    terms_and_conditions?: string | null;
    /**
     * @format uri
     * @maxLength 200
     */
    privacy_policy?: string | null;
    created?: number;
    updated?: number;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedLocale {
    id?: string;
    translation?: Record<string, any>;
    created?: number;
    updated?: number;
    /** @format uri */
    icon?: string | null;
    /** @maxLength 50 */
    name?: string | null;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface PatchedUser {
    id?: string;
    config?: Record<string, any>;
}
/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
interface User {
    id: string;
    config?: Record<string, any>;
}
interface UserResponse {
    /** @example "success" */
    status?: string;
    /**
     * A ModelSerializer that takes additional arguments for
     * "fields", "omit" and "expand" in order to
     * control which fields are displayed, and whether to replace simple
     * values with complex, nested serializations
     */
    data?: User;
}
interface AdminAndroidAppsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminAppCodebasesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    type?: string;
    version?: string;
}
interface AdminDomainsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminIosAppsListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface AdminLocalesListParams {
    id?: string;
    id__in?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
interface PublicCompanyLocalesListParams {
    id?: string;
    id__in?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    /** @pattern ^([a-zA-Z0-9\_\-]+)$ */
    companyId: string;
}
interface SuperadminAppCodebasesListParams {
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
    type?: string;
    version?: string;
}
interface UserLocalesListParams {
    id?: string;
    id__in?: string;
    /** A page number within the paginated result set. */
    page?: number;
    /** Number of results to return per page. */
    page_size?: number;
}
/**
 * @title App Service API
 * @version 1 (1)
 * @termsOfService https://rehive.com/terms/
 * @baseUrl https://app.services.rehive.com
 * @externalDocs https://docs.rehive.com
 * @contact Rehive Support <support@rehive.com> (https://rehive.com/support/)
 *
 *
 * The **App Service API** is used for customizing the end-user app experience in Rehive.
 *
 */
declare class Api<SecurityDataType extends unknown> extends HttpClient$b<SecurityDataType> {
    activate: {
        /**
         * No description
         *
         * @tags activate
         * @name ActivateCreate
         * @summary Activate service
         * @request POST:/activate/
         * @secure
         */
        activateCreate: (data: Activate, params?: RequestParams) => Promise<ActionResponse>;
    };
    admin: {
        /**
         * No description
         *
         * @tags admin
         * @name AdminAndroidAppsList
         * @summary List android apps
         * @request GET:/admin/android-apps/
         * @secure
         */
        adminAndroidAppsList: (query: AdminAndroidAppsListParams, params?: RequestParams) => Promise<PaginatedAndroidAppListResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminAndroidAppsCreate
         * @summary Create android app
         * @request POST:/admin/android-apps/
         * @secure
         */
        adminAndroidAppsCreate: (data: AndroidApp, params?: RequestParams) => Promise<AndroidAppResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminAndroidAppsRetrieve
         * @summary Retrieve android app
         * @request GET:/admin/android-apps/{id}/
         * @secure
         */
        adminAndroidAppsRetrieve: (id: string, params?: RequestParams) => Promise<AndroidAppResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminAndroidAppsUpdate
         * @summary Update android app
         * @request PUT:/admin/android-apps/{id}/
         * @secure
         */
        adminAndroidAppsUpdate: (id: string, data: AndroidApp, params?: RequestParams) => Promise<AndroidAppResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminAndroidAppsPartialUpdate
         * @summary Partially update android app
         * @request PATCH:/admin/android-apps/{id}/
         * @secure
         */
        adminAndroidAppsPartialUpdate: (id: string, data: PatchedAndroidApp, params?: RequestParams) => Promise<AndroidAppResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminAndroidAppsDestroy
         * @summary Delete android app
         * @request DELETE:/admin/android-apps/{id}/
         * @secure
         */
        adminAndroidAppsDestroy: (id: string, params?: RequestParams) => Promise<AndroidAppResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminAppCodebasesList
         * @summary List app codebases
         * @request GET:/admin/app-codebases/
         * @secure
         */
        adminAppCodebasesList: (query: AdminAppCodebasesListParams, params?: RequestParams) => Promise<PaginatedAppCodebaseListResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminAppCodebasesRetrieve
         * @summary Retrieve app codebase
         * @request GET:/admin/app-codebases/{id}/
         * @secure
         */
        adminAppCodebasesRetrieve: (id: string, params?: RequestParams) => Promise<AppCodebaseResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyRetrieve
         * @summary Retrieve company
         * @request GET:/admin/company/
         * @secure
         */
        adminCompanyRetrieve: (params?: RequestParams) => Promise<AdminCompanyResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyUpdate
         * @summary Update company
         * @request PUT:/admin/company/
         * @secure
         */
        adminCompanyUpdate: (data: AdminCompany, params?: RequestParams) => Promise<AdminCompanyResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminCompanyPartialUpdate
         * @summary Partially update company
         * @request PATCH:/admin/company/
         * @secure
         */
        adminCompanyPartialUpdate: (data: PatchedAdminCompany, params?: RequestParams) => Promise<AdminCompanyResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminDomainsList
         * @summary List domains
         * @request GET:/admin/domains/
         * @secure
         */
        adminDomainsList: (query: AdminDomainsListParams, params?: RequestParams) => Promise<PaginatedAdminDomainListResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminDomainsCreate
         * @summary Create domain
         * @request POST:/admin/domains/
         * @secure
         */
        adminDomainsCreate: (data: AdminCreateDomain, params?: RequestParams) => Promise<AdminDomainResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminDomainsRetrieve
         * @summary Retrieve domain
         * @request GET:/admin/domains/{identifier}/
         * @secure
         */
        adminDomainsRetrieve: (identifier: string, params?: RequestParams) => Promise<AdminDomainResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminDomainsUpdate
         * @summary Update domain
         * @request PUT:/admin/domains/{identifier}/
         * @secure
         */
        adminDomainsUpdate: (identifier: string, data: AdminDomain, params?: RequestParams) => Promise<AdminDomainResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminDomainsPartialUpdate
         * @summary Partially update domain
         * @request PATCH:/admin/domains/{identifier}/
         * @secure
         */
        adminDomainsPartialUpdate: (identifier: string, data: PatchedAdminDomain, params?: RequestParams) => Promise<AdminDomainResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminDomainsDestroy
         * @summary Delete domain
         * @request DELETE:/admin/domains/{identifier}/
         * @secure
         */
        adminDomainsDestroy: (identifier: string, params?: RequestParams) => Promise<AdminDomainResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIosAppsList
         * @summary List iOS apps
         * @request GET:/admin/ios-apps/
         * @secure
         */
        adminIosAppsList: (query: AdminIosAppsListParams, params?: RequestParams) => Promise<PaginatedIOSAppListResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIosAppsCreate
         * @summary Create iOS app
         * @request POST:/admin/ios-apps/
         * @secure
         */
        adminIosAppsCreate: (data: IOSApp, params?: RequestParams) => Promise<IOSAppResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIosAppsRetrieve
         * @summary Retrieve iOS app
         * @request GET:/admin/ios-apps/{id}/
         * @secure
         */
        adminIosAppsRetrieve: (id: string, params?: RequestParams) => Promise<IOSAppResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIosAppsUpdate
         * @summary Update iOS app
         * @request PUT:/admin/ios-apps/{id}/
         * @secure
         */
        adminIosAppsUpdate: (id: string, data: IOSApp, params?: RequestParams) => Promise<IOSAppResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIosAppsPartialUpdate
         * @summary Partially update iOS app
         * @request PATCH:/admin/ios-apps/{id}/
         * @secure
         */
        adminIosAppsPartialUpdate: (id: string, data: PatchedIOSApp, params?: RequestParams) => Promise<IOSAppResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminIosAppsDestroy
         * @summary Delete iOS app
         * @request DELETE:/admin/ios-apps/{id}/
         * @secure
         */
        adminIosAppsDestroy: (id: string, params?: RequestParams) => Promise<IOSAppResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLocalesList
         * @summary List locales
         * @request GET:/admin/locales/
         * @secure
         */
        adminLocalesList: (query: AdminLocalesListParams, params?: RequestParams) => Promise<PaginatedLocaleListResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLocalesCreate
         * @summary Create locale
         * @request POST:/admin/locales/
         * @secure
         */
        adminLocalesCreate: (data: AdminCreateLocale, params?: RequestParams) => Promise<LocaleResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLocalesRetrieve
         * @summary Retrieve locale
         * @request GET:/admin/locales/{locale_id}/
         * @secure
         */
        adminLocalesRetrieve: (localeId: string, params?: RequestParams) => Promise<LocaleResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLocalesUpdate
         * @summary Update locale
         * @request PUT:/admin/locales/{locale_id}/
         * @secure
         */
        adminLocalesUpdate: (localeId: string, data: Locale, params?: RequestParams) => Promise<LocaleResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLocalesPartialUpdate
         * @summary Partially update locale
         * @request PATCH:/admin/locales/{locale_id}/
         * @secure
         */
        adminLocalesPartialUpdate: (localeId: string, data: PatchedLocale, params?: RequestParams) => Promise<LocaleResponse>;
        /**
         * No description
         *
         * @tags admin
         * @name AdminLocalesDestroy
         * @summary Delete locale
         * @request DELETE:/admin/locales/{locale_id}/
         * @secure
         */
        adminLocalesDestroy: (localeId: string, params?: RequestParams) => Promise<LocaleResponse>;
    };
    deactivate: {
        /**
         * No description
         *
         * @tags deactivate
         * @name DeactivateCreate
         * @summary Deactivate service
         * @request POST:/deactivate/
         * @secure
         */
        deactivateCreate: (data: Deactivate, params?: RequestParams) => Promise<ActionResponse>;
    };
    public: {
        /**
         * No description
         *
         * @tags public
         * @name PublicCompanyRetrieve
         * @summary Retrieve public company
         * @request GET:/public/company/
         * @secure
         */
        publicCompanyRetrieve: (params?: RequestParams) => Promise<CompanyResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicCompanyLocalesList
         * @summary List public locales
         * @request GET:/public/company/{company_id}/locales/
         * @secure
         */
        publicCompanyLocalesList: ({ companyId, ...query }: PublicCompanyLocalesListParams, params?: RequestParams) => Promise<PaginatedLocaleListResponse>;
        /**
         * No description
         *
         * @tags public
         * @name PublicCompanyLocalesRetrieve
         * @summary Retrieve public locale
         * @request GET:/public/company/{company_id}/locales/{locale_id}/
         * @secure
         */
        publicCompanyLocalesRetrieve: (companyId: string, localeId: string, params?: RequestParams) => Promise<LocaleResponse>;
    };
    superadmin: {
        /**
         * No description
         *
         * @tags superadmin
         * @name SuperadminAppCodebasesList
         * @summary List app codebases
         * @request GET:/superadmin/app-codebases/
         * @secure
         */
        superadminAppCodebasesList: (query: SuperadminAppCodebasesListParams, params?: RequestParams) => Promise<PaginatedAppCodebaseListResponse>;
        /**
         * No description
         *
         * @tags superadmin
         * @name SuperadminAppCodebasesCreate
         * @summary Create app codebase
         * @request POST:/superadmin/app-codebases/
         * @secure
         */
        superadminAppCodebasesCreate: (data: AppCodebase, params?: RequestParams) => Promise<AppCodebaseResponse>;
        /**
         * No description
         *
         * @tags superadmin
         * @name SuperadminAppCodebasesRetrieve
         * @summary Retrieve app codebase
         * @request GET:/superadmin/app-codebases/{id}/
         * @secure
         */
        superadminAppCodebasesRetrieve: (id: string, params?: RequestParams) => Promise<AppCodebaseResponse>;
        /**
         * No description
         *
         * @tags superadmin
         * @name SuperadminAppCodebasesUpdate
         * @summary Update app codebase
         * @request PUT:/superadmin/app-codebases/{id}/
         * @secure
         */
        superadminAppCodebasesUpdate: (id: string, data: AppCodebase, params?: RequestParams) => Promise<AppCodebaseResponse>;
        /**
         * No description
         *
         * @tags superadmin
         * @name SuperadminAppCodebasesPartialUpdate
         * @summary Partially update codebase
         * @request PATCH:/superadmin/app-codebases/{id}/
         * @secure
         */
        superadminAppCodebasesPartialUpdate: (id: string, data: PatchedAppCodebase, params?: RequestParams) => Promise<AppCodebaseResponse>;
        /**
         * No description
         *
         * @tags superadmin
         * @name SuperadminAppCodebasesDestroy
         * @summary Delete codebase
         * @request DELETE:/superadmin/app-codebases/{id}/
         * @secure
         */
        superadminAppCodebasesDestroy: (id: string, params?: RequestParams) => Promise<AppCodebaseResponse>;
    };
    user: {
        /**
         * No description
         *
         * @tags user
         * @name UserRetrieve
         * @summary Retrieve user
         * @request GET:/user/
         * @secure
         */
        userRetrieve: (params?: RequestParams) => Promise<UserResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserUpdate
         * @summary Update user
         * @request PUT:/user/
         * @secure
         */
        userUpdate: (data: User, params?: RequestParams) => Promise<UserResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserPartialUpdate
         * @summary Partially update user
         * @request PATCH:/user/
         * @secure
         */
        userPartialUpdate: (data: PatchedUser, params?: RequestParams) => Promise<UserResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserCompanyRetrieve
         * @summary Retrieve company
         * @request GET:/user/company/
         * @secure
         */
        userCompanyRetrieve: (params?: RequestParams) => Promise<CompanyResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserLocalesList
         * @summary List locales
         * @request GET:/user/locales/
         * @secure
         */
        userLocalesList: (query: UserLocalesListParams, params?: RequestParams) => Promise<PaginatedLocaleListResponse>;
        /**
         * No description
         *
         * @tags user
         * @name UserLocalesRetrieve
         * @summary Retrieve locale
         * @request GET:/user/locales/{locale_id}/
         * @secure
         */
        userLocalesRetrieve: (localeId: string, params?: RequestParams) => Promise<LocaleResponse>;
    };
}

interface RehiveConfig {
    baseUrl?: string;
    token?: string;
    storage?: StorageAdapter$1;
    enableCrossTabSync?: boolean;
}
/**
 * Rehive SDK Client - Modern, unified API client for the Rehive ecosystem.
 *
 * This is the main entry point for interacting with Rehive platform and extension APIs.
 * Supports both client-side authentication flows and server-side permanent token usage.
 *
 * ## Key Features:
 *
 * ### 1. Dual Authentication Modes
 * - Client-side: Login/logout flows with automatic token refresh
 * - Server-side: Permanent token initialization for backend services
 *
 * ### 2. Direct API Access
 * - Clean property-based access: `rehive.user.authLogin()`
 * - No getter methods or complex initialization required
 * - Full TypeScript intellisense support
 *
 * ### 3. Enhanced Developer Experience
 * - Automatic response unwrapping (data.data → data)
 * - No .v3 prefix needed for platform APIs
 * - Unified token management across all APIs
 *
 * ### 4. Extension API Integration
 * - Factory methods with production defaults for all official extensions
 * - Authenticated fetch method for custom endpoints
 * - Automatic token synchronization across all APIs
 * - Same DX improvements as platform APIs
 *
 * ## Usage Examples:
 *
 * ### Server-side with permanent token:
 * ```typescript
 * const rehive = new RehiveClient({
 *   baseUrl: 'https://api.rehive.com',
 *   token: 'your-admin-token'
 * });
 *
 * // Direct API access - no initialization needed
 * await rehive.admin.adminUsersCreate(userData);
 * await rehive.user.userRetrieve();
 * ```
 *
 * ### Client-side with authentication flows:
 * ```typescript
 * const rehive = new RehiveClient({
 *   baseUrl: 'https://api.rehive.com'
 * });
 *
 * // Login flow
 * await rehive.auth.login({ user: 'email', password: 'pass' });
 * await rehive.user.userRetrieve(); // Automatically authenticated
 *
 * // Extension APIs
 * const conversion = rehive.extensions.conversion();
 * await conversion.user.userConversionPairsList({});
 *
 * // Custom endpoints with authenticated fetch
 * const response = await rehive.extensions.fetch('https://my-custom.services.rehive.com/api/users');
 * const users = await response.json();
 * ```
 *
 * All APIs automatically handle token expiration, refresh, and response unwrapping.
 */
declare class RehiveClient {
    private refreshPromise;
    private loadAuthStatePromise;
    private sessions;
    private activeSessionIndex;
    private sessionListeners;
    private errorListeners;
    private currentError;
    private storage;
    private enableCrossTabSync;
    private storageKey;
    private isRefreshing;
    private apiInstances;
    private config;
    readonly user: RehivePlatformUserApi<unknown>;
    readonly admin: RehivePlatformAdminApi<unknown>;
    constructor(config?: RehiveConfig);
    /**
     * Authentication methods for client-side usage
     */
    readonly auth: {
        login: (params: Login) => Promise<AuthSession>;
        register: (params: Register) => Promise<void>;
        logout: () => Promise<void>;
        refresh: () => Promise<void>;
        getActiveSession: () => AuthSession | null;
        subscribeToSession: (listener: SessionListener) => () => void;
        subscribeToErrors: (listener: ErrorListener) => () => void;
        deleteChallenge: (challengeId: string) => Promise<void>;
    };
    /**
     * Extension API factories
     */
    readonly extensions: {
        conversion: (config?: {
            baseUrl?: string;
        }) => Api$a<unknown>;
        massSend: (config?: {
            baseUrl?: string;
        }) => Api$9<unknown>;
        notifications: (config?: {
            baseUrl?: string;
        }) => Api$8<unknown>;
        products: (config?: {
            baseUrl?: string;
        }) => Api$7<unknown>;
        rewards: (config?: {
            baseUrl?: string;
        }) => Api$6<unknown>;
        stellar: (config?: {
            baseUrl?: string;
        }) => Api$5<unknown>;
        stellarTestnet: (config?: {
            baseUrl?: string;
        }) => Api$4<unknown>;
        business: (config?: {
            baseUrl?: string;
        }) => Api$3<unknown>;
        paymentRequests: (config?: {
            baseUrl?: string;
        }) => Api$2<unknown>;
        bridge: (config?: {
            baseUrl?: string;
        }) => Api$1<unknown>;
        app: (config?: {
            baseUrl?: string;
        }) => Api<unknown>;
        /**
         * Make authenticated HTTP requests to custom endpoints.
         *
         * This method works like fetch() but automatically handles authentication:
         * - Attaches the current user's token to requests
         * - Refreshes expired tokens automatically
         * - Works with any HTTP endpoint
         *
         * @example
         * ```typescript
         * // GET request to custom extension
         * const response = await rehive.extensions.fetch('https://my-custom.services.rehive.com/api/users');
         * const users = await response.json();
         *
         * // POST request with data
         * const response = await rehive.extensions.fetch('https://my-custom.services.rehive.com/api/orders', {
         *   method: 'POST',
         *   headers: { 'Content-Type': 'application/json' },
         *   body: JSON.stringify({ product_id: 123, quantity: 2 })
         * });
         * ```
         *
         * @param url - The URL to fetch from
         * @param options - Standard fetch options (method, headers, body, etc.)
         * @returns Promise resolving to the Response object
         */
        fetch: (url: string, options?: RequestInit) => Promise<Response>;
    };
    /**
     * Initialize permanent token for server-side usage
     */
    private setPermanentToken;
    /**
     * Initialize client-side authentication system
     */
    private initializeClientAuth;
    /**
     * Creates security worker for automatic token management
     */
    private createSecurityWorker;
    private getDefaultStorage;
    private setupCrossTabSync;
    private loadAuthState;
    private saveAuthState;
    private notifySessionListeners;
    private notifyErrorListeners;
    private syncTokensToAllInstances;
    private isTokenExpired;
    getActiveSession(): UserSession$1 | null;
    getCurrentError(): Error | null;
    private createExtensionApi;
    private createConversionApi;
    private createMassSendApi;
    private createNotificationsApi;
    private createProductsApi;
    private createRewardsApi;
    private createStellarApi;
    private createStellarTestnetApi;
    private createBusinessApi;
    private createPaymentRequestsApi;
    private createBridgeApi;
    private createAppApi;
    /**
     * Make an authenticated HTTP request using fetch with automatic token management.
     *
     * This method automatically:
     * - Checks if the current token is expired and refreshes it if needed
     * - Attaches the Authorization header with the current token
     * - Handles both permanent tokens (server-side) and session tokens (client-side)
     *
     * @param url - The URL to fetch from
     * @param options - Standard fetch options (method, headers, body, etc.)
     * @returns Promise resolving to the Response object
     */
    private authenticatedFetch;
    private login;
    private register;
    private logout;
    private refresh;
    private subscribeToSession;
    private subscribeToErrors;
    private deleteChallenge;
}

interface AuthContextType {
    authUser: AuthSession | null | undefined;
    refreshCallback: () => Promise<void>;
    login: (params: Login) => Promise<AuthSession>;
    register: (params: Register) => Promise<void>;
    logout: () => Promise<void>;
    refresh: () => Promise<void>;
    authLoading: boolean;
    authError: Error | null | undefined;
    deleteChallenge: (challengeId: string | undefined) => Promise<void>;
    rehive: RehiveClient;
}
interface AuthProviderProps {
    children: ReactNode;
    config: RehiveConfig;
}
declare const AuthProvider: ({ children, config }: AuthProviderProps) => react_jsx_runtime.JSX.Element;
declare const useAuth: () => AuthContextType;

interface Challenge {
    id: string;
    type: string;
    durability: string;
    authenticator_types: string[];
    created: number;
}
interface UserSession {
    user: {
        id: string;
    };
    challenges: Challenge[];
    token: string;
    refresh_token: string;
    expires: number;
}
interface StorageAdapter {
    getItem(key: string): Promise<string | null>;
    setItem(key: string, value: string): Promise<void>;
}
interface LoginParams {
    user: string;
    company: string;
    password: string;
    session_duration?: number;
    auth_method?: string;
}
interface RegisterParams {
    first_name?: string;
    last_name?: string;
    username?: string;
    email?: string;
    mobile?: string;
    company: string;
    id_number?: string | null;
    birth_date?: string | null;
    language?: string;
    gender?: 'male' | 'female' | 'other' | 'not_specified' | null;
    title?: 'mr' | 'mrs' | 'ms' | 'mx' | null;
    marital_status?: 'single' | 'married' | 'divorced' | 'widowed' | null;
    nationality?: string | null;
    timezone?: string;
    password: string;
    password1: string;
    password2: string;
    terms_and_conditions?: boolean;
    privacy_policy?: boolean;
    session_duration?: number;
    groups?: string[];
    legal_term_versions?: number[];
    auth_method?: string;
}
interface TokenManagerConfig {
    baseUrl?: string;
    storage?: StorageAdapter;
    enableCrossTabSync?: boolean;
}

export { type AuthContextType, AuthProvider, type AuthProviderProps, type LoginParams, type RegisterParams, RehiveClient, type TokenManagerConfig, type UserSession, useAuth };
